/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// FirewallRulesAndErrorObjects struct for FirewallRulesAndErrorObjects
type FirewallRulesAndErrorObjects struct {
	Rules []FirewallRule `json:"rules,omitempty"`
	// List of errors for any rules that failed
	Errors []FirewallRuleWithError `json:"errors,omitempty"`
}

// NewFirewallRulesAndErrorObjects instantiates a new FirewallRulesAndErrorObjects object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirewallRulesAndErrorObjects() *FirewallRulesAndErrorObjects {
	this := FirewallRulesAndErrorObjects{}
	return &this
}

// NewFirewallRulesAndErrorObjectsWithDefaults instantiates a new FirewallRulesAndErrorObjects object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirewallRulesAndErrorObjectsWithDefaults() *FirewallRulesAndErrorObjects {
	this := FirewallRulesAndErrorObjects{}
	return &this
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *FirewallRulesAndErrorObjects) GetRules() []FirewallRule {
	if o == nil || o.Rules == nil {
		var ret []FirewallRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallRulesAndErrorObjects) GetRulesOk() ([]FirewallRule, bool) {
	if o == nil || o.Rules == nil {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *FirewallRulesAndErrorObjects) HasRules() bool {
	if o != nil && o.Rules != nil {
		return true
	}

	return false
}

// SetRules gets a reference to the given []FirewallRule and assigns it to the Rules field.
func (o *FirewallRulesAndErrorObjects) SetRules(v []FirewallRule) {
	o.Rules = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *FirewallRulesAndErrorObjects) GetErrors() []FirewallRuleWithError {
	if o == nil || o.Errors == nil {
		var ret []FirewallRuleWithError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallRulesAndErrorObjects) GetErrorsOk() ([]FirewallRuleWithError, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *FirewallRulesAndErrorObjects) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *FirewallRulesAndErrorObjects) SetErrors(v []FirewallRuleWithError) {
	o.Errors = v
}

func (o FirewallRulesAndErrorObjects) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableFirewallRulesAndErrorObjects struct {
	value *FirewallRulesAndErrorObjects
	isSet bool
}

func (v NullableFirewallRulesAndErrorObjects) Get() *FirewallRulesAndErrorObjects {
	return v.value
}

func (v *NullableFirewallRulesAndErrorObjects) Set(val *FirewallRulesAndErrorObjects) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallRulesAndErrorObjects) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallRulesAndErrorObjects) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallRulesAndErrorObjects(val *FirewallRulesAndErrorObjects) *NullableFirewallRulesAndErrorObjects {
	return &NullableFirewallRulesAndErrorObjects{value: val, isSet: true}
}

func (v NullableFirewallRulesAndErrorObjects) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallRulesAndErrorObjects) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


