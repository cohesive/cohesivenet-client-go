/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// UpdatePeerRequest struct for UpdatePeerRequest
type UpdatePeerRequest struct {
	// IP address or host name of the one you are peering with.
	Name *string `json:"name,omitempty"`
	// link MTU between 500 and 4800
	OverlayMtu *string `json:"overlay_mtu,omitempty"`
	// Setting false will NOT finalize the peering operation.  A peer \"reconfigure\" call would then be required. Default is true 
	Force *bool `json:"force,omitempty"`
}

// NewUpdatePeerRequest instantiates a new UpdatePeerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePeerRequest() *UpdatePeerRequest {
	this := UpdatePeerRequest{}
	return &this
}

// NewUpdatePeerRequestWithDefaults instantiates a new UpdatePeerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePeerRequestWithDefaults() *UpdatePeerRequest {
	this := UpdatePeerRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdatePeerRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePeerRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdatePeerRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdatePeerRequest) SetName(v string) {
	o.Name = &v
}

// GetOverlayMtu returns the OverlayMtu field value if set, zero value otherwise.
func (o *UpdatePeerRequest) GetOverlayMtu() string {
	if o == nil || o.OverlayMtu == nil {
		var ret string
		return ret
	}
	return *o.OverlayMtu
}

// GetOverlayMtuOk returns a tuple with the OverlayMtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePeerRequest) GetOverlayMtuOk() (*string, bool) {
	if o == nil || o.OverlayMtu == nil {
		return nil, false
	}
	return o.OverlayMtu, true
}

// HasOverlayMtu returns a boolean if a field has been set.
func (o *UpdatePeerRequest) HasOverlayMtu() bool {
	if o != nil && o.OverlayMtu != nil {
		return true
	}

	return false
}

// SetOverlayMtu gets a reference to the given string and assigns it to the OverlayMtu field.
func (o *UpdatePeerRequest) SetOverlayMtu(v string) {
	o.OverlayMtu = &v
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *UpdatePeerRequest) GetForce() bool {
	if o == nil || o.Force == nil {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePeerRequest) GetForceOk() (*bool, bool) {
	if o == nil || o.Force == nil {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *UpdatePeerRequest) HasForce() bool {
	if o != nil && o.Force != nil {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *UpdatePeerRequest) SetForce(v bool) {
	o.Force = &v
}

func (o UpdatePeerRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.OverlayMtu != nil {
		toSerialize["overlay_mtu"] = o.OverlayMtu
	}
	if o.Force != nil {
		toSerialize["force"] = o.Force
	}
	return json.Marshal(toSerialize)
}

type NullableUpdatePeerRequest struct {
	value *UpdatePeerRequest
	isSet bool
}

func (v NullableUpdatePeerRequest) Get() *UpdatePeerRequest {
	return v.value
}

func (v *NullableUpdatePeerRequest) Set(val *UpdatePeerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePeerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePeerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePeerRequest(val *UpdatePeerRequest) *NullableUpdatePeerRequest {
	return &NullableUpdatePeerRequest{value: val, isSet: true}
}

func (v NullableUpdatePeerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePeerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


