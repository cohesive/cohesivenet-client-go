/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// PluginManagerPort struct for PluginManagerPort
type PluginManagerPort struct {
	Port *int32 `json:"port,omitempty"`
	Protocol *string `json:"protocol,omitempty"`
	Ui *bool `json:"ui,omitempty"`
	Ssl *bool `json:"ssl,omitempty"`
	UiPath *string `json:"ui_path,omitempty"`
}

// NewPluginManagerPort instantiates a new PluginManagerPort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginManagerPort() *PluginManagerPort {
	this := PluginManagerPort{}
	return &this
}

// NewPluginManagerPortWithDefaults instantiates a new PluginManagerPort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginManagerPortWithDefaults() *PluginManagerPort {
	this := PluginManagerPort{}
	return &this
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *PluginManagerPort) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerPort) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *PluginManagerPort) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *PluginManagerPort) SetPort(v int32) {
	o.Port = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *PluginManagerPort) GetProtocol() string {
	if o == nil || o.Protocol == nil {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerPort) GetProtocolOk() (*string, bool) {
	if o == nil || o.Protocol == nil {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *PluginManagerPort) HasProtocol() bool {
	if o != nil && o.Protocol != nil {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *PluginManagerPort) SetProtocol(v string) {
	o.Protocol = &v
}

// GetUi returns the Ui field value if set, zero value otherwise.
func (o *PluginManagerPort) GetUi() bool {
	if o == nil || o.Ui == nil {
		var ret bool
		return ret
	}
	return *o.Ui
}

// GetUiOk returns a tuple with the Ui field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerPort) GetUiOk() (*bool, bool) {
	if o == nil || o.Ui == nil {
		return nil, false
	}
	return o.Ui, true
}

// HasUi returns a boolean if a field has been set.
func (o *PluginManagerPort) HasUi() bool {
	if o != nil && o.Ui != nil {
		return true
	}

	return false
}

// SetUi gets a reference to the given bool and assigns it to the Ui field.
func (o *PluginManagerPort) SetUi(v bool) {
	o.Ui = &v
}

// GetSsl returns the Ssl field value if set, zero value otherwise.
func (o *PluginManagerPort) GetSsl() bool {
	if o == nil || o.Ssl == nil {
		var ret bool
		return ret
	}
	return *o.Ssl
}

// GetSslOk returns a tuple with the Ssl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerPort) GetSslOk() (*bool, bool) {
	if o == nil || o.Ssl == nil {
		return nil, false
	}
	return o.Ssl, true
}

// HasSsl returns a boolean if a field has been set.
func (o *PluginManagerPort) HasSsl() bool {
	if o != nil && o.Ssl != nil {
		return true
	}

	return false
}

// SetSsl gets a reference to the given bool and assigns it to the Ssl field.
func (o *PluginManagerPort) SetSsl(v bool) {
	o.Ssl = &v
}

// GetUiPath returns the UiPath field value if set, zero value otherwise.
func (o *PluginManagerPort) GetUiPath() string {
	if o == nil || o.UiPath == nil {
		var ret string
		return ret
	}
	return *o.UiPath
}

// GetUiPathOk returns a tuple with the UiPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerPort) GetUiPathOk() (*string, bool) {
	if o == nil || o.UiPath == nil {
		return nil, false
	}
	return o.UiPath, true
}

// HasUiPath returns a boolean if a field has been set.
func (o *PluginManagerPort) HasUiPath() bool {
	if o != nil && o.UiPath != nil {
		return true
	}

	return false
}

// SetUiPath gets a reference to the given string and assigns it to the UiPath field.
func (o *PluginManagerPort) SetUiPath(v string) {
	o.UiPath = &v
}

func (o PluginManagerPort) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.Protocol != nil {
		toSerialize["protocol"] = o.Protocol
	}
	if o.Ui != nil {
		toSerialize["ui"] = o.Ui
	}
	if o.Ssl != nil {
		toSerialize["ssl"] = o.Ssl
	}
	if o.UiPath != nil {
		toSerialize["ui_path"] = o.UiPath
	}
	return json.Marshal(toSerialize)
}

type NullablePluginManagerPort struct {
	value *PluginManagerPort
	isSet bool
}

func (v NullablePluginManagerPort) Get() *PluginManagerPort {
	return v.value
}

func (v *NullablePluginManagerPort) Set(val *PluginManagerPort) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginManagerPort) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginManagerPort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginManagerPort(val *PluginManagerPort) *NullablePluginManagerPort {
	return &NullablePluginManagerPort{value: val, isSet: true}
}

func (v NullablePluginManagerPort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginManagerPort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


