/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// PeersDetail struct for PeersDetail
type PeersDetail struct {
	Id *int32 `json:"id,omitempty"`
	Peered *bool `json:"peered,omitempty"`
	Managers *map[string]PeerController `json:"managers,omitempty"`
	Controllers *map[string]PeerController `json:"controllers,omitempty"`
}

// NewPeersDetail instantiates a new PeersDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeersDetail() *PeersDetail {
	this := PeersDetail{}
	return &this
}

// NewPeersDetailWithDefaults instantiates a new PeersDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeersDetailWithDefaults() *PeersDetail {
	this := PeersDetail{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PeersDetail) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeersDetail) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PeersDetail) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PeersDetail) SetId(v int32) {
	o.Id = &v
}

// GetPeered returns the Peered field value if set, zero value otherwise.
func (o *PeersDetail) GetPeered() bool {
	if o == nil || o.Peered == nil {
		var ret bool
		return ret
	}
	return *o.Peered
}

// GetPeeredOk returns a tuple with the Peered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeersDetail) GetPeeredOk() (*bool, bool) {
	if o == nil || o.Peered == nil {
		return nil, false
	}
	return o.Peered, true
}

// HasPeered returns a boolean if a field has been set.
func (o *PeersDetail) HasPeered() bool {
	if o != nil && o.Peered != nil {
		return true
	}

	return false
}

// SetPeered gets a reference to the given bool and assigns it to the Peered field.
func (o *PeersDetail) SetPeered(v bool) {
	o.Peered = &v
}

// GetManagers returns the Managers field value if set, zero value otherwise.
func (o *PeersDetail) GetManagers() map[string]PeerController {
	if o == nil || o.Managers == nil {
		var ret map[string]PeerController
		return ret
	}
	return *o.Managers
}

// GetManagersOk returns a tuple with the Managers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeersDetail) GetManagersOk() (*map[string]PeerController, bool) {
	if o == nil || o.Managers == nil {
		return nil, false
	}
	return o.Managers, true
}

// HasManagers returns a boolean if a field has been set.
func (o *PeersDetail) HasManagers() bool {
	if o != nil && o.Managers != nil {
		return true
	}

	return false
}

// SetManagers gets a reference to the given map[string]PeerController and assigns it to the Managers field.
func (o *PeersDetail) SetManagers(v map[string]PeerController) {
	o.Managers = &v
}

// GetControllers returns the Controllers field value if set, zero value otherwise.
func (o *PeersDetail) GetControllers() map[string]PeerController {
	if o == nil || o.Controllers == nil {
		var ret map[string]PeerController
		return ret
	}
	return *o.Controllers
}

// GetControllersOk returns a tuple with the Controllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeersDetail) GetControllersOk() (*map[string]PeerController, bool) {
	if o == nil || o.Controllers == nil {
		return nil, false
	}
	return o.Controllers, true
}

// HasControllers returns a boolean if a field has been set.
func (o *PeersDetail) HasControllers() bool {
	if o != nil && o.Controllers != nil {
		return true
	}

	return false
}

// SetControllers gets a reference to the given map[string]PeerController and assigns it to the Controllers field.
func (o *PeersDetail) SetControllers(v map[string]PeerController) {
	o.Controllers = &v
}

func (o PeersDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Peered != nil {
		toSerialize["peered"] = o.Peered
	}
	if o.Managers != nil {
		toSerialize["managers"] = o.Managers
	}
	if o.Controllers != nil {
		toSerialize["controllers"] = o.Controllers
	}
	return json.Marshal(toSerialize)
}

type NullablePeersDetail struct {
	value *PeersDetail
	isSet bool
}

func (v NullablePeersDetail) Get() *PeersDetail {
	return v.value
}

func (v *NullablePeersDetail) Set(val *PeersDetail) {
	v.value = val
	v.isSet = true
}

func (v NullablePeersDetail) IsSet() bool {
	return v.isSet
}

func (v *NullablePeersDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeersDetail(val *PeersDetail) *NullablePeersDetail {
	return &NullablePeersDetail{value: val, isSet: true}
}

func (v NullablePeersDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeersDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


