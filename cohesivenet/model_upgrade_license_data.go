/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// UpgradeLicenseData struct for UpgradeLicenseData
type UpgradeLicenseData struct {
	Finalized *bool `json:"finalized,omitempty"`
	// new sha1 hash of license
	Uniq *string `json:"uniq,omitempty"`
	// State of license, accepted, in-progress, failed
	License *string `json:"license,omitempty"`
	NewClientpacks *int32 `json:"new_clientpacks,omitempty"`
	NewManagers *int32 `json:"new_managers,omitempty"`
}

// NewUpgradeLicenseData instantiates a new UpgradeLicenseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeLicenseData() *UpgradeLicenseData {
	this := UpgradeLicenseData{}
	return &this
}

// NewUpgradeLicenseDataWithDefaults instantiates a new UpgradeLicenseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeLicenseDataWithDefaults() *UpgradeLicenseData {
	this := UpgradeLicenseData{}
	return &this
}

// GetFinalized returns the Finalized field value if set, zero value otherwise.
func (o *UpgradeLicenseData) GetFinalized() bool {
	if o == nil || o.Finalized == nil {
		var ret bool
		return ret
	}
	return *o.Finalized
}

// GetFinalizedOk returns a tuple with the Finalized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeLicenseData) GetFinalizedOk() (*bool, bool) {
	if o == nil || o.Finalized == nil {
		return nil, false
	}
	return o.Finalized, true
}

// HasFinalized returns a boolean if a field has been set.
func (o *UpgradeLicenseData) HasFinalized() bool {
	if o != nil && o.Finalized != nil {
		return true
	}

	return false
}

// SetFinalized gets a reference to the given bool and assigns it to the Finalized field.
func (o *UpgradeLicenseData) SetFinalized(v bool) {
	o.Finalized = &v
}

// GetUniq returns the Uniq field value if set, zero value otherwise.
func (o *UpgradeLicenseData) GetUniq() string {
	if o == nil || o.Uniq == nil {
		var ret string
		return ret
	}
	return *o.Uniq
}

// GetUniqOk returns a tuple with the Uniq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeLicenseData) GetUniqOk() (*string, bool) {
	if o == nil || o.Uniq == nil {
		return nil, false
	}
	return o.Uniq, true
}

// HasUniq returns a boolean if a field has been set.
func (o *UpgradeLicenseData) HasUniq() bool {
	if o != nil && o.Uniq != nil {
		return true
	}

	return false
}

// SetUniq gets a reference to the given string and assigns it to the Uniq field.
func (o *UpgradeLicenseData) SetUniq(v string) {
	o.Uniq = &v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *UpgradeLicenseData) GetLicense() string {
	if o == nil || o.License == nil {
		var ret string
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeLicenseData) GetLicenseOk() (*string, bool) {
	if o == nil || o.License == nil {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *UpgradeLicenseData) HasLicense() bool {
	if o != nil && o.License != nil {
		return true
	}

	return false
}

// SetLicense gets a reference to the given string and assigns it to the License field.
func (o *UpgradeLicenseData) SetLicense(v string) {
	o.License = &v
}

// GetNewClientpacks returns the NewClientpacks field value if set, zero value otherwise.
func (o *UpgradeLicenseData) GetNewClientpacks() int32 {
	if o == nil || o.NewClientpacks == nil {
		var ret int32
		return ret
	}
	return *o.NewClientpacks
}

// GetNewClientpacksOk returns a tuple with the NewClientpacks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeLicenseData) GetNewClientpacksOk() (*int32, bool) {
	if o == nil || o.NewClientpacks == nil {
		return nil, false
	}
	return o.NewClientpacks, true
}

// HasNewClientpacks returns a boolean if a field has been set.
func (o *UpgradeLicenseData) HasNewClientpacks() bool {
	if o != nil && o.NewClientpacks != nil {
		return true
	}

	return false
}

// SetNewClientpacks gets a reference to the given int32 and assigns it to the NewClientpacks field.
func (o *UpgradeLicenseData) SetNewClientpacks(v int32) {
	o.NewClientpacks = &v
}

// GetNewManagers returns the NewManagers field value if set, zero value otherwise.
func (o *UpgradeLicenseData) GetNewManagers() int32 {
	if o == nil || o.NewManagers == nil {
		var ret int32
		return ret
	}
	return *o.NewManagers
}

// GetNewManagersOk returns a tuple with the NewManagers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeLicenseData) GetNewManagersOk() (*int32, bool) {
	if o == nil || o.NewManagers == nil {
		return nil, false
	}
	return o.NewManagers, true
}

// HasNewManagers returns a boolean if a field has been set.
func (o *UpgradeLicenseData) HasNewManagers() bool {
	if o != nil && o.NewManagers != nil {
		return true
	}

	return false
}

// SetNewManagers gets a reference to the given int32 and assigns it to the NewManagers field.
func (o *UpgradeLicenseData) SetNewManagers(v int32) {
	o.NewManagers = &v
}

func (o UpgradeLicenseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Finalized != nil {
		toSerialize["finalized"] = o.Finalized
	}
	if o.Uniq != nil {
		toSerialize["uniq"] = o.Uniq
	}
	if o.License != nil {
		toSerialize["license"] = o.License
	}
	if o.NewClientpacks != nil {
		toSerialize["new_clientpacks"] = o.NewClientpacks
	}
	if o.NewManagers != nil {
		toSerialize["new_managers"] = o.NewManagers
	}
	return json.Marshal(toSerialize)
}

type NullableUpgradeLicenseData struct {
	value *UpgradeLicenseData
	isSet bool
}

func (v NullableUpgradeLicenseData) Get() *UpgradeLicenseData {
	return v.value
}

func (v *NullableUpgradeLicenseData) Set(val *UpgradeLicenseData) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeLicenseData) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeLicenseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeLicenseData(val *UpgradeLicenseData) *NullableUpgradeLicenseData {
	return &NullableUpgradeLicenseData{value: val, isSet: true}
}

func (v NullableUpgradeLicenseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeLicenseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


