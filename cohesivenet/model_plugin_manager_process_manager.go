/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// PluginManagerProcessManager struct for PluginManagerProcessManager
type PluginManagerProcessManager struct {
	// name of process manager such as supervisor. Currently  we support commands for supervisor and service. 
	Name *string `json:"name,omitempty"`
	// Name of programs, services or units managed
	Subprocesses []string `json:"subprocesses,omitempty"`
}

// NewPluginManagerProcessManager instantiates a new PluginManagerProcessManager object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginManagerProcessManager() *PluginManagerProcessManager {
	this := PluginManagerProcessManager{}
	return &this
}

// NewPluginManagerProcessManagerWithDefaults instantiates a new PluginManagerProcessManager object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginManagerProcessManagerWithDefaults() *PluginManagerProcessManager {
	this := PluginManagerProcessManager{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PluginManagerProcessManager) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerProcessManager) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PluginManagerProcessManager) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PluginManagerProcessManager) SetName(v string) {
	o.Name = &v
}

// GetSubprocesses returns the Subprocesses field value if set, zero value otherwise.
func (o *PluginManagerProcessManager) GetSubprocesses() []string {
	if o == nil || o.Subprocesses == nil {
		var ret []string
		return ret
	}
	return o.Subprocesses
}

// GetSubprocessesOk returns a tuple with the Subprocesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerProcessManager) GetSubprocessesOk() ([]string, bool) {
	if o == nil || o.Subprocesses == nil {
		return nil, false
	}
	return o.Subprocesses, true
}

// HasSubprocesses returns a boolean if a field has been set.
func (o *PluginManagerProcessManager) HasSubprocesses() bool {
	if o != nil && o.Subprocesses != nil {
		return true
	}

	return false
}

// SetSubprocesses gets a reference to the given []string and assigns it to the Subprocesses field.
func (o *PluginManagerProcessManager) SetSubprocesses(v []string) {
	o.Subprocesses = v
}

func (o PluginManagerProcessManager) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Subprocesses != nil {
		toSerialize["subprocesses"] = o.Subprocesses
	}
	return json.Marshal(toSerialize)
}

type NullablePluginManagerProcessManager struct {
	value *PluginManagerProcessManager
	isSet bool
}

func (v NullablePluginManagerProcessManager) Get() *PluginManagerProcessManager {
	return v.value
}

func (v *NullablePluginManagerProcessManager) Set(val *PluginManagerProcessManager) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginManagerProcessManager) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginManagerProcessManager) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginManagerProcessManager(val *PluginManagerProcessManager) *NullablePluginManagerProcessManager {
	return &NullablePluginManagerProcessManager{value: val, isSet: true}
}

func (v NullablePluginManagerProcessManager) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginManagerProcessManager) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


