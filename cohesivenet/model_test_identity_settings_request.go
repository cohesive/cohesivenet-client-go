/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
	"fmt"
)

// TestIdentitySettingsRequest - struct for TestIdentitySettingsRequest
type TestIdentitySettingsRequest struct {
	TestLdapSettingsRequest *TestLdapSettingsRequest
	// TestOIDCSettingsRequest *TestOIDCSettingsRequest not supported
	// TestRadiusSettingsRequest *TestRadiusSettingsRequest not supported
}

// TestLdapSettingsRequestAsTestIdentitySettingsRequest is a convenience function that returns TestLdapSettingsRequest wrapped in TestIdentitySettingsRequest
func TestLdapSettingsRequestAsTestIdentitySettingsRequest(v *TestLdapSettingsRequest) TestIdentitySettingsRequest {
	return TestIdentitySettingsRequest{
		TestLdapSettingsRequest: v,
	}
}

// // TestOIDCSettingsRequestAsTestIdentitySettingsRequest is a convenience function that returns TestOIDCSettingsRequest wrapped in TestIdentitySettingsRequest
// func TestOIDCSettingsRequestAsTestIdentitySettingsRequest(v *TestOIDCSettingsRequest) TestIdentitySettingsRequest {
// 	return TestIdentitySettingsRequest{
// 		TestOIDCSettingsRequest: v,
// 	}
// }

// // TestRadiusSettingsRequestAsTestIdentitySettingsRequest is a convenience function that returns TestRadiusSettingsRequest wrapped in TestIdentitySettingsRequest
// func TestRadiusSettingsRequestAsTestIdentitySettingsRequest(v *TestRadiusSettingsRequest) TestIdentitySettingsRequest {
// 	return TestIdentitySettingsRequest{
// 		TestRadiusSettingsRequest: v,
// 	}
// }


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TestIdentitySettingsRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TestLdapSettingsRequest
	err = newStrictDecoder(data).Decode(&dst.TestLdapSettingsRequest)
	if err == nil {
		jsonTestLdapSettingsRequest, _ := json.Marshal(dst.TestLdapSettingsRequest)
		if string(jsonTestLdapSettingsRequest) == "{}" { // empty struct
			dst.TestLdapSettingsRequest = nil
		} else {
			match++
		}
	} else {
		dst.TestLdapSettingsRequest = nil
	}

	// try to unmarshal data into TestOIDCSettingsRequest
	// err = newStrictDecoder(data).Decode(&dst.TestOIDCSettingsRequest)
	// if err == nil {
	// 	jsonTestOIDCSettingsRequest, _ := json.Marshal(dst.TestOIDCSettingsRequest)
	// 	if string(jsonTestOIDCSettingsRequest) == "{}" { // empty struct
	// 		dst.TestOIDCSettingsRequest = nil
	// 	} else {
	// 		match++
	// 	}
	// } else {
	// 	dst.TestOIDCSettingsRequest = nil
	// }

	// try to unmarshal data into TestRadiusSettingsRequest
	// err = newStrictDecoder(data).Decode(&dst.TestRadiusSettingsRequest)
	// if err == nil {
	// 	jsonTestRadiusSettingsRequest, _ := json.Marshal(dst.TestRadiusSettingsRequest)
	// 	if string(jsonTestRadiusSettingsRequest) == "{}" { // empty struct
	// 		dst.TestRadiusSettingsRequest = nil
	// 	} else {
	// 		match++
	// 	}
	// } else {
	// 	dst.TestRadiusSettingsRequest = nil
	// }

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TestLdapSettingsRequest = nil
		// dst.TestOIDCSettingsRequest = nil
		// dst.TestRadiusSettingsRequest = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(TestIdentitySettingsRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(TestIdentitySettingsRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TestIdentitySettingsRequest) MarshalJSON() ([]byte, error) {
	if src.TestLdapSettingsRequest != nil {
		return json.Marshal(&src.TestLdapSettingsRequest)
	}

	// if src.TestOIDCSettingsRequest != nil {
	// 	return json.Marshal(&src.TestOIDCSettingsRequest)
	// }

	// if src.TestRadiusSettingsRequest != nil {
	// 	return json.Marshal(&src.TestRadiusSettingsRequest)
	// }

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TestIdentitySettingsRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TestLdapSettingsRequest != nil {
		return obj.TestLdapSettingsRequest
	}

	// if obj.TestOIDCSettingsRequest != nil {
	// 	return obj.TestOIDCSettingsRequest
	// }

	// if obj.TestRadiusSettingsRequest != nil {
	// 	return obj.TestRadiusSettingsRequest
	// }

	// all schemas are nil
	return nil
}

type NullableTestIdentitySettingsRequest struct {
	value *TestIdentitySettingsRequest
	isSet bool
}

func (v NullableTestIdentitySettingsRequest) Get() *TestIdentitySettingsRequest {
	return v.value
}

func (v *NullableTestIdentitySettingsRequest) Set(val *TestIdentitySettingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTestIdentitySettingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTestIdentitySettingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestIdentitySettingsRequest(val *TestIdentitySettingsRequest) *NullableTestIdentitySettingsRequest {
	return &NullableTestIdentitySettingsRequest{value: val, isSet: true}
}

func (v NullableTestIdentitySettingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestIdentitySettingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


