/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// SimpleOutput struct for SimpleOutput
type SimpleOutput struct {
	Success *bool `json:"success,omitempty"`
	Output *string `json:"output,omitempty"`
}

// NewSimpleOutput instantiates a new SimpleOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleOutput() *SimpleOutput {
	this := SimpleOutput{}
	return &this
}

// NewSimpleOutputWithDefaults instantiates a new SimpleOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleOutputWithDefaults() *SimpleOutput {
	this := SimpleOutput{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *SimpleOutput) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleOutput) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *SimpleOutput) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *SimpleOutput) SetSuccess(v bool) {
	o.Success = &v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *SimpleOutput) GetOutput() string {
	if o == nil || o.Output == nil {
		var ret string
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleOutput) GetOutputOk() (*string, bool) {
	if o == nil || o.Output == nil {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *SimpleOutput) HasOutput() bool {
	if o != nil && o.Output != nil {
		return true
	}

	return false
}

// SetOutput gets a reference to the given string and assigns it to the Output field.
func (o *SimpleOutput) SetOutput(v string) {
	o.Output = &v
}

func (o SimpleOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.Output != nil {
		toSerialize["output"] = o.Output
	}
	return json.Marshal(toSerialize)
}

type NullableSimpleOutput struct {
	value *SimpleOutput
	isSet bool
}

func (v NullableSimpleOutput) Get() *SimpleOutput {
	return v.value
}

func (v *NullableSimpleOutput) Set(val *SimpleOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleOutput(val *SimpleOutput) *NullableSimpleOutput {
	return &NullableSimpleOutput{value: val, isSet: true}
}

func (v NullableSimpleOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


