/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// SnapshotsList struct for SnapshotsList
type SnapshotsList struct {
	// Name of the latest snapshot taken
	LatestSnapshot *string `json:"latest_snapshot,omitempty"`
	Snapshots *map[string]Snapshot `json:"snapshots,omitempty"`
}

// NewSnapshotsList instantiates a new SnapshotsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotsList() *SnapshotsList {
	this := SnapshotsList{}
	return &this
}

// NewSnapshotsListWithDefaults instantiates a new SnapshotsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotsListWithDefaults() *SnapshotsList {
	this := SnapshotsList{}
	return &this
}

// GetLatestSnapshot returns the LatestSnapshot field value if set, zero value otherwise.
func (o *SnapshotsList) GetLatestSnapshot() string {
	if o == nil || o.LatestSnapshot == nil {
		var ret string
		return ret
	}
	return *o.LatestSnapshot
}

// GetLatestSnapshotOk returns a tuple with the LatestSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotsList) GetLatestSnapshotOk() (*string, bool) {
	if o == nil || o.LatestSnapshot == nil {
		return nil, false
	}
	return o.LatestSnapshot, true
}

// HasLatestSnapshot returns a boolean if a field has been set.
func (o *SnapshotsList) HasLatestSnapshot() bool {
	if o != nil && o.LatestSnapshot != nil {
		return true
	}

	return false
}

// SetLatestSnapshot gets a reference to the given string and assigns it to the LatestSnapshot field.
func (o *SnapshotsList) SetLatestSnapshot(v string) {
	o.LatestSnapshot = &v
}

// GetSnapshots returns the Snapshots field value if set, zero value otherwise.
func (o *SnapshotsList) GetSnapshots() map[string]Snapshot {
	if o == nil || o.Snapshots == nil {
		var ret map[string]Snapshot
		return ret
	}
	return *o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotsList) GetSnapshotsOk() (*map[string]Snapshot, bool) {
	if o == nil || o.Snapshots == nil {
		return nil, false
	}
	return o.Snapshots, true
}

// HasSnapshots returns a boolean if a field has been set.
func (o *SnapshotsList) HasSnapshots() bool {
	if o != nil && o.Snapshots != nil {
		return true
	}

	return false
}

// SetSnapshots gets a reference to the given map[string]Snapshot and assigns it to the Snapshots field.
func (o *SnapshotsList) SetSnapshots(v map[string]Snapshot) {
	o.Snapshots = &v
}

func (o SnapshotsList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LatestSnapshot != nil {
		toSerialize["latest_snapshot"] = o.LatestSnapshot
	}
	if o.Snapshots != nil {
		toSerialize["snapshots"] = o.Snapshots
	}
	return json.Marshal(toSerialize)
}

type NullableSnapshotsList struct {
	value *SnapshotsList
	isSet bool
}

func (v NullableSnapshotsList) Get() *SnapshotsList {
	return v.value
}

func (v *NullableSnapshotsList) Set(val *SnapshotsList) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotsList) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotsList(val *SnapshotsList) *NullableSnapshotsList {
	return &NullableSnapshotsList{value: val, isSet: true}
}

func (v NullableSnapshotsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


