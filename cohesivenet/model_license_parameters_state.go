/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// LicenseParametersState struct for LicenseParametersState
type LicenseParametersState struct {
	License *string `json:"license,omitempty"`
	Finalized *bool `json:"finalized,omitempty"`
	Parameters *LicenseParameters `json:"parameters,omitempty"`
}

// NewLicenseParametersState instantiates a new LicenseParametersState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseParametersState() *LicenseParametersState {
	this := LicenseParametersState{}
	return &this
}

// NewLicenseParametersStateWithDefaults instantiates a new LicenseParametersState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseParametersStateWithDefaults() *LicenseParametersState {
	this := LicenseParametersState{}
	return &this
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *LicenseParametersState) GetLicense() string {
	if o == nil || o.License == nil {
		var ret string
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseParametersState) GetLicenseOk() (*string, bool) {
	if o == nil || o.License == nil {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *LicenseParametersState) HasLicense() bool {
	if o != nil && o.License != nil {
		return true
	}

	return false
}

// SetLicense gets a reference to the given string and assigns it to the License field.
func (o *LicenseParametersState) SetLicense(v string) {
	o.License = &v
}

// GetFinalized returns the Finalized field value if set, zero value otherwise.
func (o *LicenseParametersState) GetFinalized() bool {
	if o == nil || o.Finalized == nil {
		var ret bool
		return ret
	}
	return *o.Finalized
}

// GetFinalizedOk returns a tuple with the Finalized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseParametersState) GetFinalizedOk() (*bool, bool) {
	if o == nil || o.Finalized == nil {
		return nil, false
	}
	return o.Finalized, true
}

// HasFinalized returns a boolean if a field has been set.
func (o *LicenseParametersState) HasFinalized() bool {
	if o != nil && o.Finalized != nil {
		return true
	}

	return false
}

// SetFinalized gets a reference to the given bool and assigns it to the Finalized field.
func (o *LicenseParametersState) SetFinalized(v bool) {
	o.Finalized = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *LicenseParametersState) GetParameters() LicenseParameters {
	if o == nil || o.Parameters == nil {
		var ret LicenseParameters
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseParametersState) GetParametersOk() (*LicenseParameters, bool) {
	if o == nil || o.Parameters == nil {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *LicenseParametersState) HasParameters() bool {
	if o != nil && o.Parameters != nil {
		return true
	}

	return false
}

// SetParameters gets a reference to the given LicenseParameters and assigns it to the Parameters field.
func (o *LicenseParametersState) SetParameters(v LicenseParameters) {
	o.Parameters = &v
}

func (o LicenseParametersState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.License != nil {
		toSerialize["license"] = o.License
	}
	if o.Finalized != nil {
		toSerialize["finalized"] = o.Finalized
	}
	if o.Parameters != nil {
		toSerialize["parameters"] = o.Parameters
	}
	return json.Marshal(toSerialize)
}

type NullableLicenseParametersState struct {
	value *LicenseParametersState
	isSet bool
}

func (v NullableLicenseParametersState) Get() *LicenseParametersState {
	return v.value
}

func (v *NullableLicenseParametersState) Set(val *LicenseParametersState) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseParametersState) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseParametersState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseParametersState(val *LicenseParametersState) *NullableLicenseParametersState {
	return &NullableLicenseParametersState{value: val, isSet: true}
}

func (v NullableLicenseParametersState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseParametersState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


