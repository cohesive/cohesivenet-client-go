/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
	"time"
	"strings"
	"fmt"
)

type LinkTimestamp struct {
    time.Time
}

const ctLayout = "2006-01-02 15:04:05"
var nilTime = (time.Time{}).UnixNano()

func (ct *LinkTimestamp) UnmarshalJSON(b []byte) (err error) {
    s := strings.Trim(string(b), "\"")
    if s == "null" {
       ct.Time = time.Time{}
       return
    }
    ct.Time, err = time.Parse(ctLayout, s)
    return
}

func (ct *LinkTimestamp) MarshalJSON() ([]byte, error) {
  if ct.Time.UnixNano() == nilTime {
    return []byte("null"), nil
  }
  return []byte(fmt.Sprintf("\"%s\"", ct.Time.Format(ctLayout))), nil
}


func (ct *LinkTimestamp) IsSet() bool {
    return ct.UnixNano() != nilTime
}

// Link struct for Link
type Link struct {
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Interface *string `json:"interface,omitempty"`
	ClientpackIp *string `json:"clientpack_ip,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Connected *bool `json:"connected,omitempty"`
	// openvpn or wireguard
	Type *string `json:"type,omitempty"`
	Tags []KeyValuePair `json:"tags,omitempty"`
	LastConnect *LinkTimestamp `json:"last_connect,omitempty"`
	LastDisconnect *LinkTimestamp `json:"last_disconnect,omitempty"`
	// Time of last WG handshake
	LastHandshake *LinkTimestamp `json:"last_handshake,omitempty"`
	// Timeout for WG connection in seconds
	HandshakeTimeout *int32 `json:"handshake_timeout,omitempty"`
	// Alias for endpoints
	Remotes []string `json:"remotes,omitempty"`
	// List of remotes to connect to by IP or dns
	Endpoints []string `json:"endpoints,omitempty"`
	// Clientpack name
	Clientpack *string `json:"clientpack,omitempty"`
	// Policy insertions for this clientpack
	Policies []string `json:"policies,omitempty"`
	// Readable state of Link - connecting, connected, disconnected
	State *string `json:"state,omitempty"`
	Device *string `json:"device,omitempty"`
	TunMtu *int32 `json:"tun_mtu,omitempty"`
	LinkMtu *int32 `json:"link_mtu,omitempty"`
	LocalIp *string `json:"local_ip,omitempty"`
}

// NewLink instantiates a new Link object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLink() *Link {
	this := Link{}
	return &this
}

// NewLinkWithDefaults instantiates a new Link object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkWithDefaults() *Link {
	this := Link{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Link) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Link) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Link) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Link) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Link) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Link) SetDescription(v string) {
	o.Description = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *Link) GetInterface() string {
	if o == nil || o.Interface == nil {
		var ret string
		return ret
	}
	return *o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetInterfaceOk() (*string, bool) {
	if o == nil || o.Interface == nil {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *Link) HasInterface() bool {
	if o != nil && o.Interface != nil {
		return true
	}

	return false
}

// SetInterface gets a reference to the given string and assigns it to the Interface field.
func (o *Link) SetInterface(v string) {
	o.Interface = &v
}

// GetClientpackIp returns the ClientpackIp field value if set, zero value otherwise.
func (o *Link) GetClientpackIp() string {
	if o == nil || o.ClientpackIp == nil {
		var ret string
		return ret
	}
	return *o.ClientpackIp
}

// GetClientpackIpOk returns a tuple with the ClientpackIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetClientpackIpOk() (*string, bool) {
	if o == nil || o.ClientpackIp == nil {
		return nil, false
	}
	return o.ClientpackIp, true
}

// HasClientpackIp returns a boolean if a field has been set.
func (o *Link) HasClientpackIp() bool {
	if o != nil && o.ClientpackIp != nil {
		return true
	}

	return false
}

// SetClientpackIp gets a reference to the given string and assigns it to the ClientpackIp field.
func (o *Link) SetClientpackIp(v string) {
	o.ClientpackIp = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Link) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Link) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Link) SetId(v int32) {
	o.Id = &v
}

// GetConnected returns the Connected field value if set, zero value otherwise.
func (o *Link) GetConnected() bool {
	if o == nil || o.Connected == nil {
		var ret bool
		return ret
	}
	return *o.Connected
}

// GetConnectedOk returns a tuple with the Connected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetConnectedOk() (*bool, bool) {
	if o == nil || o.Connected == nil {
		return nil, false
	}
	return o.Connected, true
}

// HasConnected returns a boolean if a field has been set.
func (o *Link) HasConnected() bool {
	if o != nil && o.Connected != nil {
		return true
	}

	return false
}

// SetConnected gets a reference to the given bool and assigns it to the Connected field.
func (o *Link) SetConnected(v bool) {
	o.Connected = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Link) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Link) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Link) SetType(v string) {
	o.Type = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Link) GetTags() []KeyValuePair {
	if o == nil || o.Tags == nil {
		var ret []KeyValuePair
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetTagsOk() ([]KeyValuePair, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Link) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []KeyValuePair and assigns it to the Tags field.
func (o *Link) SetTags(v []KeyValuePair) {
	o.Tags = v
}

// GetLastConnect returns the LastConnect field value if set, zero value otherwise.
func (o *Link) GetLastConnect() LinkTimestamp {
	if o == nil || o.LastConnect == nil {
		var ret LinkTimestamp
		return ret
	}
	return *o.LastConnect
}

// GetLastConnectOk returns a tuple with the LastConnect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetLastConnectOk() (*LinkTimestamp, bool) {
	if o == nil || o.LastConnect == nil {
		return nil, false
	}
	return o.LastConnect, true
}

// HasLastConnect returns a boolean if a field has been set.
func (o *Link) HasLastConnect() bool {
	if o != nil && o.LastConnect != nil {
		return true
	}

	return false
}

// SetLastConnect gets a reference to the given LinkTimestamp and assigns it to the LastConnect field.
func (o *Link) SetLastConnect(v LinkTimestamp) {
	o.LastConnect = &v
}

// GetLastDisconnect returns the LastDisconnect field value if set, zero value otherwise.
func (o *Link) GetLastDisconnect() LinkTimestamp {
	if o == nil || o.LastDisconnect == nil {
		var ret LinkTimestamp
		return ret
	}
	return *o.LastDisconnect
}

// GetLastDisconnectOk returns a tuple with the LastDisconnect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetLastDisconnectOk() (*LinkTimestamp, bool) {
	if o == nil || o.LastDisconnect == nil {
		return nil, false
	}
	return o.LastDisconnect, true
}

// HasLastDisconnect returns a boolean if a field has been set.
func (o *Link) HasLastDisconnect() bool {
	if o != nil && o.LastDisconnect != nil {
		return true
	}

	return false
}

// SetLastDisconnect gets a reference to the given LinkTimestamp and assigns it to the LastDisconnect field.
func (o *Link) SetLastDisconnect(v LinkTimestamp) {
	o.LastDisconnect = &v
}

// GetLastHandshake returns the LastHandshake field value if set, zero value otherwise.
func (o *Link) GetLastHandshake() LinkTimestamp {
	if o == nil || o.LastHandshake == nil {
		var ret LinkTimestamp
		return ret
	}
	return *o.LastHandshake
}

// GetLastHandshakeOk returns a tuple with the LastHandshake field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetLastHandshakeOk() (*LinkTimestamp, bool) {
	if o == nil || o.LastHandshake == nil {
		return nil, false
	}
	return o.LastHandshake, true
}

// HasLastHandshake returns a boolean if a field has been set.
func (o *Link) HasLastHandshake() bool {
	if o != nil && o.LastHandshake != nil {
		return true
	}

	return false
}

// SetLastHandshake gets a reference to the given LinkTimestamp and assigns it to the LastHandshake field.
func (o *Link) SetLastHandshake(v LinkTimestamp) {
	o.LastHandshake = &v
}

// GetHandshakeTimeout returns the HandshakeTimeout field value if set, zero value otherwise.
func (o *Link) GetHandshakeTimeout() int32 {
	if o == nil || o.HandshakeTimeout == nil {
		var ret int32
		return ret
	}
	return *o.HandshakeTimeout
}

// GetHandshakeTimeoutOk returns a tuple with the HandshakeTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetHandshakeTimeoutOk() (*int32, bool) {
	if o == nil || o.HandshakeTimeout == nil {
		return nil, false
	}
	return o.HandshakeTimeout, true
}

// HasHandshakeTimeout returns a boolean if a field has been set.
func (o *Link) HasHandshakeTimeout() bool {
	if o != nil && o.HandshakeTimeout != nil {
		return true
	}

	return false
}

// SetHandshakeTimeout gets a reference to the given int32 and assigns it to the HandshakeTimeout field.
func (o *Link) SetHandshakeTimeout(v int32) {
	o.HandshakeTimeout = &v
}

// GetRemotes returns the Remotes field value if set, zero value otherwise.
func (o *Link) GetRemotes() []string {
	if o == nil || o.Remotes == nil {
		var ret []string
		return ret
	}
	return o.Remotes
}

// GetRemotesOk returns a tuple with the Remotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetRemotesOk() ([]string, bool) {
	if o == nil || o.Remotes == nil {
		return nil, false
	}
	return o.Remotes, true
}

// HasRemotes returns a boolean if a field has been set.
func (o *Link) HasRemotes() bool {
	if o != nil && o.Remotes != nil {
		return true
	}

	return false
}

// SetRemotes gets a reference to the given []string and assigns it to the Remotes field.
func (o *Link) SetRemotes(v []string) {
	o.Remotes = v
}

// GetEndpoints returns the Endpoints field value if set, zero value otherwise.
func (o *Link) GetEndpoints() []string {
	if o == nil || o.Endpoints == nil {
		var ret []string
		return ret
	}
	return o.Endpoints
}

// GetEndpointsOk returns a tuple with the Endpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetEndpointsOk() ([]string, bool) {
	if o == nil || o.Endpoints == nil {
		return nil, false
	}
	return o.Endpoints, true
}

// HasEndpoints returns a boolean if a field has been set.
func (o *Link) HasEndpoints() bool {
	if o != nil && o.Endpoints != nil {
		return true
	}

	return false
}

// SetEndpoints gets a reference to the given []string and assigns it to the Endpoints field.
func (o *Link) SetEndpoints(v []string) {
	o.Endpoints = v
}

// GetClientpack returns the Clientpack field value if set, zero value otherwise.
func (o *Link) GetClientpack() string {
	if o == nil || o.Clientpack == nil {
		var ret string
		return ret
	}
	return *o.Clientpack
}

// GetClientpackOk returns a tuple with the Clientpack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetClientpackOk() (*string, bool) {
	if o == nil || o.Clientpack == nil {
		return nil, false
	}
	return o.Clientpack, true
}

// HasClientpack returns a boolean if a field has been set.
func (o *Link) HasClientpack() bool {
	if o != nil && o.Clientpack != nil {
		return true
	}

	return false
}

// SetClientpack gets a reference to the given string and assigns it to the Clientpack field.
func (o *Link) SetClientpack(v string) {
	o.Clientpack = &v
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
func (o *Link) GetPolicies() []string {
	if o == nil || o.Policies == nil {
		var ret []string
		return ret
	}
	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetPoliciesOk() ([]string, bool) {
	if o == nil || o.Policies == nil {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *Link) HasPolicies() bool {
	if o != nil && o.Policies != nil {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given string and assigns it to the Policies field.
func (o *Link) SetPolicies(v []string) {
	o.Policies = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Link) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Link) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Link) SetState(v string) {
	o.State = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *Link) GetDevice() string {
	if o == nil || o.Device == nil {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetDeviceOk() (*string, bool) {
	if o == nil || o.Device == nil {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *Link) HasDevice() bool {
	if o != nil && o.Device != nil {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *Link) SetDevice(v string) {
	o.Device = &v
}

// GetTunMtu returns the TunMtu field value if set, zero value otherwise.
func (o *Link) GetTunMtu() int32 {
	if o == nil || o.TunMtu == nil {
		var ret int32
		return ret
	}
	return *o.TunMtu
}

// GetTunMtuOk returns a tuple with the TunMtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetTunMtuOk() (*int32, bool) {
	if o == nil || o.TunMtu == nil {
		return nil, false
	}
	return o.TunMtu, true
}

// HasTunMtu returns a boolean if a field has been set.
func (o *Link) HasTunMtu() bool {
	if o != nil && o.TunMtu != nil {
		return true
	}

	return false
}

// SetTunMtu gets a reference to the given int32 and assigns it to the TunMtu field.
func (o *Link) SetTunMtu(v int32) {
	o.TunMtu = &v
}

// GetLinkMtu returns the LinkMtu field value if set, zero value otherwise.
func (o *Link) GetLinkMtu() int32 {
	if o == nil || o.LinkMtu == nil {
		var ret int32
		return ret
	}
	return *o.LinkMtu
}

// GetLinkMtuOk returns a tuple with the LinkMtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetLinkMtuOk() (*int32, bool) {
	if o == nil || o.LinkMtu == nil {
		return nil, false
	}
	return o.LinkMtu, true
}

// HasLinkMtu returns a boolean if a field has been set.
func (o *Link) HasLinkMtu() bool {
	if o != nil && o.LinkMtu != nil {
		return true
	}

	return false
}

// SetLinkMtu gets a reference to the given int32 and assigns it to the LinkMtu field.
func (o *Link) SetLinkMtu(v int32) {
	o.LinkMtu = &v
}

// GetLocalIp returns the LocalIp field value if set, zero value otherwise.
func (o *Link) GetLocalIp() string {
	if o == nil || o.LocalIp == nil {
		var ret string
		return ret
	}
	return *o.LocalIp
}

// GetLocalIpOk returns a tuple with the LocalIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Link) GetLocalIpOk() (*string, bool) {
	if o == nil || o.LocalIp == nil {
		return nil, false
	}
	return o.LocalIp, true
}

// HasLocalIp returns a boolean if a field has been set.
func (o *Link) HasLocalIp() bool {
	if o != nil && o.LocalIp != nil {
		return true
	}

	return false
}

// SetLocalIp gets a reference to the given string and assigns it to the LocalIp field.
func (o *Link) SetLocalIp(v string) {
	o.LocalIp = &v
}

func (o Link) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Interface != nil {
		toSerialize["interface"] = o.Interface
	}
	if o.ClientpackIp != nil {
		toSerialize["clientpack_ip"] = o.ClientpackIp
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Connected != nil {
		toSerialize["connected"] = o.Connected
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.LastConnect != nil {
		toSerialize["last_connect"] = o.LastConnect
	}
	if o.LastDisconnect != nil {
		toSerialize["last_disconnect"] = o.LastDisconnect
	}
	if o.LastHandshake != nil {
		toSerialize["last_handshake"] = o.LastHandshake
	}
	if o.HandshakeTimeout != nil {
		toSerialize["handshake_timeout"] = o.HandshakeTimeout
	}
	if o.Remotes != nil {
		toSerialize["remotes"] = o.Remotes
	}
	if o.Endpoints != nil {
		toSerialize["endpoints"] = o.Endpoints
	}
	if o.Clientpack != nil {
		toSerialize["clientpack"] = o.Clientpack
	}
	if o.Policies != nil {
		toSerialize["policies"] = o.Policies
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Device != nil {
		toSerialize["device"] = o.Device
	}
	if o.TunMtu != nil {
		toSerialize["tun_mtu"] = o.TunMtu
	}
	if o.LinkMtu != nil {
		toSerialize["link_mtu"] = o.LinkMtu
	}
	if o.LocalIp != nil {
		toSerialize["local_ip"] = o.LocalIp
	}
	return json.Marshal(toSerialize)
}

type NullableLink struct {
	value *Link
	isSet bool
}

func (v NullableLink) Get() *Link {
	return v.value
}

func (v *NullableLink) Set(val *Link) {
	v.value = val
	v.isSet = true
}

func (v NullableLink) IsSet() bool {
	return v.isSet
}

func (v *NullableLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLink(val *Link) *NullableLink {
	return &NullableLink{value: val, isSet: true}
}

func (v NullableLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


