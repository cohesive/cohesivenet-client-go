/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// PluginManagerConfigFileVersion struct for PluginManagerConfigFileVersion
type PluginManagerConfigFileVersion struct {
	Version *int32 `json:"version,omitempty"`
	Path *string `json:"path,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
}

// NewPluginManagerConfigFileVersion instantiates a new PluginManagerConfigFileVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginManagerConfigFileVersion() *PluginManagerConfigFileVersion {
	this := PluginManagerConfigFileVersion{}
	return &this
}

// NewPluginManagerConfigFileVersionWithDefaults instantiates a new PluginManagerConfigFileVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginManagerConfigFileVersionWithDefaults() *PluginManagerConfigFileVersion {
	this := PluginManagerConfigFileVersion{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *PluginManagerConfigFileVersion) GetVersion() int32 {
	if o == nil || o.Version == nil {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerConfigFileVersion) GetVersionOk() (*int32, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *PluginManagerConfigFileVersion) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *PluginManagerConfigFileVersion) SetVersion(v int32) {
	o.Version = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *PluginManagerConfigFileVersion) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerConfigFileVersion) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *PluginManagerConfigFileVersion) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *PluginManagerConfigFileVersion) SetPath(v string) {
	o.Path = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PluginManagerConfigFileVersion) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerConfigFileVersion) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PluginManagerConfigFileVersion) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *PluginManagerConfigFileVersion) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

func (o PluginManagerConfigFileVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	return json.Marshal(toSerialize)
}

type NullablePluginManagerConfigFileVersion struct {
	value *PluginManagerConfigFileVersion
	isSet bool
}

func (v NullablePluginManagerConfigFileVersion) Get() *PluginManagerConfigFileVersion {
	return v.value
}

func (v *NullablePluginManagerConfigFileVersion) Set(val *PluginManagerConfigFileVersion) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginManagerConfigFileVersion) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginManagerConfigFileVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginManagerConfigFileVersion(val *PluginManagerConfigFileVersion) *NullablePluginManagerConfigFileVersion {
	return &NullablePluginManagerConfigFileVersion{value: val, isSet: true}
}

func (v NullablePluginManagerConfigFileVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginManagerConfigFileVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


