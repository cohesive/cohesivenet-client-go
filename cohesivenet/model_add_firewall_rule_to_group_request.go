/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// AddFirewallRuleToGroupRequest struct for AddFirewallRuleToGroupRequest
type AddFirewallRuleToGroupRequest struct {
	// ID of rule to add to group
	RuleId string `json:"rule_id"`
}

// NewAddFirewallRuleToGroupRequest instantiates a new AddFirewallRuleToGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddFirewallRuleToGroupRequest(ruleId string) *AddFirewallRuleToGroupRequest {
	this := AddFirewallRuleToGroupRequest{}
	this.RuleId = ruleId
	return &this
}

// NewAddFirewallRuleToGroupRequestWithDefaults instantiates a new AddFirewallRuleToGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddFirewallRuleToGroupRequestWithDefaults() *AddFirewallRuleToGroupRequest {
	this := AddFirewallRuleToGroupRequest{}
	return &this
}

// GetRuleId returns the RuleId field value
func (o *AddFirewallRuleToGroupRequest) GetRuleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value
// and a boolean to check if the value has been set.
func (o *AddFirewallRuleToGroupRequest) GetRuleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleId, true
}

// SetRuleId sets field value
func (o *AddFirewallRuleToGroupRequest) SetRuleId(v string) {
	o.RuleId = v
}

func (o AddFirewallRuleToGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["rule_id"] = o.RuleId
	}
	return json.Marshal(toSerialize)
}

type NullableAddFirewallRuleToGroupRequest struct {
	value *AddFirewallRuleToGroupRequest
	isSet bool
}

func (v NullableAddFirewallRuleToGroupRequest) Get() *AddFirewallRuleToGroupRequest {
	return v.value
}

func (v *NullableAddFirewallRuleToGroupRequest) Set(val *AddFirewallRuleToGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddFirewallRuleToGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddFirewallRuleToGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddFirewallRuleToGroupRequest(val *AddFirewallRuleToGroupRequest) *NullableAddFirewallRuleToGroupRequest {
	return &NullableAddFirewallRuleToGroupRequest{value: val, isSet: true}
}

func (v NullableAddFirewallRuleToGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddFirewallRuleToGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


