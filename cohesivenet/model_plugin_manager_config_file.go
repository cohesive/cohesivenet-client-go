/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
	"time"
)

// PluginManagerConfigFile struct for PluginManagerConfigFile
type PluginManagerConfigFile struct {
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
	Description *string `json:"description,omitempty"`
	Version *int32 `json:"version,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	PreviousVersions []PluginManagerConfigFileVersion `json:"previous_versions,omitempty"`
}

// NewPluginManagerConfigFile instantiates a new PluginManagerConfigFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginManagerConfigFile() *PluginManagerConfigFile {
	this := PluginManagerConfigFile{}
	return &this
}

// NewPluginManagerConfigFileWithDefaults instantiates a new PluginManagerConfigFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginManagerConfigFileWithDefaults() *PluginManagerConfigFile {
	this := PluginManagerConfigFile{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PluginManagerConfigFile) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerConfigFile) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PluginManagerConfigFile) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PluginManagerConfigFile) SetName(v string) {
	o.Name = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *PluginManagerConfigFile) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerConfigFile) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *PluginManagerConfigFile) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *PluginManagerConfigFile) SetPath(v string) {
	o.Path = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PluginManagerConfigFile) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerConfigFile) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PluginManagerConfigFile) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PluginManagerConfigFile) SetDescription(v string) {
	o.Description = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *PluginManagerConfigFile) GetVersion() int32 {
	if o == nil || o.Version == nil {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerConfigFile) GetVersionOk() (*int32, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *PluginManagerConfigFile) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *PluginManagerConfigFile) SetVersion(v int32) {
	o.Version = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PluginManagerConfigFile) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerConfigFile) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PluginManagerConfigFile) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PluginManagerConfigFile) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetPreviousVersions returns the PreviousVersions field value if set, zero value otherwise.
func (o *PluginManagerConfigFile) GetPreviousVersions() []PluginManagerConfigFilePreviousVersionsInner {
	if o == nil || o.PreviousVersions == nil {
		var ret []PluginManagerConfigFilePreviousVersionsInner
		return ret
	}
	return o.PreviousVersions
}

// GetPreviousVersionsOk returns a tuple with the PreviousVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerConfigFile) GetPreviousVersionsOk() ([]PluginManagerConfigFilePreviousVersionsInner, bool) {
	if o == nil || o.PreviousVersions == nil {
		return nil, false
	}
	return o.PreviousVersions, true
}

// HasPreviousVersions returns a boolean if a field has been set.
func (o *PluginManagerConfigFile) HasPreviousVersions() bool {
	if o != nil && o.PreviousVersions != nil {
		return true
	}

	return false
}

// SetPreviousVersions gets a reference to the given []PluginManagerConfigFilePreviousVersionsInner and assigns it to the PreviousVersions field.
func (o *PluginManagerConfigFile) SetPreviousVersions(v []PluginManagerConfigFilePreviousVersionsInner) {
	o.PreviousVersions = v
}

func (o PluginManagerConfigFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.PreviousVersions != nil {
		toSerialize["previous_versions"] = o.PreviousVersions
	}
	return json.Marshal(toSerialize)
}

type NullablePluginManagerConfigFile struct {
	value *PluginManagerConfigFile
	isSet bool
}

func (v NullablePluginManagerConfigFile) Get() *PluginManagerConfigFile {
	return v.value
}

func (v *NullablePluginManagerConfigFile) Set(val *PluginManagerConfigFile) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginManagerConfigFile) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginManagerConfigFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginManagerConfigFile(val *PluginManagerConfigFile) *NullablePluginManagerConfigFile {
	return &NullablePluginManagerConfigFile{value: val, isSet: true}
}

func (v NullablePluginManagerConfigFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginManagerConfigFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


