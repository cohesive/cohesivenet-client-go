/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
	"fmt"
)

// UpdateClientpackResponse - struct for UpdateClientpackResponse
type UpdateClientpackResponse struct {
	ClientpackResponse *ClientpackResponse
	TaskTokenResponse *TaskTokenResponse
}

// ClientpackResponseAsUpdateClientpack is a convenience function that returns ClientpackResponse wrapped in UpdateClientpack
func ClientpackResponseAsUpdateClientpack(v *ClientpackResponse) UpdateClientpackResponse {
	return UpdateClientpackResponse{
		ClientpackResponse: v,
	}
}

// TaskTokenResponseAsUpdateClientpack is a convenience function that returns TaskTokenResponse wrapped in UpdateClientpack
func TaskTokenResponseAsUpdateClientpack(v *TaskTokenResponse) UpdateClientpackResponse {
	return UpdateClientpackResponse{
		TaskTokenResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateClientpackResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ClientpackResponse
	err = newStrictDecoder(data).Decode(&dst.ClientpackResponse)
	if err == nil {
		jsonClientpackResponse, _ := json.Marshal(dst.ClientpackResponse)
		if string(jsonClientpackResponse) == "{}" { // empty struct
			dst.ClientpackResponse = nil
		} else {
			match++
		}
	} else {
		dst.ClientpackResponse = nil
	}

	// try to unmarshal data into TaskTokenResponse
	err = newStrictDecoder(data).Decode(&dst.TaskTokenResponse)
	if err == nil {
		jsonTaskTokenResponse, _ := json.Marshal(dst.TaskTokenResponse)
		if string(jsonTaskTokenResponse) == "{}" { // empty struct
			dst.TaskTokenResponse = nil
		} else {
			match++
		}
	} else {
		dst.TaskTokenResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ClientpackResponse = nil
		dst.TaskTokenResponse = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(UpdateClientpack)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(UpdateClientpack)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateClientpackResponse) MarshalJSON() ([]byte, error) {
	if src.ClientpackResponse != nil {
		return json.Marshal(&src.ClientpackResponse)
	}

	if src.TaskTokenResponse != nil {
		return json.Marshal(&src.TaskTokenResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateClientpackResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ClientpackResponse != nil {
		return obj.ClientpackResponse
	}

	if obj.TaskTokenResponse != nil {
		return obj.TaskTokenResponse
	}

	// all schemas are nil
	return nil
}

type NullableUpdateClientpackResponse struct {
	value *UpdateClientpackResponse
	isSet bool
}

func (v NullableUpdateClientpackResponse) Get() *UpdateClientpackResponse {
	return v.value
}

func (v *NullableUpdateClientpackResponse) Set(val *UpdateClientpackResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateClientpackResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateClientpackResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateClientpack(val *UpdateClientpackResponse) *NullableUpdateClientpackResponse {
	return &NullableUpdateClientpackResponse{value: val, isSet: true}
}

func (v NullableUpdateClientpackResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateClientpackResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


