/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
	"fmt"
)

// IdentitySettingsRequest - struct for IdentitySettingsRequest
type IdentitySettingsRequest struct {
	IdentityLdapSettingsRequest *IdentityLdapSettingsRequest
	IdentityOIDCSettingsRequest *IdentityOIDCSettingsRequest
	IdentityRadiusSettingsRequest *IdentityRadiusSettingsRequest
}

// IdentityLdapSettingsRequestAsIdentitySettingsRequest is a convenience function that returns IdentityLdapSettingsRequest wrapped in IdentitySettingsRequest
func IdentityLdapSettingsRequestAsIdentitySettingsRequest(v *IdentityLdapSettingsRequest) IdentitySettingsRequest {
	return IdentitySettingsRequest{
		IdentityLdapSettingsRequest: v,
	}
}

// IdentityOIDCSettingsRequestAsIdentitySettingsRequest is a convenience function that returns IdentityOIDCSettingsRequest wrapped in IdentitySettingsRequest
func IdentityOIDCSettingsRequestAsIdentitySettingsRequest(v *IdentityOIDCSettingsRequest) IdentitySettingsRequest {
	return IdentitySettingsRequest{
		IdentityOIDCSettingsRequest: v,
	}
}

// IdentityRadiusSettingsRequestAsIdentitySettingsRequest is a convenience function that returns IdentityRadiusSettingsRequest wrapped in IdentitySettingsRequest
func IdentityRadiusSettingsRequestAsIdentitySettingsRequest(v *IdentityRadiusSettingsRequest) IdentitySettingsRequest {
	return IdentitySettingsRequest{
		IdentityRadiusSettingsRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IdentitySettingsRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IdentityLdapSettingsRequest
	err = newStrictDecoder(data).Decode(&dst.IdentityLdapSettingsRequest)
	if err == nil {
		jsonIdentityLdapSettingsRequest, _ := json.Marshal(dst.IdentityLdapSettingsRequest)
		if string(jsonIdentityLdapSettingsRequest) == "{}" { // empty struct
			dst.IdentityLdapSettingsRequest = nil
		} else {
			match++
		}
	} else {
		dst.IdentityLdapSettingsRequest = nil
	}

	// try to unmarshal data into IdentityOIDCSettingsRequest
	err = newStrictDecoder(data).Decode(&dst.IdentityOIDCSettingsRequest)
	if err == nil {
		jsonIdentityOIDCSettingsRequest, _ := json.Marshal(dst.IdentityOIDCSettingsRequest)
		if string(jsonIdentityOIDCSettingsRequest) == "{}" { // empty struct
			dst.IdentityOIDCSettingsRequest = nil
		} else {
			match++
		}
	} else {
		dst.IdentityOIDCSettingsRequest = nil
	}

	// try to unmarshal data into IdentityRadiusSettingsRequest
	err = newStrictDecoder(data).Decode(&dst.IdentityRadiusSettingsRequest)
	if err == nil {
		jsonIdentityRadiusSettingsRequest, _ := json.Marshal(dst.IdentityRadiusSettingsRequest)
		if string(jsonIdentityRadiusSettingsRequest) == "{}" { // empty struct
			dst.IdentityRadiusSettingsRequest = nil
		} else {
			match++
		}
	} else {
		dst.IdentityRadiusSettingsRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IdentityLdapSettingsRequest = nil
		dst.IdentityOIDCSettingsRequest = nil
		dst.IdentityRadiusSettingsRequest = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(IdentitySettingsRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(IdentitySettingsRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IdentitySettingsRequest) MarshalJSON() ([]byte, error) {
	if src.IdentityLdapSettingsRequest != nil {
		return json.Marshal(&src.IdentityLdapSettingsRequest)
	}

	if src.IdentityOIDCSettingsRequest != nil {
		return json.Marshal(&src.IdentityOIDCSettingsRequest)
	}

	if src.IdentityRadiusSettingsRequest != nil {
		return json.Marshal(&src.IdentityRadiusSettingsRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IdentitySettingsRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IdentityLdapSettingsRequest != nil {
		return obj.IdentityLdapSettingsRequest
	}

	if obj.IdentityOIDCSettingsRequest != nil {
		return obj.IdentityOIDCSettingsRequest
	}

	if obj.IdentityRadiusSettingsRequest != nil {
		return obj.IdentityRadiusSettingsRequest
	}

	// all schemas are nil
	return nil
}

type NullableIdentitySettingsRequest struct {
	value *IdentitySettingsRequest
	isSet bool
}

func (v NullableIdentitySettingsRequest) Get() *IdentitySettingsRequest {
	return v.value
}

func (v *NullableIdentitySettingsRequest) Set(val *IdentitySettingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentitySettingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentitySettingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentitySettingsRequest(val *IdentitySettingsRequest) *NullableIdentitySettingsRequest {
	return &NullableIdentitySettingsRequest{value: val, isSet: true}
}

func (v NullableIdentitySettingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentitySettingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


