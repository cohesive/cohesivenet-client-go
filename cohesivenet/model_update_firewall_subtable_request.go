/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// UpdateFirewallSubtableRequest struct for UpdateFirewallSubtableRequest
type UpdateFirewallSubtableRequest struct {
	Description *string `json:"description,omitempty"`
	Rules []CreateFirewallSubtableRequestRule `json:"rules,omitempty"`
}

// NewUpdateFirewallSubtableRequest instantiates a new UpdateFirewallSubtableRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFirewallSubtableRequest() *UpdateFirewallSubtableRequest {
	this := UpdateFirewallSubtableRequest{}
	return &this
}

// NewUpdateFirewallSubtableRequestWithDefaults instantiates a new UpdateFirewallSubtableRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFirewallSubtableRequestWithDefaults() *UpdateFirewallSubtableRequest {
	this := UpdateFirewallSubtableRequest{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateFirewallSubtableRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFirewallSubtableRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateFirewallSubtableRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateFirewallSubtableRequest) SetDescription(v string) {
	o.Description = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *UpdateFirewallSubtableRequest) GetRules() []CreateFirewallSubtableRequestRule {
	if o == nil || o.Rules == nil {
		var ret []CreateFirewallSubtableRequestRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFirewallSubtableRequest) GetRulesOk() ([]CreateFirewallSubtableRequestRule, bool) {
	if o == nil || o.Rules == nil {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *UpdateFirewallSubtableRequest) HasRules() bool {
	if o != nil && o.Rules != nil {
		return true
	}

	return false
}

// SetRules gets a reference to the given []CreateFirewallSubtableRequestRule and assigns it to the Rules field.
func (o *UpdateFirewallSubtableRequest) SetRules(v []CreateFirewallSubtableRequestRule) {
	o.Rules = v
}

func (o UpdateFirewallSubtableRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateFirewallSubtableRequest struct {
	value *UpdateFirewallSubtableRequest
	isSet bool
}

func (v NullableUpdateFirewallSubtableRequest) Get() *UpdateFirewallSubtableRequest {
	return v.value
}

func (v *NullableUpdateFirewallSubtableRequest) Set(val *UpdateFirewallSubtableRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFirewallSubtableRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFirewallSubtableRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFirewallSubtableRequest(val *UpdateFirewallSubtableRequest) *NullableUpdateFirewallSubtableRequest {
	return &NullableUpdateFirewallSubtableRequest{value: val, isSet: true}
}

func (v NullableUpdateFirewallSubtableRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFirewallSubtableRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


