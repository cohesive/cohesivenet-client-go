/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
	"fmt"
)

// CloudInfoCloudData - struct for CloudInfoCloudData
type CloudInfoCloudData struct {
	CloudInfoEC2 *CloudInfoEC2
	CloudInfoGCE *CloudInfoGCE
}

// CloudInfoEC2AsCloudInfoCloudData is a convenience function that returns CloudInfoEC2 wrapped in CloudInfoCloudData
func CloudInfoEC2AsCloudInfoCloudData(v *CloudInfoEC2) CloudInfoCloudData {
	return CloudInfoCloudData{
		CloudInfoEC2: v,
	}
}

// CloudInfoGCEAsCloudInfoCloudData is a convenience function that returns CloudInfoGCE wrapped in CloudInfoCloudData
func CloudInfoGCEAsCloudInfoCloudData(v *CloudInfoGCE) CloudInfoCloudData {
	return CloudInfoCloudData{
		CloudInfoGCE: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CloudInfoCloudData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CloudInfoEC2
	err = newStrictDecoder(data).Decode(&dst.CloudInfoEC2)
	if err == nil {
		jsonCloudInfoEC2, _ := json.Marshal(dst.CloudInfoEC2)
		if string(jsonCloudInfoEC2) == "{}" { // empty struct
			dst.CloudInfoEC2 = nil
		} else {
			match++
		}
	} else {
		dst.CloudInfoEC2 = nil
	}

	// try to unmarshal data into CloudInfoGCE
	err = newStrictDecoder(data).Decode(&dst.CloudInfoGCE)
	if err == nil {
		jsonCloudInfoGCE, _ := json.Marshal(dst.CloudInfoGCE)
		if string(jsonCloudInfoGCE) == "{}" { // empty struct
			dst.CloudInfoGCE = nil
		} else {
			match++
		}
	} else {
		dst.CloudInfoGCE = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CloudInfoEC2 = nil
		dst.CloudInfoGCE = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(CloudInfoCloudData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(CloudInfoCloudData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CloudInfoCloudData) MarshalJSON() ([]byte, error) {
	if src.CloudInfoEC2 != nil {
		return json.Marshal(&src.CloudInfoEC2)
	}

	if src.CloudInfoGCE != nil {
		return json.Marshal(&src.CloudInfoGCE)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CloudInfoCloudData) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CloudInfoEC2 != nil {
		return obj.CloudInfoEC2
	}

	if obj.CloudInfoGCE != nil {
		return obj.CloudInfoGCE
	}

	// all schemas are nil
	return nil
}

type NullableCloudInfoCloudData struct {
	value *CloudInfoCloudData
	isSet bool
}

func (v NullableCloudInfoCloudData) Get() *CloudInfoCloudData {
	return v.value
}

func (v *NullableCloudInfoCloudData) Set(val *CloudInfoCloudData) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudInfoCloudData) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudInfoCloudData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudInfoCloudData(val *CloudInfoCloudData) *NullableCloudInfoCloudData {
	return &NullableCloudInfoCloudData{value: val, isSet: true}
}

func (v NullableCloudInfoCloudData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudInfoCloudData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


