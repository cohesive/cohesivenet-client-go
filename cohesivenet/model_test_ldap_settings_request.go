/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// TestLdapSettingsRequest struct for TestLdapSettingsRequest
type TestLdapSettingsRequest struct {
	// Currently only ldap is supported for testing
	Provider string `json:"provider"`
	// IP address or resolvable hostname of LDAP server
	Host *string `json:"host,omitempty"`
	// Port for LDAP
	Port *int32 `json:"port,omitempty"`
	// Use SSL
	Encrypt *bool `json:"encrypt,omitempty"`
	// Use LDAPS or start TLS (default)?
	EncryptLdaps *bool `json:"encrypt_ldaps,omitempty"`
	// Use certificates to authenticate via encrypted connection
	EncryptAuth *bool `json:"encrypt_auth,omitempty"`
	// Verify certicate using authority
	EncryptVerifyCa *bool `json:"encrypt_verify_ca,omitempty"`
	// Bind Username
	Binddn *string `json:"binddn,omitempty"`
	// Bind Password
	Bindpw *string `json:"bindpw,omitempty"`
	// Authentication certificate text content to use
	AuthCert *string `json:"auth_cert,omitempty"`
	// Test with current uploaded authentication certificate?
	AuthCertCurrent *bool `json:"auth_cert_current,omitempty"`
	// Authentication key text content to use
	AuthKey *string `json:"auth_key,omitempty"`
	// Test with current uploaded authentication key?
	AuthKeyCurrent *bool `json:"auth_key_current,omitempty"`
	// CA certificate text content to use
	CaCert *string `json:"ca_cert,omitempty"`
	// Test with current uploaded CA certificate?
	CaCertCurrent *bool `json:"ca_cert_current,omitempty"`
}

// NewTestLdapSettingsRequest instantiates a new TestLdapSettingsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestLdapSettingsRequest(provider string) *TestLdapSettingsRequest {
	this := TestLdapSettingsRequest{}
	this.Provider = provider
	var port int32 = 389
	this.Port = &port
	var encrypt bool = false
	this.Encrypt = &encrypt
	var encryptLdaps bool = true
	this.EncryptLdaps = &encryptLdaps
	var encryptAuth bool = false
	this.EncryptAuth = &encryptAuth
	var encryptVerifyCa bool = false
	this.EncryptVerifyCa = &encryptVerifyCa
	var authCertCurrent bool = false
	this.AuthCertCurrent = &authCertCurrent
	var authKeyCurrent bool = false
	this.AuthKeyCurrent = &authKeyCurrent
	var caCertCurrent bool = false
	this.CaCertCurrent = &caCertCurrent
	return &this
}

// NewTestLdapSettingsRequestWithDefaults instantiates a new TestLdapSettingsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestLdapSettingsRequestWithDefaults() *TestLdapSettingsRequest {
	this := TestLdapSettingsRequest{}
	var port int32 = 389
	this.Port = &port
	var encrypt bool = false
	this.Encrypt = &encrypt
	var encryptLdaps bool = true
	this.EncryptLdaps = &encryptLdaps
	var encryptAuth bool = false
	this.EncryptAuth = &encryptAuth
	var encryptVerifyCa bool = false
	this.EncryptVerifyCa = &encryptVerifyCa
	var authCertCurrent bool = false
	this.AuthCertCurrent = &authCertCurrent
	var authKeyCurrent bool = false
	this.AuthKeyCurrent = &authKeyCurrent
	var caCertCurrent bool = false
	this.CaCertCurrent = &caCertCurrent
	return &this
}

// GetProvider returns the Provider field value
func (o *TestLdapSettingsRequest) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *TestLdapSettingsRequest) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *TestLdapSettingsRequest) SetProvider(v string) {
	o.Provider = v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *TestLdapSettingsRequest) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestLdapSettingsRequest) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *TestLdapSettingsRequest) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *TestLdapSettingsRequest) SetHost(v string) {
	o.Host = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *TestLdapSettingsRequest) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestLdapSettingsRequest) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *TestLdapSettingsRequest) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *TestLdapSettingsRequest) SetPort(v int32) {
	o.Port = &v
}

// GetEncrypt returns the Encrypt field value if set, zero value otherwise.
func (o *TestLdapSettingsRequest) GetEncrypt() bool {
	if o == nil || o.Encrypt == nil {
		var ret bool
		return ret
	}
	return *o.Encrypt
}

// GetEncryptOk returns a tuple with the Encrypt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestLdapSettingsRequest) GetEncryptOk() (*bool, bool) {
	if o == nil || o.Encrypt == nil {
		return nil, false
	}
	return o.Encrypt, true
}

// HasEncrypt returns a boolean if a field has been set.
func (o *TestLdapSettingsRequest) HasEncrypt() bool {
	if o != nil && o.Encrypt != nil {
		return true
	}

	return false
}

// SetEncrypt gets a reference to the given bool and assigns it to the Encrypt field.
func (o *TestLdapSettingsRequest) SetEncrypt(v bool) {
	o.Encrypt = &v
}

// GetEncryptLdaps returns the EncryptLdaps field value if set, zero value otherwise.
func (o *TestLdapSettingsRequest) GetEncryptLdaps() bool {
	if o == nil || o.EncryptLdaps == nil {
		var ret bool
		return ret
	}
	return *o.EncryptLdaps
}

// GetEncryptLdapsOk returns a tuple with the EncryptLdaps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestLdapSettingsRequest) GetEncryptLdapsOk() (*bool, bool) {
	if o == nil || o.EncryptLdaps == nil {
		return nil, false
	}
	return o.EncryptLdaps, true
}

// HasEncryptLdaps returns a boolean if a field has been set.
func (o *TestLdapSettingsRequest) HasEncryptLdaps() bool {
	if o != nil && o.EncryptLdaps != nil {
		return true
	}

	return false
}

// SetEncryptLdaps gets a reference to the given bool and assigns it to the EncryptLdaps field.
func (o *TestLdapSettingsRequest) SetEncryptLdaps(v bool) {
	o.EncryptLdaps = &v
}

// GetEncryptAuth returns the EncryptAuth field value if set, zero value otherwise.
func (o *TestLdapSettingsRequest) GetEncryptAuth() bool {
	if o == nil || o.EncryptAuth == nil {
		var ret bool
		return ret
	}
	return *o.EncryptAuth
}

// GetEncryptAuthOk returns a tuple with the EncryptAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestLdapSettingsRequest) GetEncryptAuthOk() (*bool, bool) {
	if o == nil || o.EncryptAuth == nil {
		return nil, false
	}
	return o.EncryptAuth, true
}

// HasEncryptAuth returns a boolean if a field has been set.
func (o *TestLdapSettingsRequest) HasEncryptAuth() bool {
	if o != nil && o.EncryptAuth != nil {
		return true
	}

	return false
}

// SetEncryptAuth gets a reference to the given bool and assigns it to the EncryptAuth field.
func (o *TestLdapSettingsRequest) SetEncryptAuth(v bool) {
	o.EncryptAuth = &v
}

// GetEncryptVerifyCa returns the EncryptVerifyCa field value if set, zero value otherwise.
func (o *TestLdapSettingsRequest) GetEncryptVerifyCa() bool {
	if o == nil || o.EncryptVerifyCa == nil {
		var ret bool
		return ret
	}
	return *o.EncryptVerifyCa
}

// GetEncryptVerifyCaOk returns a tuple with the EncryptVerifyCa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestLdapSettingsRequest) GetEncryptVerifyCaOk() (*bool, bool) {
	if o == nil || o.EncryptVerifyCa == nil {
		return nil, false
	}
	return o.EncryptVerifyCa, true
}

// HasEncryptVerifyCa returns a boolean if a field has been set.
func (o *TestLdapSettingsRequest) HasEncryptVerifyCa() bool {
	if o != nil && o.EncryptVerifyCa != nil {
		return true
	}

	return false
}

// SetEncryptVerifyCa gets a reference to the given bool and assigns it to the EncryptVerifyCa field.
func (o *TestLdapSettingsRequest) SetEncryptVerifyCa(v bool) {
	o.EncryptVerifyCa = &v
}

// GetBinddn returns the Binddn field value if set, zero value otherwise.
func (o *TestLdapSettingsRequest) GetBinddn() string {
	if o == nil || o.Binddn == nil {
		var ret string
		return ret
	}
	return *o.Binddn
}

// GetBinddnOk returns a tuple with the Binddn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestLdapSettingsRequest) GetBinddnOk() (*string, bool) {
	if o == nil || o.Binddn == nil {
		return nil, false
	}
	return o.Binddn, true
}

// HasBinddn returns a boolean if a field has been set.
func (o *TestLdapSettingsRequest) HasBinddn() bool {
	if o != nil && o.Binddn != nil {
		return true
	}

	return false
}

// SetBinddn gets a reference to the given string and assigns it to the Binddn field.
func (o *TestLdapSettingsRequest) SetBinddn(v string) {
	o.Binddn = &v
}

// GetBindpw returns the Bindpw field value if set, zero value otherwise.
func (o *TestLdapSettingsRequest) GetBindpw() string {
	if o == nil || o.Bindpw == nil {
		var ret string
		return ret
	}
	return *o.Bindpw
}

// GetBindpwOk returns a tuple with the Bindpw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestLdapSettingsRequest) GetBindpwOk() (*string, bool) {
	if o == nil || o.Bindpw == nil {
		return nil, false
	}
	return o.Bindpw, true
}

// HasBindpw returns a boolean if a field has been set.
func (o *TestLdapSettingsRequest) HasBindpw() bool {
	if o != nil && o.Bindpw != nil {
		return true
	}

	return false
}

// SetBindpw gets a reference to the given string and assigns it to the Bindpw field.
func (o *TestLdapSettingsRequest) SetBindpw(v string) {
	o.Bindpw = &v
}

// GetAuthCert returns the AuthCert field value if set, zero value otherwise.
func (o *TestLdapSettingsRequest) GetAuthCert() string {
	if o == nil || o.AuthCert == nil {
		var ret string
		return ret
	}
	return *o.AuthCert
}

// GetAuthCertOk returns a tuple with the AuthCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestLdapSettingsRequest) GetAuthCertOk() (*string, bool) {
	if o == nil || o.AuthCert == nil {
		return nil, false
	}
	return o.AuthCert, true
}

// HasAuthCert returns a boolean if a field has been set.
func (o *TestLdapSettingsRequest) HasAuthCert() bool {
	if o != nil && o.AuthCert != nil {
		return true
	}

	return false
}

// SetAuthCert gets a reference to the given string and assigns it to the AuthCert field.
func (o *TestLdapSettingsRequest) SetAuthCert(v string) {
	o.AuthCert = &v
}

// GetAuthCertCurrent returns the AuthCertCurrent field value if set, zero value otherwise.
func (o *TestLdapSettingsRequest) GetAuthCertCurrent() bool {
	if o == nil || o.AuthCertCurrent == nil {
		var ret bool
		return ret
	}
	return *o.AuthCertCurrent
}

// GetAuthCertCurrentOk returns a tuple with the AuthCertCurrent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestLdapSettingsRequest) GetAuthCertCurrentOk() (*bool, bool) {
	if o == nil || o.AuthCertCurrent == nil {
		return nil, false
	}
	return o.AuthCertCurrent, true
}

// HasAuthCertCurrent returns a boolean if a field has been set.
func (o *TestLdapSettingsRequest) HasAuthCertCurrent() bool {
	if o != nil && o.AuthCertCurrent != nil {
		return true
	}

	return false
}

// SetAuthCertCurrent gets a reference to the given bool and assigns it to the AuthCertCurrent field.
func (o *TestLdapSettingsRequest) SetAuthCertCurrent(v bool) {
	o.AuthCertCurrent = &v
}

// GetAuthKey returns the AuthKey field value if set, zero value otherwise.
func (o *TestLdapSettingsRequest) GetAuthKey() string {
	if o == nil || o.AuthKey == nil {
		var ret string
		return ret
	}
	return *o.AuthKey
}

// GetAuthKeyOk returns a tuple with the AuthKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestLdapSettingsRequest) GetAuthKeyOk() (*string, bool) {
	if o == nil || o.AuthKey == nil {
		return nil, false
	}
	return o.AuthKey, true
}

// HasAuthKey returns a boolean if a field has been set.
func (o *TestLdapSettingsRequest) HasAuthKey() bool {
	if o != nil && o.AuthKey != nil {
		return true
	}

	return false
}

// SetAuthKey gets a reference to the given string and assigns it to the AuthKey field.
func (o *TestLdapSettingsRequest) SetAuthKey(v string) {
	o.AuthKey = &v
}

// GetAuthKeyCurrent returns the AuthKeyCurrent field value if set, zero value otherwise.
func (o *TestLdapSettingsRequest) GetAuthKeyCurrent() bool {
	if o == nil || o.AuthKeyCurrent == nil {
		var ret bool
		return ret
	}
	return *o.AuthKeyCurrent
}

// GetAuthKeyCurrentOk returns a tuple with the AuthKeyCurrent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestLdapSettingsRequest) GetAuthKeyCurrentOk() (*bool, bool) {
	if o == nil || o.AuthKeyCurrent == nil {
		return nil, false
	}
	return o.AuthKeyCurrent, true
}

// HasAuthKeyCurrent returns a boolean if a field has been set.
func (o *TestLdapSettingsRequest) HasAuthKeyCurrent() bool {
	if o != nil && o.AuthKeyCurrent != nil {
		return true
	}

	return false
}

// SetAuthKeyCurrent gets a reference to the given bool and assigns it to the AuthKeyCurrent field.
func (o *TestLdapSettingsRequest) SetAuthKeyCurrent(v bool) {
	o.AuthKeyCurrent = &v
}

// GetCaCert returns the CaCert field value if set, zero value otherwise.
func (o *TestLdapSettingsRequest) GetCaCert() string {
	if o == nil || o.CaCert == nil {
		var ret string
		return ret
	}
	return *o.CaCert
}

// GetCaCertOk returns a tuple with the CaCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestLdapSettingsRequest) GetCaCertOk() (*string, bool) {
	if o == nil || o.CaCert == nil {
		return nil, false
	}
	return o.CaCert, true
}

// HasCaCert returns a boolean if a field has been set.
func (o *TestLdapSettingsRequest) HasCaCert() bool {
	if o != nil && o.CaCert != nil {
		return true
	}

	return false
}

// SetCaCert gets a reference to the given string and assigns it to the CaCert field.
func (o *TestLdapSettingsRequest) SetCaCert(v string) {
	o.CaCert = &v
}

// GetCaCertCurrent returns the CaCertCurrent field value if set, zero value otherwise.
func (o *TestLdapSettingsRequest) GetCaCertCurrent() bool {
	if o == nil || o.CaCertCurrent == nil {
		var ret bool
		return ret
	}
	return *o.CaCertCurrent
}

// GetCaCertCurrentOk returns a tuple with the CaCertCurrent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestLdapSettingsRequest) GetCaCertCurrentOk() (*bool, bool) {
	if o == nil || o.CaCertCurrent == nil {
		return nil, false
	}
	return o.CaCertCurrent, true
}

// HasCaCertCurrent returns a boolean if a field has been set.
func (o *TestLdapSettingsRequest) HasCaCertCurrent() bool {
	if o != nil && o.CaCertCurrent != nil {
		return true
	}

	return false
}

// SetCaCertCurrent gets a reference to the given bool and assigns it to the CaCertCurrent field.
func (o *TestLdapSettingsRequest) SetCaCertCurrent(v bool) {
	o.CaCertCurrent = &v
}

func (o TestLdapSettingsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["provider"] = o.Provider
	}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.Encrypt != nil {
		toSerialize["encrypt"] = o.Encrypt
	}
	if o.EncryptLdaps != nil {
		toSerialize["encrypt_ldaps"] = o.EncryptLdaps
	}
	if o.EncryptAuth != nil {
		toSerialize["encrypt_auth"] = o.EncryptAuth
	}
	if o.EncryptVerifyCa != nil {
		toSerialize["encrypt_verify_ca"] = o.EncryptVerifyCa
	}
	if o.Binddn != nil {
		toSerialize["binddn"] = o.Binddn
	}
	if o.Bindpw != nil {
		toSerialize["bindpw"] = o.Bindpw
	}
	if o.AuthCert != nil {
		toSerialize["auth_cert"] = o.AuthCert
	}
	if o.AuthCertCurrent != nil {
		toSerialize["auth_cert_current"] = o.AuthCertCurrent
	}
	if o.AuthKey != nil {
		toSerialize["auth_key"] = o.AuthKey
	}
	if o.AuthKeyCurrent != nil {
		toSerialize["auth_key_current"] = o.AuthKeyCurrent
	}
	if o.CaCert != nil {
		toSerialize["ca_cert"] = o.CaCert
	}
	if o.CaCertCurrent != nil {
		toSerialize["ca_cert_current"] = o.CaCertCurrent
	}
	return json.Marshal(toSerialize)
}

type NullableTestLdapSettingsRequest struct {
	value *TestLdapSettingsRequest
	isSet bool
}

func (v NullableTestLdapSettingsRequest) Get() *TestLdapSettingsRequest {
	return v.value
}

func (v *NullableTestLdapSettingsRequest) Set(val *TestLdapSettingsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTestLdapSettingsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTestLdapSettingsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestLdapSettingsRequest(val *TestLdapSettingsRequest) *NullableTestLdapSettingsRequest {
	return &NullableTestLdapSettingsRequest{value: val, isSet: true}
}

func (v NullableTestLdapSettingsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestLdapSettingsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


