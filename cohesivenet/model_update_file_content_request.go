/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// UpdateFileContentRequest struct for UpdateFileContentRequest
type UpdateFileContentRequest struct {
	// New config file contents
	Content string `json:"content"`
}

// NewUpdateFileContentRequest instantiates a new UpdateFileContentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFileContentRequest(content string) *UpdateFileContentRequest {
	this := UpdateFileContentRequest{}
	this.Content = content
	return &this
}

// NewUpdateFileContentRequestWithDefaults instantiates a new UpdateFileContentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFileContentRequestWithDefaults() *UpdateFileContentRequest {
	this := UpdateFileContentRequest{}
	return &this
}

// GetContent returns the Content field value
func (o *UpdateFileContentRequest) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *UpdateFileContentRequest) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *UpdateFileContentRequest) SetContent(v string) {
	o.Content = v
}

func (o UpdateFileContentRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateFileContentRequest struct {
	value *UpdateFileContentRequest
	isSet bool
}

func (v NullableUpdateFileContentRequest) Get() *UpdateFileContentRequest {
	return v.value
}

func (v *NullableUpdateFileContentRequest) Set(val *UpdateFileContentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFileContentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFileContentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFileContentRequest(val *UpdateFileContentRequest) *NullableUpdateFileContentRequest {
	return &NullableUpdateFileContentRequest{value: val, isSet: true}
}

func (v NullableUpdateFileContentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFileContentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


