/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// Route struct for Route
type Route struct {
	Id *int32 `json:"id,omitempty"`
	Cidr *string `json:"cidr,omitempty"`
	Interface *string `json:"interface,omitempty"`
	Netmask *string `json:"netmask,omitempty"`
	Description *string `json:"description,omitempty"`
	Advertise *bool `json:"advertise,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Editable *bool `json:"editable,omitempty"`
	Metric *int32 `json:"metric,omitempty"`
	Gateway *string `json:"gateway,omitempty"`
	Table *string `json:"table,omitempty"`
	RouteBasedInterface *string `json:"route_based_interface,omitempty"`
	RouteBasedGateway *string `json:"route_based_gateway,omitempty"`
	// message about state of route
	Msg *string `json:"msg,omitempty"`
	Tunnel *IpsecTunnel `json:"tunnel,omitempty"`
	TrafficPair *IpsecEndpointTrafficPair `json:"traffic_pair,omitempty"`
}

// NewRoute instantiates a new Route object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoute() *Route {
	this := Route{}
	return &this
}

// NewRouteWithDefaults instantiates a new Route object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteWithDefaults() *Route {
	this := Route{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Route) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Route) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Route) SetId(v int32) {
	o.Id = &v
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *Route) GetCidr() string {
	if o == nil || o.Cidr == nil {
		var ret string
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetCidrOk() (*string, bool) {
	if o == nil || o.Cidr == nil {
		return nil, false
	}
	return o.Cidr, true
}

// HasCidr returns a boolean if a field has been set.
func (o *Route) HasCidr() bool {
	if o != nil && o.Cidr != nil {
		return true
	}

	return false
}

// SetCidr gets a reference to the given string and assigns it to the Cidr field.
func (o *Route) SetCidr(v string) {
	o.Cidr = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *Route) GetInterface() string {
	if o == nil || o.Interface == nil {
		var ret string
		return ret
	}
	return *o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetInterfaceOk() (*string, bool) {
	if o == nil || o.Interface == nil {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *Route) HasInterface() bool {
	if o != nil && o.Interface != nil {
		return true
	}

	return false
}

// SetInterface gets a reference to the given string and assigns it to the Interface field.
func (o *Route) SetInterface(v string) {
	o.Interface = &v
}

// GetNetmask returns the Netmask field value if set, zero value otherwise.
func (o *Route) GetNetmask() string {
	if o == nil || o.Netmask == nil {
		var ret string
		return ret
	}
	return *o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetNetmaskOk() (*string, bool) {
	if o == nil || o.Netmask == nil {
		return nil, false
	}
	return o.Netmask, true
}

// HasNetmask returns a boolean if a field has been set.
func (o *Route) HasNetmask() bool {
	if o != nil && o.Netmask != nil {
		return true
	}

	return false
}

// SetNetmask gets a reference to the given string and assigns it to the Netmask field.
func (o *Route) SetNetmask(v string) {
	o.Netmask = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Route) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Route) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Route) SetDescription(v string) {
	o.Description = &v
}

// GetAdvertise returns the Advertise field value if set, zero value otherwise.
func (o *Route) GetAdvertise() bool {
	if o == nil || o.Advertise == nil {
		var ret bool
		return ret
	}
	return *o.Advertise
}

// GetAdvertiseOk returns a tuple with the Advertise field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetAdvertiseOk() (*bool, bool) {
	if o == nil || o.Advertise == nil {
		return nil, false
	}
	return o.Advertise, true
}

// HasAdvertise returns a boolean if a field has been set.
func (o *Route) HasAdvertise() bool {
	if o != nil && o.Advertise != nil {
		return true
	}

	return false
}

// SetAdvertise gets a reference to the given bool and assigns it to the Advertise field.
func (o *Route) SetAdvertise(v bool) {
	o.Advertise = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Route) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Route) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Route) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *Route) GetEditable() bool {
	if o == nil || o.Editable == nil {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetEditableOk() (*bool, bool) {
	if o == nil || o.Editable == nil {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *Route) HasEditable() bool {
	if o != nil && o.Editable != nil {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *Route) SetEditable(v bool) {
	o.Editable = &v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *Route) GetMetric() int32 {
	if o == nil || o.Metric == nil {
		var ret int32
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetMetricOk() (*int32, bool) {
	if o == nil || o.Metric == nil {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *Route) HasMetric() bool {
	if o != nil && o.Metric != nil {
		return true
	}

	return false
}

// SetMetric gets a reference to the given int32 and assigns it to the Metric field.
func (o *Route) SetMetric(v int32) {
	o.Metric = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *Route) GetGateway() string {
	if o == nil || o.Gateway == nil {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetGatewayOk() (*string, bool) {
	if o == nil || o.Gateway == nil {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *Route) HasGateway() bool {
	if o != nil && o.Gateway != nil {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *Route) SetGateway(v string) {
	o.Gateway = &v
}

// GetTable returns the Table field value if set, zero value otherwise.
func (o *Route) GetTable() string {
	if o == nil || o.Table == nil {
		var ret string
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetTableOk() (*string, bool) {
	if o == nil || o.Table == nil {
		return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *Route) HasTable() bool {
	if o != nil && o.Table != nil {
		return true
	}

	return false
}

// SetTable gets a reference to the given string and assigns it to the Table field.
func (o *Route) SetTable(v string) {
	o.Table = &v
}

// GetRouteBasedInterface returns the RouteBasedInterface field value if set, zero value otherwise.
func (o *Route) GetRouteBasedInterface() string {
	if o == nil || o.RouteBasedInterface == nil {
		var ret string
		return ret
	}
	return *o.RouteBasedInterface
}

// GetRouteBasedInterfaceOk returns a tuple with the RouteBasedInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetRouteBasedInterfaceOk() (*string, bool) {
	if o == nil || o.RouteBasedInterface == nil {
		return nil, false
	}
	return o.RouteBasedInterface, true
}

// HasRouteBasedInterface returns a boolean if a field has been set.
func (o *Route) HasRouteBasedInterface() bool {
	if o != nil && o.RouteBasedInterface != nil {
		return true
	}

	return false
}

// SetRouteBasedInterface gets a reference to the given string and assigns it to the RouteBasedInterface field.
func (o *Route) SetRouteBasedInterface(v string) {
	o.RouteBasedInterface = &v
}

// GetRouteBasedGateway returns the RouteBasedGateway field value if set, zero value otherwise.
func (o *Route) GetRouteBasedGateway() string {
	if o == nil || o.RouteBasedGateway == nil {
		var ret string
		return ret
	}
	return *o.RouteBasedGateway
}

// GetRouteBasedGatewayOk returns a tuple with the RouteBasedGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetRouteBasedGatewayOk() (*string, bool) {
	if o == nil || o.RouteBasedGateway == nil {
		return nil, false
	}
	return o.RouteBasedGateway, true
}

// HasRouteBasedGateway returns a boolean if a field has been set.
func (o *Route) HasRouteBasedGateway() bool {
	if o != nil && o.RouteBasedGateway != nil {
		return true
	}

	return false
}

// SetRouteBasedGateway gets a reference to the given string and assigns it to the RouteBasedGateway field.
func (o *Route) SetRouteBasedGateway(v string) {
	o.RouteBasedGateway = &v
}

// GetMsg returns the Msg field value if set, zero value otherwise.
func (o *Route) GetMsg() string {
	if o == nil || o.Msg == nil {
		var ret string
		return ret
	}
	return *o.Msg
}

// GetMsgOk returns a tuple with the Msg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetMsgOk() (*string, bool) {
	if o == nil || o.Msg == nil {
		return nil, false
	}
	return o.Msg, true
}

// HasMsg returns a boolean if a field has been set.
func (o *Route) HasMsg() bool {
	if o != nil && o.Msg != nil {
		return true
	}

	return false
}

// SetMsg gets a reference to the given string and assigns it to the Msg field.
func (o *Route) SetMsg(v string) {
	o.Msg = &v
}

// GetTunnel returns the Tunnel field value if set, zero value otherwise.
func (o *Route) GetTunnel() IpsecTunnel {
	if o == nil || o.Tunnel == nil {
		var ret IpsecTunnel
		return ret
	}
	return *o.Tunnel
}

// GetTunnelOk returns a tuple with the Tunnel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetTunnelOk() (*IpsecTunnel, bool) {
	if o == nil || o.Tunnel == nil {
		return nil, false
	}
	return o.Tunnel, true
}

// HasTunnel returns a boolean if a field has been set.
func (o *Route) HasTunnel() bool {
	if o != nil && o.Tunnel != nil {
		return true
	}

	return false
}

// SetTunnel gets a reference to the given IpsecTunnel and assigns it to the Tunnel field.
func (o *Route) SetTunnel(v IpsecTunnel) {
	o.Tunnel = &v
}

// GetTrafficPair returns the TrafficPair field value if set, zero value otherwise.
func (o *Route) GetTrafficPair() IpsecEndpointTrafficPair {
	if o == nil || o.TrafficPair == nil {
		var ret IpsecEndpointTrafficPair
		return ret
	}
	return *o.TrafficPair
}

// GetTrafficPairOk returns a tuple with the TrafficPair field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetTrafficPairOk() (*IpsecEndpointTrafficPair, bool) {
	if o == nil || o.TrafficPair == nil {
		return nil, false
	}
	return o.TrafficPair, true
}

// HasTrafficPair returns a boolean if a field has been set.
func (o *Route) HasTrafficPair() bool {
	if o != nil && o.TrafficPair != nil {
		return true
	}

	return false
}

// SetTrafficPair gets a reference to the given IpsecEndpointTrafficPair and assigns it to the TrafficPair field.
func (o *Route) SetTrafficPair(v IpsecEndpointTrafficPair) {
	o.TrafficPair = &v
}

func (o Route) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Cidr != nil {
		toSerialize["cidr"] = o.Cidr
	}
	if o.Interface != nil {
		toSerialize["interface"] = o.Interface
	}
	if o.Netmask != nil {
		toSerialize["netmask"] = o.Netmask
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Advertise != nil {
		toSerialize["advertise"] = o.Advertise
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Editable != nil {
		toSerialize["editable"] = o.Editable
	}
	if o.Metric != nil {
		toSerialize["metric"] = o.Metric
	}
	if o.Gateway != nil {
		toSerialize["gateway"] = o.Gateway
	}
	if o.Table != nil {
		toSerialize["table"] = o.Table
	}
	if o.RouteBasedInterface != nil {
		toSerialize["route_based_interface"] = o.RouteBasedInterface
	}
	if o.RouteBasedGateway != nil {
		toSerialize["route_based_gateway"] = o.RouteBasedGateway
	}
	if o.Msg != nil {
		toSerialize["msg"] = o.Msg
	}
	if o.Tunnel != nil {
		toSerialize["tunnel"] = o.Tunnel
	}
	if o.TrafficPair != nil {
		toSerialize["traffic_pair"] = o.TrafficPair
	}
	return json.Marshal(toSerialize)
}

type NullableRoute struct {
	value *Route
	isSet bool
}

func (v NullableRoute) Get() *Route {
	return v.value
}

func (v *NullableRoute) Set(val *Route) {
	v.value = val
	v.isSet = true
}

func (v NullableRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoute(val *Route) *NullableRoute {
	return &NullableRoute{value: val, isSet: true}
}

func (v NullableRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


