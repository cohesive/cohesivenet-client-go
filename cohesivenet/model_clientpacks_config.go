/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// ClientpacksConfig struct for ClientpacksConfig
type ClientpacksConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
	CheckedOut *bool `json:"checked_out,omitempty"`
}

// NewClientpacksConfig instantiates a new ClientpacksConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientpacksConfig() *ClientpacksConfig {
	this := ClientpacksConfig{}
	return &this
}

// NewClientpacksConfigWithDefaults instantiates a new ClientpacksConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientpacksConfigWithDefaults() *ClientpacksConfig {
	this := ClientpacksConfig{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ClientpacksConfig) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientpacksConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ClientpacksConfig) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ClientpacksConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetCheckedOut returns the CheckedOut field value if set, zero value otherwise.
func (o *ClientpacksConfig) GetCheckedOut() bool {
	if o == nil || o.CheckedOut == nil {
		var ret bool
		return ret
	}
	return *o.CheckedOut
}

// GetCheckedOutOk returns a tuple with the CheckedOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientpacksConfig) GetCheckedOutOk() (*bool, bool) {
	if o == nil || o.CheckedOut == nil {
		return nil, false
	}
	return o.CheckedOut, true
}

// HasCheckedOut returns a boolean if a field has been set.
func (o *ClientpacksConfig) HasCheckedOut() bool {
	if o != nil && o.CheckedOut != nil {
		return true
	}

	return false
}

// SetCheckedOut gets a reference to the given bool and assigns it to the CheckedOut field.
func (o *ClientpacksConfig) SetCheckedOut(v bool) {
	o.CheckedOut = &v
}

func (o ClientpacksConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.CheckedOut != nil {
		toSerialize["checked_out"] = o.CheckedOut
	}
	return json.Marshal(toSerialize)
}

type NullableClientpacksConfig struct {
	value *ClientpacksConfig
	isSet bool
}

func (v NullableClientpacksConfig) Get() *ClientpacksConfig {
	return v.value
}

func (v *NullableClientpacksConfig) Set(val *ClientpacksConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableClientpacksConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableClientpacksConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientpacksConfig(val *ClientpacksConfig) *NullableClientpacksConfig {
	return &NullableClientpacksConfig{value: val, isSet: true}
}

func (v NullableClientpacksConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientpacksConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


