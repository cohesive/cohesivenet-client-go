/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// PluginManagerExecutable struct for PluginManagerExecutable
type PluginManagerExecutable struct {
	Path *string `json:"path,omitempty"`
	Name *string `json:"name,omitempty"`
	// Map of \"name\" to the command for the underlying executable. For example, start -> execute would pass \"execute\" to the executable for the \"start\" command. 
	Commands *map[string]string `json:"commands,omitempty"`
}

// NewPluginManagerExecutable instantiates a new PluginManagerExecutable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginManagerExecutable() *PluginManagerExecutable {
	this := PluginManagerExecutable{}
	return &this
}

// NewPluginManagerExecutableWithDefaults instantiates a new PluginManagerExecutable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginManagerExecutableWithDefaults() *PluginManagerExecutable {
	this := PluginManagerExecutable{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *PluginManagerExecutable) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerExecutable) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *PluginManagerExecutable) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *PluginManagerExecutable) SetPath(v string) {
	o.Path = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PluginManagerExecutable) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerExecutable) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PluginManagerExecutable) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PluginManagerExecutable) SetName(v string) {
	o.Name = &v
}

// GetCommands returns the Commands field value if set, zero value otherwise.
func (o *PluginManagerExecutable) GetCommands() map[string]string {
	if o == nil || o.Commands == nil {
		var ret map[string]string
		return ret
	}
	return *o.Commands
}

// GetCommandsOk returns a tuple with the Commands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerExecutable) GetCommandsOk() (*map[string]string, bool) {
	if o == nil || o.Commands == nil {
		return nil, false
	}
	return o.Commands, true
}

// HasCommands returns a boolean if a field has been set.
func (o *PluginManagerExecutable) HasCommands() bool {
	if o != nil && o.Commands != nil {
		return true
	}

	return false
}

// SetCommands gets a reference to the given map[string]string and assigns it to the Commands field.
func (o *PluginManagerExecutable) SetCommands(v map[string]string) {
	o.Commands = &v
}

func (o PluginManagerExecutable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Commands != nil {
		toSerialize["commands"] = o.Commands
	}
	return json.Marshal(toSerialize)
}

type NullablePluginManagerExecutable struct {
	value *PluginManagerExecutable
	isSet bool
}

func (v NullablePluginManagerExecutable) Get() *PluginManagerExecutable {
	return v.value
}

func (v *NullablePluginManagerExecutable) Set(val *PluginManagerExecutable) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginManagerExecutable) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginManagerExecutable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginManagerExecutable(val *PluginManagerExecutable) *NullablePluginManagerExecutable {
	return &NullablePluginManagerExecutable{value: val, isSet: true}
}

func (v NullablePluginManagerExecutable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginManagerExecutable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


