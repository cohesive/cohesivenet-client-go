/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// PluginManagerLogFile struct for PluginManagerLogFile
type PluginManagerLogFile struct {
	Path *string `json:"path,omitempty"`
	Description *string `json:"description,omitempty"`
}

// NewPluginManagerLogFile instantiates a new PluginManagerLogFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginManagerLogFile() *PluginManagerLogFile {
	this := PluginManagerLogFile{}
	return &this
}

// NewPluginManagerLogFileWithDefaults instantiates a new PluginManagerLogFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginManagerLogFileWithDefaults() *PluginManagerLogFile {
	this := PluginManagerLogFile{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *PluginManagerLogFile) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerLogFile) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *PluginManagerLogFile) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *PluginManagerLogFile) SetPath(v string) {
	o.Path = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PluginManagerLogFile) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerLogFile) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PluginManagerLogFile) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PluginManagerLogFile) SetDescription(v string) {
	o.Description = &v
}

func (o PluginManagerLogFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullablePluginManagerLogFile struct {
	value *PluginManagerLogFile
	isSet bool
}

func (v NullablePluginManagerLogFile) Get() *PluginManagerLogFile {
	return v.value
}

func (v *NullablePluginManagerLogFile) Set(val *PluginManagerLogFile) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginManagerLogFile) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginManagerLogFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginManagerLogFile(val *PluginManagerLogFile) *NullablePluginManagerLogFile {
	return &NullablePluginManagerLogFile{value: val, isSet: true}
}

func (v NullablePluginManagerLogFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginManagerLogFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


