/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// LicenseInitial struct for LicenseInitial
type LicenseInitial struct {
	// Features available such as eBGP, CloudWAN, Containers etc.
	Capabilities []string `json:"capabilities,omitempty"`
	Finalized *bool `json:"finalized,omitempty"`
	// State of license, accepted, in-progress, failed
	License *string `json:"license,omitempty"`
	LicensePresent *bool `json:"license_present,omitempty"`
	DefaultTopology *Topology `json:"default_topology,omitempty"`
}

// NewLicenseInitial instantiates a new LicenseInitial object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseInitial() *LicenseInitial {
	this := LicenseInitial{}
	return &this
}

// NewLicenseInitialWithDefaults instantiates a new LicenseInitial object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseInitialWithDefaults() *LicenseInitial {
	this := LicenseInitial{}
	return &this
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise.
func (o *LicenseInitial) GetCapabilities() []string {
	if o == nil || o.Capabilities == nil {
		var ret []string
		return ret
	}
	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInitial) GetCapabilitiesOk() ([]string, bool) {
	if o == nil || o.Capabilities == nil {
		return nil, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *LicenseInitial) HasCapabilities() bool {
	if o != nil && o.Capabilities != nil {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given []string and assigns it to the Capabilities field.
func (o *LicenseInitial) SetCapabilities(v []string) {
	o.Capabilities = v
}

// GetFinalized returns the Finalized field value if set, zero value otherwise.
func (o *LicenseInitial) GetFinalized() bool {
	if o == nil || o.Finalized == nil {
		var ret bool
		return ret
	}
	return *o.Finalized
}

// GetFinalizedOk returns a tuple with the Finalized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInitial) GetFinalizedOk() (*bool, bool) {
	if o == nil || o.Finalized == nil {
		return nil, false
	}
	return o.Finalized, true
}

// HasFinalized returns a boolean if a field has been set.
func (o *LicenseInitial) HasFinalized() bool {
	if o != nil && o.Finalized != nil {
		return true
	}

	return false
}

// SetFinalized gets a reference to the given bool and assigns it to the Finalized field.
func (o *LicenseInitial) SetFinalized(v bool) {
	o.Finalized = &v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *LicenseInitial) GetLicense() string {
	if o == nil || o.License == nil {
		var ret string
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInitial) GetLicenseOk() (*string, bool) {
	if o == nil || o.License == nil {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *LicenseInitial) HasLicense() bool {
	if o != nil && o.License != nil {
		return true
	}

	return false
}

// SetLicense gets a reference to the given string and assigns it to the License field.
func (o *LicenseInitial) SetLicense(v string) {
	o.License = &v
}

// GetLicensePresent returns the LicensePresent field value if set, zero value otherwise.
func (o *LicenseInitial) GetLicensePresent() bool {
	if o == nil || o.LicensePresent == nil {
		var ret bool
		return ret
	}
	return *o.LicensePresent
}

// GetLicensePresentOk returns a tuple with the LicensePresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInitial) GetLicensePresentOk() (*bool, bool) {
	if o == nil || o.LicensePresent == nil {
		return nil, false
	}
	return o.LicensePresent, true
}

// HasLicensePresent returns a boolean if a field has been set.
func (o *LicenseInitial) HasLicensePresent() bool {
	if o != nil && o.LicensePresent != nil {
		return true
	}

	return false
}

// SetLicensePresent gets a reference to the given bool and assigns it to the LicensePresent field.
func (o *LicenseInitial) SetLicensePresent(v bool) {
	o.LicensePresent = &v
}

// GetDefaultTopology returns the DefaultTopology field value if set, zero value otherwise.
func (o *LicenseInitial) GetDefaultTopology() Topology {
	if o == nil || o.DefaultTopology == nil {
		var ret Topology
		return ret
	}
	return *o.DefaultTopology
}

// GetDefaultTopologyOk returns a tuple with the DefaultTopology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInitial) GetDefaultTopologyOk() (*Topology, bool) {
	if o == nil || o.DefaultTopology == nil {
		return nil, false
	}
	return o.DefaultTopology, true
}

// HasDefaultTopology returns a boolean if a field has been set.
func (o *LicenseInitial) HasDefaultTopology() bool {
	if o != nil && o.DefaultTopology != nil {
		return true
	}

	return false
}

// SetDefaultTopology gets a reference to the given Topology and assigns it to the DefaultTopology field.
func (o *LicenseInitial) SetDefaultTopology(v Topology) {
	o.DefaultTopology = &v
}

func (o LicenseInitial) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Capabilities != nil {
		toSerialize["capabilities"] = o.Capabilities
	}
	if o.Finalized != nil {
		toSerialize["finalized"] = o.Finalized
	}
	if o.License != nil {
		toSerialize["license"] = o.License
	}
	if o.LicensePresent != nil {
		toSerialize["license_present"] = o.LicensePresent
	}
	if o.DefaultTopology != nil {
		toSerialize["default_topology"] = o.DefaultTopology
	}
	return json.Marshal(toSerialize)
}

type NullableLicenseInitial struct {
	value *LicenseInitial
	isSet bool
}

func (v NullableLicenseInitial) Get() *LicenseInitial {
	return v.value
}

func (v *NullableLicenseInitial) Set(val *LicenseInitial) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseInitial) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseInitial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseInitial(val *LicenseInitial) *NullableLicenseInitial {
	return &NullableLicenseInitial{value: val, isSet: true}
}

func (v NullableLicenseInitial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseInitial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


