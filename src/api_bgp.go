/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// BGPApiService BGPApi service
type BGPApiService service

type ApiCreateBgpPeerRequest struct {
	ctx context.Context
	ApiService *BGPApiService
	endpointId int32
	createBGPPeerRequest *CreateBGPPeerRequest
}

func (r ApiCreateBgpPeerRequest) CreateBGPPeerRequest(createBGPPeerRequest CreateBGPPeerRequest) ApiCreateBgpPeerRequest {
	r.createBGPPeerRequest = &createBGPPeerRequest
	return r
}

func (r ApiCreateBgpPeerRequest) Execute() (*Object, *http.Response, error) {
	return r.ApiService.CreateBgpPeerExecute(r)
}

/*
CreateBgpPeer Create BGP Peer

Create new BGP peer connection for IPsec endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param endpointId ID for IPsec endpoint
 @return ApiCreateBgpPeerRequest
*/
func (a *BGPApiService) CreateBgpPeer(ctx context.Context, endpointId int32) ApiCreateBgpPeerRequest {
	return ApiCreateBgpPeerRequest{
		ApiService: a,
		ctx: ctx,
		endpointId: endpointId,
	}
}

// Execute executes the request
//  @return Object
func (a *BGPApiService) CreateBgpPeerExecute(r ApiCreateBgpPeerRequest) (*Object, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Object
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BGPApiService.CreateBgpPeer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipsec/endpoints/{endpoint_id}/ebgp_peers"
	localVarPath = strings.Replace(localVarPath, "{"+"endpoint_id"+"}", url.PathEscape(parameterToString(r.endpointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.endpointId < 1 {
		return localVarReturnValue, nil, reportError("endpointId must be greater than 1")
	}
	if r.createBGPPeerRequest == nil {
		return localVarReturnValue, nil, reportError("createBGPPeerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createBGPPeerRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Object
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteBgpPeerRequest struct {
	ctx context.Context
	ApiService *BGPApiService
	endpointId int32
	bgpPeerId int32
}

func (r ApiDeleteBgpPeerRequest) Execute() (*Object, *http.Response, error) {
	return r.ApiService.DeleteBgpPeerExecute(r)
}

/*
DeleteBgpPeer Delete BGP Peer

Delete BGP Peer connection for IPsec endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param endpointId ID for IPsec endpoint
 @param bgpPeerId ID for BGP peer
 @return ApiDeleteBgpPeerRequest
*/
func (a *BGPApiService) DeleteBgpPeer(ctx context.Context, endpointId int32, bgpPeerId int32) ApiDeleteBgpPeerRequest {
	return ApiDeleteBgpPeerRequest{
		ApiService: a,
		ctx: ctx,
		endpointId: endpointId,
		bgpPeerId: bgpPeerId,
	}
}

// Execute executes the request
//  @return Object
func (a *BGPApiService) DeleteBgpPeerExecute(r ApiDeleteBgpPeerRequest) (*Object, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Object
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BGPApiService.DeleteBgpPeer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipsec/endpoints/{endpoint_id}/ebgp_peers/{bgp_peer_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"endpoint_id"+"}", url.PathEscape(parameterToString(r.endpointId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bgp_peer_id"+"}", url.PathEscape(parameterToString(r.bgpPeerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.endpointId < 1 {
		return localVarReturnValue, nil, reportError("endpointId must be greater than 1")
	}
	if r.bgpPeerId < 1 {
		return localVarReturnValue, nil, reportError("bgpPeerId must be greater than 1")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Object
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBgpPeerRequest struct {
	ctx context.Context
	ApiService *BGPApiService
	endpointId int32
	bgpPeerId int32
	verbose *bool
}

// True for verbose output
func (r ApiGetBgpPeerRequest) Verbose(verbose bool) ApiGetBgpPeerRequest {
	r.verbose = &verbose
	return r
}

func (r ApiGetBgpPeerRequest) Execute() (*BGPPeerResponse, *http.Response, error) {
	return r.ApiService.GetBgpPeerExecute(r)
}

/*
GetBgpPeer Get eBGP peer

Get eBGP peer details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param endpointId ID for IPsec endpoint
 @param bgpPeerId ID for BGP peer
 @return ApiGetBgpPeerRequest
*/
func (a *BGPApiService) GetBgpPeer(ctx context.Context, endpointId int32, bgpPeerId int32) ApiGetBgpPeerRequest {
	return ApiGetBgpPeerRequest{
		ApiService: a,
		ctx: ctx,
		endpointId: endpointId,
		bgpPeerId: bgpPeerId,
	}
}

// Execute executes the request
//  @return BGPPeerResponse
func (a *BGPApiService) GetBgpPeerExecute(r ApiGetBgpPeerRequest) (*BGPPeerResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BGPPeerResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BGPApiService.GetBgpPeer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipsec/endpoints/{endpoint_id}/ebgp_peers/{bgp_peer_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"endpoint_id"+"}", url.PathEscape(parameterToString(r.endpointId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bgp_peer_id"+"}", url.PathEscape(parameterToString(r.bgpPeerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.endpointId < 1 {
		return localVarReturnValue, nil, reportError("endpointId must be greater than 1")
	}
	if r.bgpPeerId < 1 {
		return localVarReturnValue, nil, reportError("bgpPeerId must be greater than 1")
	}

	if r.verbose != nil {
		localVarQueryParams.Add("verbose", parameterToString(*r.verbose, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateBgpPeerRequest struct {
	ctx context.Context
	ApiService *BGPApiService
	endpointId int32
	bgpPeerId int32
	updateBGPPeerRequest *UpdateBGPPeerRequest
}

func (r ApiUpdateBgpPeerRequest) UpdateBGPPeerRequest(updateBGPPeerRequest UpdateBGPPeerRequest) ApiUpdateBgpPeerRequest {
	r.updateBGPPeerRequest = &updateBGPPeerRequest
	return r
}

func (r ApiUpdateBgpPeerRequest) Execute() (*Object, *http.Response, error) {
	return r.ApiService.UpdateBgpPeerExecute(r)
}

/*
UpdateBgpPeer Update BGP Peer

Edit IPsec endpoint BGP peer connection parameters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param endpointId ID for IPsec endpoint
 @param bgpPeerId ID for BGP peer
 @return ApiUpdateBgpPeerRequest
*/
func (a *BGPApiService) UpdateBgpPeer(ctx context.Context, endpointId int32, bgpPeerId int32) ApiUpdateBgpPeerRequest {
	return ApiUpdateBgpPeerRequest{
		ApiService: a,
		ctx: ctx,
		endpointId: endpointId,
		bgpPeerId: bgpPeerId,
	}
}

// Execute executes the request
//  @return Object
func (a *BGPApiService) UpdateBgpPeerExecute(r ApiUpdateBgpPeerRequest) (*Object, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Object
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BGPApiService.UpdateBgpPeer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ipsec/endpoints/{endpoint_id}/ebgp_peers/{bgp_peer_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"endpoint_id"+"}", url.PathEscape(parameterToString(r.endpointId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"bgp_peer_id"+"}", url.PathEscape(parameterToString(r.bgpPeerId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.endpointId < 1 {
		return localVarReturnValue, nil, reportError("endpointId must be greater than 1")
	}
	if r.bgpPeerId < 1 {
		return localVarReturnValue, nil, reportError("bgpPeerId must be greater than 1")
	}
	if r.updateBGPPeerRequest == nil {
		return localVarReturnValue, nil, reportError("updateBGPPeerRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateBGPPeerRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Object
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
