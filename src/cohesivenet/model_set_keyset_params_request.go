/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// SetKeysetParamsRequest struct for SetKeysetParamsRequest
type SetKeysetParamsRequest struct {
	// If provided, fetches keyset from source manager
	Source *string `json:"source,omitempty"`
	// Arbitrary key used to help randomize the checksum, it must be identical for each manager in a topology.
	Token string `json:"token"`
	// Name for the topology
	TopologyName *string `json:"topology_name,omitempty"`
}

// NewSetKeysetParamsRequest instantiates a new SetKeysetParamsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetKeysetParamsRequest(token string) *SetKeysetParamsRequest {
	this := SetKeysetParamsRequest{}
	this.Token = token
	return &this
}

// NewSetKeysetParamsRequestWithDefaults instantiates a new SetKeysetParamsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetKeysetParamsRequestWithDefaults() *SetKeysetParamsRequest {
	this := SetKeysetParamsRequest{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SetKeysetParamsRequest) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetKeysetParamsRequest) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SetKeysetParamsRequest) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *SetKeysetParamsRequest) SetSource(v string) {
	o.Source = &v
}

// GetToken returns the Token field value
func (o *SetKeysetParamsRequest) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *SetKeysetParamsRequest) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *SetKeysetParamsRequest) SetToken(v string) {
	o.Token = v
}

// GetTopologyName returns the TopologyName field value if set, zero value otherwise.
func (o *SetKeysetParamsRequest) GetTopologyName() string {
	if o == nil || o.TopologyName == nil {
		var ret string
		return ret
	}
	return *o.TopologyName
}

// GetTopologyNameOk returns a tuple with the TopologyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetKeysetParamsRequest) GetTopologyNameOk() (*string, bool) {
	if o == nil || o.TopologyName == nil {
		return nil, false
	}
	return o.TopologyName, true
}

// HasTopologyName returns a boolean if a field has been set.
func (o *SetKeysetParamsRequest) HasTopologyName() bool {
	if o != nil && o.TopologyName != nil {
		return true
	}

	return false
}

// SetTopologyName gets a reference to the given string and assigns it to the TopologyName field.
func (o *SetKeysetParamsRequest) SetTopologyName(v string) {
	o.TopologyName = &v
}

func (o SetKeysetParamsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["token"] = o.Token
	}
	if o.TopologyName != nil {
		toSerialize["topology_name"] = o.TopologyName
	}
	return json.Marshal(toSerialize)
}

type NullableSetKeysetParamsRequest struct {
	value *SetKeysetParamsRequest
	isSet bool
}

func (v NullableSetKeysetParamsRequest) Get() *SetKeysetParamsRequest {
	return v.value
}

func (v *NullableSetKeysetParamsRequest) Set(val *SetKeysetParamsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetKeysetParamsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetKeysetParamsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetKeysetParamsRequest(val *SetKeysetParamsRequest) *NullableSetKeysetParamsRequest {
	return &NullableSetKeysetParamsRequest{value: val, isSet: true}
}

func (v NullableSetKeysetParamsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetKeysetParamsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


