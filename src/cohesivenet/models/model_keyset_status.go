/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// KeysetStatus struct for KeysetStatus
type KeysetStatus struct {
	InProgress *bool `json:"in_progress,omitempty"`
	Running *int32 `json:"running,omitempty"`
	KeysetPresent *bool `json:"keyset_present,omitempty"`
	Checksum *string `json:"checksum,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	CreatedAtI *int32 `json:"created_at_i,omitempty"`
	StartedAt *string `json:"started_at,omitempty"`
	StartedAtI *int32 `json:"started_at_i,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
}

// NewKeysetStatus instantiates a new KeysetStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeysetStatus() *KeysetStatus {
	this := KeysetStatus{}
	return &this
}

// NewKeysetStatusWithDefaults instantiates a new KeysetStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeysetStatusWithDefaults() *KeysetStatus {
	this := KeysetStatus{}
	return &this
}

// GetInProgress returns the InProgress field value if set, zero value otherwise.
func (o *KeysetStatus) GetInProgress() bool {
	if o == nil || o.InProgress == nil {
		var ret bool
		return ret
	}
	return *o.InProgress
}

// GetInProgressOk returns a tuple with the InProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysetStatus) GetInProgressOk() (*bool, bool) {
	if o == nil || o.InProgress == nil {
		return nil, false
	}
	return o.InProgress, true
}

// HasInProgress returns a boolean if a field has been set.
func (o *KeysetStatus) HasInProgress() bool {
	if o != nil && o.InProgress != nil {
		return true
	}

	return false
}

// SetInProgress gets a reference to the given bool and assigns it to the InProgress field.
func (o *KeysetStatus) SetInProgress(v bool) {
	o.InProgress = &v
}

// GetRunning returns the Running field value if set, zero value otherwise.
func (o *KeysetStatus) GetRunning() int32 {
	if o == nil || o.Running == nil {
		var ret int32
		return ret
	}
	return *o.Running
}

// GetRunningOk returns a tuple with the Running field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysetStatus) GetRunningOk() (*int32, bool) {
	if o == nil || o.Running == nil {
		return nil, false
	}
	return o.Running, true
}

// HasRunning returns a boolean if a field has been set.
func (o *KeysetStatus) HasRunning() bool {
	if o != nil && o.Running != nil {
		return true
	}

	return false
}

// SetRunning gets a reference to the given int32 and assigns it to the Running field.
func (o *KeysetStatus) SetRunning(v int32) {
	o.Running = &v
}

// GetKeysetPresent returns the KeysetPresent field value if set, zero value otherwise.
func (o *KeysetStatus) GetKeysetPresent() bool {
	if o == nil || o.KeysetPresent == nil {
		var ret bool
		return ret
	}
	return *o.KeysetPresent
}

// GetKeysetPresentOk returns a tuple with the KeysetPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysetStatus) GetKeysetPresentOk() (*bool, bool) {
	if o == nil || o.KeysetPresent == nil {
		return nil, false
	}
	return o.KeysetPresent, true
}

// HasKeysetPresent returns a boolean if a field has been set.
func (o *KeysetStatus) HasKeysetPresent() bool {
	if o != nil && o.KeysetPresent != nil {
		return true
	}

	return false
}

// SetKeysetPresent gets a reference to the given bool and assigns it to the KeysetPresent field.
func (o *KeysetStatus) SetKeysetPresent(v bool) {
	o.KeysetPresent = &v
}

// GetChecksum returns the Checksum field value if set, zero value otherwise.
func (o *KeysetStatus) GetChecksum() string {
	if o == nil || o.Checksum == nil {
		var ret string
		return ret
	}
	return *o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysetStatus) GetChecksumOk() (*string, bool) {
	if o == nil || o.Checksum == nil {
		return nil, false
	}
	return o.Checksum, true
}

// HasChecksum returns a boolean if a field has been set.
func (o *KeysetStatus) HasChecksum() bool {
	if o != nil && o.Checksum != nil {
		return true
	}

	return false
}

// SetChecksum gets a reference to the given string and assigns it to the Checksum field.
func (o *KeysetStatus) SetChecksum(v string) {
	o.Checksum = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *KeysetStatus) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysetStatus) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *KeysetStatus) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *KeysetStatus) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCreatedAtI returns the CreatedAtI field value if set, zero value otherwise.
func (o *KeysetStatus) GetCreatedAtI() int32 {
	if o == nil || o.CreatedAtI == nil {
		var ret int32
		return ret
	}
	return *o.CreatedAtI
}

// GetCreatedAtIOk returns a tuple with the CreatedAtI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysetStatus) GetCreatedAtIOk() (*int32, bool) {
	if o == nil || o.CreatedAtI == nil {
		return nil, false
	}
	return o.CreatedAtI, true
}

// HasCreatedAtI returns a boolean if a field has been set.
func (o *KeysetStatus) HasCreatedAtI() bool {
	if o != nil && o.CreatedAtI != nil {
		return true
	}

	return false
}

// SetCreatedAtI gets a reference to the given int32 and assigns it to the CreatedAtI field.
func (o *KeysetStatus) SetCreatedAtI(v int32) {
	o.CreatedAtI = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *KeysetStatus) GetStartedAt() string {
	if o == nil || o.StartedAt == nil {
		var ret string
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysetStatus) GetStartedAtOk() (*string, bool) {
	if o == nil || o.StartedAt == nil {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *KeysetStatus) HasStartedAt() bool {
	if o != nil && o.StartedAt != nil {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given string and assigns it to the StartedAt field.
func (o *KeysetStatus) SetStartedAt(v string) {
	o.StartedAt = &v
}

// GetStartedAtI returns the StartedAtI field value if set, zero value otherwise.
func (o *KeysetStatus) GetStartedAtI() int32 {
	if o == nil || o.StartedAtI == nil {
		var ret int32
		return ret
	}
	return *o.StartedAtI
}

// GetStartedAtIOk returns a tuple with the StartedAtI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysetStatus) GetStartedAtIOk() (*int32, bool) {
	if o == nil || o.StartedAtI == nil {
		return nil, false
	}
	return o.StartedAtI, true
}

// HasStartedAtI returns a boolean if a field has been set.
func (o *KeysetStatus) HasStartedAtI() bool {
	if o != nil && o.StartedAtI != nil {
		return true
	}

	return false
}

// SetStartedAtI gets a reference to the given int32 and assigns it to the StartedAtI field.
func (o *KeysetStatus) SetStartedAtI(v int32) {
	o.StartedAtI = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *KeysetStatus) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysetStatus) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *KeysetStatus) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *KeysetStatus) SetUuid(v string) {
	o.Uuid = &v
}

func (o KeysetStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InProgress != nil {
		toSerialize["in_progress"] = o.InProgress
	}
	if o.Running != nil {
		toSerialize["running"] = o.Running
	}
	if o.KeysetPresent != nil {
		toSerialize["keyset_present"] = o.KeysetPresent
	}
	if o.Checksum != nil {
		toSerialize["checksum"] = o.Checksum
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.CreatedAtI != nil {
		toSerialize["created_at_i"] = o.CreatedAtI
	}
	if o.StartedAt != nil {
		toSerialize["started_at"] = o.StartedAt
	}
	if o.StartedAtI != nil {
		toSerialize["started_at_i"] = o.StartedAtI
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	return json.Marshal(toSerialize)
}

type NullableKeysetStatus struct {
	value *KeysetStatus
	isSet bool
}

func (v NullableKeysetStatus) Get() *KeysetStatus {
	return v.value
}

func (v *NullableKeysetStatus) Set(val *KeysetStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableKeysetStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableKeysetStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeysetStatus(val *KeysetStatus) *NullableKeysetStatus {
	return &NullableKeysetStatus{value: val, isSet: true}
}

func (v NullableKeysetStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeysetStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


