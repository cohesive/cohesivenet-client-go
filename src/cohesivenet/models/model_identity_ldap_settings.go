/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet_models

import (
	"encoding/json"
)

// IdentityLdapSettings struct for IdentityLdapSettings
type IdentityLdapSettings struct {
	// IP address or resolvable hostname
	Host *string `json:"host,omitempty"`
	Port *int32 `json:"port,omitempty"`
	// Use SSL
	Encrypt *bool `json:"encrypt,omitempty"`
	// Use LDAPS or start TLS
	EncryptLdaps *bool `json:"encrypt_ldaps,omitempty"`
	// Use certificates to authenticate via encrypted connection
	EncryptAuth *bool `json:"encrypt_auth,omitempty"`
	EncryptAuthKey *bool `json:"encrypt_auth_key,omitempty"`
	EncryptAuthCert *bool `json:"encrypt_auth_cert,omitempty"`
	// Verify certicate using authority
	EncryptVerifyCa *bool `json:"encrypt_verify_ca,omitempty"`
	EncryptCaCert *bool `json:"encrypt_ca_cert,omitempty"`
	// Bind username
	Binddn *string `json:"binddn,omitempty"`
	// Bind password
	Bindpw *string `json:"bindpw,omitempty"`
	// Authentication certificate text content to use, empty to delete
	EncryptAuthCertData *string `json:"encrypt_auth_cert_data,omitempty"`
	// Authentication certificate filename
	EncryptAuthCertFilename *string `json:"encrypt_auth_cert_filename,omitempty"`
	// Authentication key text content to use, empty to delete
	EncryptAuthKeyData *string `json:"encrypt_auth_key_data,omitempty"`
	// Authentication key filename
	EncryptAuthKeyFilename *string `json:"encrypt_auth_key_filename,omitempty"`
	// CA certificate text content to use, empty to delete
	EncryptCaCertData *string `json:"encrypt_ca_cert_data,omitempty"`
	// CA certificate filename
	EncryptCaCertFilename *string `json:"encrypt_ca_cert_filename,omitempty"`
	// Base DN from which to search for Users
	UserBase *string `json:"user_base,omitempty"`
	// Attribute type for the Users
	UserIdAttribute *string `json:"user_id_attribute,omitempty"`
	// Search filter for Users
	UserListFilter *string `json:"user_list_filter,omitempty"`
	// Base DN from which to search for Groups
	GroupBase *string `json:"group_base,omitempty"`
	// Attribute type for the Groups
	GroupIdAttribute *string `json:"group_id_attribute,omitempty"`
	// Search filter for Groups
	GroupListFilter *string `json:"group_list_filter,omitempty"`
	// Attribute used to search for a user within the Group
	GroupMemberAttribute *string `json:"group_member_attribute,omitempty"`
	// UserID or UserDN
	GroupMemberAttrFormat *string `json:"group_member_attr_format,omitempty"`
	// base, single or subtree
	GroupSearchScope *string `json:"group_search_scope,omitempty"`
	// Use OTP code
	Otp *bool `json:"otp,omitempty"`
	OtpUrl *string `json:"otp_url,omitempty"`
}

// NewIdentityLdapSettings instantiates a new IdentityLdapSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityLdapSettings() *IdentityLdapSettings {
	this := IdentityLdapSettings{}
	var encryptAuthCertFilename string = "tls.cert"
	this.EncryptAuthCertFilename = &encryptAuthCertFilename
	var encryptAuthKeyFilename string = "tls.key"
	this.EncryptAuthKeyFilename = &encryptAuthKeyFilename
	var encryptCaCertFilename string = "ca.pem"
	this.EncryptCaCertFilename = &encryptCaCertFilename
	return &this
}

// NewIdentityLdapSettingsWithDefaults instantiates a new IdentityLdapSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityLdapSettingsWithDefaults() *IdentityLdapSettings {
	this := IdentityLdapSettings{}
	var encryptAuthCertFilename string = "tls.cert"
	this.EncryptAuthCertFilename = &encryptAuthCertFilename
	var encryptAuthKeyFilename string = "tls.key"
	this.EncryptAuthKeyFilename = &encryptAuthKeyFilename
	var encryptCaCertFilename string = "ca.pem"
	this.EncryptCaCertFilename = &encryptCaCertFilename
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetHost() string {
	if o == nil || o.Host == nil {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetHostOk() (*string, bool) {
	if o == nil || o.Host == nil {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasHost() bool {
	if o != nil && o.Host != nil {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *IdentityLdapSettings) SetHost(v string) {
	o.Host = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *IdentityLdapSettings) SetPort(v int32) {
	o.Port = &v
}

// GetEncrypt returns the Encrypt field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetEncrypt() bool {
	if o == nil || o.Encrypt == nil {
		var ret bool
		return ret
	}
	return *o.Encrypt
}

// GetEncryptOk returns a tuple with the Encrypt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetEncryptOk() (*bool, bool) {
	if o == nil || o.Encrypt == nil {
		return nil, false
	}
	return o.Encrypt, true
}

// HasEncrypt returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasEncrypt() bool {
	if o != nil && o.Encrypt != nil {
		return true
	}

	return false
}

// SetEncrypt gets a reference to the given bool and assigns it to the Encrypt field.
func (o *IdentityLdapSettings) SetEncrypt(v bool) {
	o.Encrypt = &v
}

// GetEncryptLdaps returns the EncryptLdaps field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetEncryptLdaps() bool {
	if o == nil || o.EncryptLdaps == nil {
		var ret bool
		return ret
	}
	return *o.EncryptLdaps
}

// GetEncryptLdapsOk returns a tuple with the EncryptLdaps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetEncryptLdapsOk() (*bool, bool) {
	if o == nil || o.EncryptLdaps == nil {
		return nil, false
	}
	return o.EncryptLdaps, true
}

// HasEncryptLdaps returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasEncryptLdaps() bool {
	if o != nil && o.EncryptLdaps != nil {
		return true
	}

	return false
}

// SetEncryptLdaps gets a reference to the given bool and assigns it to the EncryptLdaps field.
func (o *IdentityLdapSettings) SetEncryptLdaps(v bool) {
	o.EncryptLdaps = &v
}

// GetEncryptAuth returns the EncryptAuth field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetEncryptAuth() bool {
	if o == nil || o.EncryptAuth == nil {
		var ret bool
		return ret
	}
	return *o.EncryptAuth
}

// GetEncryptAuthOk returns a tuple with the EncryptAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetEncryptAuthOk() (*bool, bool) {
	if o == nil || o.EncryptAuth == nil {
		return nil, false
	}
	return o.EncryptAuth, true
}

// HasEncryptAuth returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasEncryptAuth() bool {
	if o != nil && o.EncryptAuth != nil {
		return true
	}

	return false
}

// SetEncryptAuth gets a reference to the given bool and assigns it to the EncryptAuth field.
func (o *IdentityLdapSettings) SetEncryptAuth(v bool) {
	o.EncryptAuth = &v
}

// GetEncryptAuthKey returns the EncryptAuthKey field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetEncryptAuthKey() bool {
	if o == nil || o.EncryptAuthKey == nil {
		var ret bool
		return ret
	}
	return *o.EncryptAuthKey
}

// GetEncryptAuthKeyOk returns a tuple with the EncryptAuthKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetEncryptAuthKeyOk() (*bool, bool) {
	if o == nil || o.EncryptAuthKey == nil {
		return nil, false
	}
	return o.EncryptAuthKey, true
}

// HasEncryptAuthKey returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasEncryptAuthKey() bool {
	if o != nil && o.EncryptAuthKey != nil {
		return true
	}

	return false
}

// SetEncryptAuthKey gets a reference to the given bool and assigns it to the EncryptAuthKey field.
func (o *IdentityLdapSettings) SetEncryptAuthKey(v bool) {
	o.EncryptAuthKey = &v
}

// GetEncryptAuthCert returns the EncryptAuthCert field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetEncryptAuthCert() bool {
	if o == nil || o.EncryptAuthCert == nil {
		var ret bool
		return ret
	}
	return *o.EncryptAuthCert
}

// GetEncryptAuthCertOk returns a tuple with the EncryptAuthCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetEncryptAuthCertOk() (*bool, bool) {
	if o == nil || o.EncryptAuthCert == nil {
		return nil, false
	}
	return o.EncryptAuthCert, true
}

// HasEncryptAuthCert returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasEncryptAuthCert() bool {
	if o != nil && o.EncryptAuthCert != nil {
		return true
	}

	return false
}

// SetEncryptAuthCert gets a reference to the given bool and assigns it to the EncryptAuthCert field.
func (o *IdentityLdapSettings) SetEncryptAuthCert(v bool) {
	o.EncryptAuthCert = &v
}

// GetEncryptVerifyCa returns the EncryptVerifyCa field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetEncryptVerifyCa() bool {
	if o == nil || o.EncryptVerifyCa == nil {
		var ret bool
		return ret
	}
	return *o.EncryptVerifyCa
}

// GetEncryptVerifyCaOk returns a tuple with the EncryptVerifyCa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetEncryptVerifyCaOk() (*bool, bool) {
	if o == nil || o.EncryptVerifyCa == nil {
		return nil, false
	}
	return o.EncryptVerifyCa, true
}

// HasEncryptVerifyCa returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasEncryptVerifyCa() bool {
	if o != nil && o.EncryptVerifyCa != nil {
		return true
	}

	return false
}

// SetEncryptVerifyCa gets a reference to the given bool and assigns it to the EncryptVerifyCa field.
func (o *IdentityLdapSettings) SetEncryptVerifyCa(v bool) {
	o.EncryptVerifyCa = &v
}

// GetEncryptCaCert returns the EncryptCaCert field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetEncryptCaCert() bool {
	if o == nil || o.EncryptCaCert == nil {
		var ret bool
		return ret
	}
	return *o.EncryptCaCert
}

// GetEncryptCaCertOk returns a tuple with the EncryptCaCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetEncryptCaCertOk() (*bool, bool) {
	if o == nil || o.EncryptCaCert == nil {
		return nil, false
	}
	return o.EncryptCaCert, true
}

// HasEncryptCaCert returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasEncryptCaCert() bool {
	if o != nil && o.EncryptCaCert != nil {
		return true
	}

	return false
}

// SetEncryptCaCert gets a reference to the given bool and assigns it to the EncryptCaCert field.
func (o *IdentityLdapSettings) SetEncryptCaCert(v bool) {
	o.EncryptCaCert = &v
}

// GetBinddn returns the Binddn field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetBinddn() string {
	if o == nil || o.Binddn == nil {
		var ret string
		return ret
	}
	return *o.Binddn
}

// GetBinddnOk returns a tuple with the Binddn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetBinddnOk() (*string, bool) {
	if o == nil || o.Binddn == nil {
		return nil, false
	}
	return o.Binddn, true
}

// HasBinddn returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasBinddn() bool {
	if o != nil && o.Binddn != nil {
		return true
	}

	return false
}

// SetBinddn gets a reference to the given string and assigns it to the Binddn field.
func (o *IdentityLdapSettings) SetBinddn(v string) {
	o.Binddn = &v
}

// GetBindpw returns the Bindpw field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetBindpw() string {
	if o == nil || o.Bindpw == nil {
		var ret string
		return ret
	}
	return *o.Bindpw
}

// GetBindpwOk returns a tuple with the Bindpw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetBindpwOk() (*string, bool) {
	if o == nil || o.Bindpw == nil {
		return nil, false
	}
	return o.Bindpw, true
}

// HasBindpw returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasBindpw() bool {
	if o != nil && o.Bindpw != nil {
		return true
	}

	return false
}

// SetBindpw gets a reference to the given string and assigns it to the Bindpw field.
func (o *IdentityLdapSettings) SetBindpw(v string) {
	o.Bindpw = &v
}

// GetEncryptAuthCertData returns the EncryptAuthCertData field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetEncryptAuthCertData() string {
	if o == nil || o.EncryptAuthCertData == nil {
		var ret string
		return ret
	}
	return *o.EncryptAuthCertData
}

// GetEncryptAuthCertDataOk returns a tuple with the EncryptAuthCertData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetEncryptAuthCertDataOk() (*string, bool) {
	if o == nil || o.EncryptAuthCertData == nil {
		return nil, false
	}
	return o.EncryptAuthCertData, true
}

// HasEncryptAuthCertData returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasEncryptAuthCertData() bool {
	if o != nil && o.EncryptAuthCertData != nil {
		return true
	}

	return false
}

// SetEncryptAuthCertData gets a reference to the given string and assigns it to the EncryptAuthCertData field.
func (o *IdentityLdapSettings) SetEncryptAuthCertData(v string) {
	o.EncryptAuthCertData = &v
}

// GetEncryptAuthCertFilename returns the EncryptAuthCertFilename field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetEncryptAuthCertFilename() string {
	if o == nil || o.EncryptAuthCertFilename == nil {
		var ret string
		return ret
	}
	return *o.EncryptAuthCertFilename
}

// GetEncryptAuthCertFilenameOk returns a tuple with the EncryptAuthCertFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetEncryptAuthCertFilenameOk() (*string, bool) {
	if o == nil || o.EncryptAuthCertFilename == nil {
		return nil, false
	}
	return o.EncryptAuthCertFilename, true
}

// HasEncryptAuthCertFilename returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasEncryptAuthCertFilename() bool {
	if o != nil && o.EncryptAuthCertFilename != nil {
		return true
	}

	return false
}

// SetEncryptAuthCertFilename gets a reference to the given string and assigns it to the EncryptAuthCertFilename field.
func (o *IdentityLdapSettings) SetEncryptAuthCertFilename(v string) {
	o.EncryptAuthCertFilename = &v
}

// GetEncryptAuthKeyData returns the EncryptAuthKeyData field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetEncryptAuthKeyData() string {
	if o == nil || o.EncryptAuthKeyData == nil {
		var ret string
		return ret
	}
	return *o.EncryptAuthKeyData
}

// GetEncryptAuthKeyDataOk returns a tuple with the EncryptAuthKeyData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetEncryptAuthKeyDataOk() (*string, bool) {
	if o == nil || o.EncryptAuthKeyData == nil {
		return nil, false
	}
	return o.EncryptAuthKeyData, true
}

// HasEncryptAuthKeyData returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasEncryptAuthKeyData() bool {
	if o != nil && o.EncryptAuthKeyData != nil {
		return true
	}

	return false
}

// SetEncryptAuthKeyData gets a reference to the given string and assigns it to the EncryptAuthKeyData field.
func (o *IdentityLdapSettings) SetEncryptAuthKeyData(v string) {
	o.EncryptAuthKeyData = &v
}

// GetEncryptAuthKeyFilename returns the EncryptAuthKeyFilename field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetEncryptAuthKeyFilename() string {
	if o == nil || o.EncryptAuthKeyFilename == nil {
		var ret string
		return ret
	}
	return *o.EncryptAuthKeyFilename
}

// GetEncryptAuthKeyFilenameOk returns a tuple with the EncryptAuthKeyFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetEncryptAuthKeyFilenameOk() (*string, bool) {
	if o == nil || o.EncryptAuthKeyFilename == nil {
		return nil, false
	}
	return o.EncryptAuthKeyFilename, true
}

// HasEncryptAuthKeyFilename returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasEncryptAuthKeyFilename() bool {
	if o != nil && o.EncryptAuthKeyFilename != nil {
		return true
	}

	return false
}

// SetEncryptAuthKeyFilename gets a reference to the given string and assigns it to the EncryptAuthKeyFilename field.
func (o *IdentityLdapSettings) SetEncryptAuthKeyFilename(v string) {
	o.EncryptAuthKeyFilename = &v
}

// GetEncryptCaCertData returns the EncryptCaCertData field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetEncryptCaCertData() string {
	if o == nil || o.EncryptCaCertData == nil {
		var ret string
		return ret
	}
	return *o.EncryptCaCertData
}

// GetEncryptCaCertDataOk returns a tuple with the EncryptCaCertData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetEncryptCaCertDataOk() (*string, bool) {
	if o == nil || o.EncryptCaCertData == nil {
		return nil, false
	}
	return o.EncryptCaCertData, true
}

// HasEncryptCaCertData returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasEncryptCaCertData() bool {
	if o != nil && o.EncryptCaCertData != nil {
		return true
	}

	return false
}

// SetEncryptCaCertData gets a reference to the given string and assigns it to the EncryptCaCertData field.
func (o *IdentityLdapSettings) SetEncryptCaCertData(v string) {
	o.EncryptCaCertData = &v
}

// GetEncryptCaCertFilename returns the EncryptCaCertFilename field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetEncryptCaCertFilename() string {
	if o == nil || o.EncryptCaCertFilename == nil {
		var ret string
		return ret
	}
	return *o.EncryptCaCertFilename
}

// GetEncryptCaCertFilenameOk returns a tuple with the EncryptCaCertFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetEncryptCaCertFilenameOk() (*string, bool) {
	if o == nil || o.EncryptCaCertFilename == nil {
		return nil, false
	}
	return o.EncryptCaCertFilename, true
}

// HasEncryptCaCertFilename returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasEncryptCaCertFilename() bool {
	if o != nil && o.EncryptCaCertFilename != nil {
		return true
	}

	return false
}

// SetEncryptCaCertFilename gets a reference to the given string and assigns it to the EncryptCaCertFilename field.
func (o *IdentityLdapSettings) SetEncryptCaCertFilename(v string) {
	o.EncryptCaCertFilename = &v
}

// GetUserBase returns the UserBase field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetUserBase() string {
	if o == nil || o.UserBase == nil {
		var ret string
		return ret
	}
	return *o.UserBase
}

// GetUserBaseOk returns a tuple with the UserBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetUserBaseOk() (*string, bool) {
	if o == nil || o.UserBase == nil {
		return nil, false
	}
	return o.UserBase, true
}

// HasUserBase returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasUserBase() bool {
	if o != nil && o.UserBase != nil {
		return true
	}

	return false
}

// SetUserBase gets a reference to the given string and assigns it to the UserBase field.
func (o *IdentityLdapSettings) SetUserBase(v string) {
	o.UserBase = &v
}

// GetUserIdAttribute returns the UserIdAttribute field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetUserIdAttribute() string {
	if o == nil || o.UserIdAttribute == nil {
		var ret string
		return ret
	}
	return *o.UserIdAttribute
}

// GetUserIdAttributeOk returns a tuple with the UserIdAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetUserIdAttributeOk() (*string, bool) {
	if o == nil || o.UserIdAttribute == nil {
		return nil, false
	}
	return o.UserIdAttribute, true
}

// HasUserIdAttribute returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasUserIdAttribute() bool {
	if o != nil && o.UserIdAttribute != nil {
		return true
	}

	return false
}

// SetUserIdAttribute gets a reference to the given string and assigns it to the UserIdAttribute field.
func (o *IdentityLdapSettings) SetUserIdAttribute(v string) {
	o.UserIdAttribute = &v
}

// GetUserListFilter returns the UserListFilter field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetUserListFilter() string {
	if o == nil || o.UserListFilter == nil {
		var ret string
		return ret
	}
	return *o.UserListFilter
}

// GetUserListFilterOk returns a tuple with the UserListFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetUserListFilterOk() (*string, bool) {
	if o == nil || o.UserListFilter == nil {
		return nil, false
	}
	return o.UserListFilter, true
}

// HasUserListFilter returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasUserListFilter() bool {
	if o != nil && o.UserListFilter != nil {
		return true
	}

	return false
}

// SetUserListFilter gets a reference to the given string and assigns it to the UserListFilter field.
func (o *IdentityLdapSettings) SetUserListFilter(v string) {
	o.UserListFilter = &v
}

// GetGroupBase returns the GroupBase field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetGroupBase() string {
	if o == nil || o.GroupBase == nil {
		var ret string
		return ret
	}
	return *o.GroupBase
}

// GetGroupBaseOk returns a tuple with the GroupBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetGroupBaseOk() (*string, bool) {
	if o == nil || o.GroupBase == nil {
		return nil, false
	}
	return o.GroupBase, true
}

// HasGroupBase returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasGroupBase() bool {
	if o != nil && o.GroupBase != nil {
		return true
	}

	return false
}

// SetGroupBase gets a reference to the given string and assigns it to the GroupBase field.
func (o *IdentityLdapSettings) SetGroupBase(v string) {
	o.GroupBase = &v
}

// GetGroupIdAttribute returns the GroupIdAttribute field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetGroupIdAttribute() string {
	if o == nil || o.GroupIdAttribute == nil {
		var ret string
		return ret
	}
	return *o.GroupIdAttribute
}

// GetGroupIdAttributeOk returns a tuple with the GroupIdAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetGroupIdAttributeOk() (*string, bool) {
	if o == nil || o.GroupIdAttribute == nil {
		return nil, false
	}
	return o.GroupIdAttribute, true
}

// HasGroupIdAttribute returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasGroupIdAttribute() bool {
	if o != nil && o.GroupIdAttribute != nil {
		return true
	}

	return false
}

// SetGroupIdAttribute gets a reference to the given string and assigns it to the GroupIdAttribute field.
func (o *IdentityLdapSettings) SetGroupIdAttribute(v string) {
	o.GroupIdAttribute = &v
}

// GetGroupListFilter returns the GroupListFilter field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetGroupListFilter() string {
	if o == nil || o.GroupListFilter == nil {
		var ret string
		return ret
	}
	return *o.GroupListFilter
}

// GetGroupListFilterOk returns a tuple with the GroupListFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetGroupListFilterOk() (*string, bool) {
	if o == nil || o.GroupListFilter == nil {
		return nil, false
	}
	return o.GroupListFilter, true
}

// HasGroupListFilter returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasGroupListFilter() bool {
	if o != nil && o.GroupListFilter != nil {
		return true
	}

	return false
}

// SetGroupListFilter gets a reference to the given string and assigns it to the GroupListFilter field.
func (o *IdentityLdapSettings) SetGroupListFilter(v string) {
	o.GroupListFilter = &v
}

// GetGroupMemberAttribute returns the GroupMemberAttribute field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetGroupMemberAttribute() string {
	if o == nil || o.GroupMemberAttribute == nil {
		var ret string
		return ret
	}
	return *o.GroupMemberAttribute
}

// GetGroupMemberAttributeOk returns a tuple with the GroupMemberAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetGroupMemberAttributeOk() (*string, bool) {
	if o == nil || o.GroupMemberAttribute == nil {
		return nil, false
	}
	return o.GroupMemberAttribute, true
}

// HasGroupMemberAttribute returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasGroupMemberAttribute() bool {
	if o != nil && o.GroupMemberAttribute != nil {
		return true
	}

	return false
}

// SetGroupMemberAttribute gets a reference to the given string and assigns it to the GroupMemberAttribute field.
func (o *IdentityLdapSettings) SetGroupMemberAttribute(v string) {
	o.GroupMemberAttribute = &v
}

// GetGroupMemberAttrFormat returns the GroupMemberAttrFormat field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetGroupMemberAttrFormat() string {
	if o == nil || o.GroupMemberAttrFormat == nil {
		var ret string
		return ret
	}
	return *o.GroupMemberAttrFormat
}

// GetGroupMemberAttrFormatOk returns a tuple with the GroupMemberAttrFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetGroupMemberAttrFormatOk() (*string, bool) {
	if o == nil || o.GroupMemberAttrFormat == nil {
		return nil, false
	}
	return o.GroupMemberAttrFormat, true
}

// HasGroupMemberAttrFormat returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasGroupMemberAttrFormat() bool {
	if o != nil && o.GroupMemberAttrFormat != nil {
		return true
	}

	return false
}

// SetGroupMemberAttrFormat gets a reference to the given string and assigns it to the GroupMemberAttrFormat field.
func (o *IdentityLdapSettings) SetGroupMemberAttrFormat(v string) {
	o.GroupMemberAttrFormat = &v
}

// GetGroupSearchScope returns the GroupSearchScope field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetGroupSearchScope() string {
	if o == nil || o.GroupSearchScope == nil {
		var ret string
		return ret
	}
	return *o.GroupSearchScope
}

// GetGroupSearchScopeOk returns a tuple with the GroupSearchScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetGroupSearchScopeOk() (*string, bool) {
	if o == nil || o.GroupSearchScope == nil {
		return nil, false
	}
	return o.GroupSearchScope, true
}

// HasGroupSearchScope returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasGroupSearchScope() bool {
	if o != nil && o.GroupSearchScope != nil {
		return true
	}

	return false
}

// SetGroupSearchScope gets a reference to the given string and assigns it to the GroupSearchScope field.
func (o *IdentityLdapSettings) SetGroupSearchScope(v string) {
	o.GroupSearchScope = &v
}

// GetOtp returns the Otp field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetOtp() bool {
	if o == nil || o.Otp == nil {
		var ret bool
		return ret
	}
	return *o.Otp
}

// GetOtpOk returns a tuple with the Otp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetOtpOk() (*bool, bool) {
	if o == nil || o.Otp == nil {
		return nil, false
	}
	return o.Otp, true
}

// HasOtp returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasOtp() bool {
	if o != nil && o.Otp != nil {
		return true
	}

	return false
}

// SetOtp gets a reference to the given bool and assigns it to the Otp field.
func (o *IdentityLdapSettings) SetOtp(v bool) {
	o.Otp = &v
}

// GetOtpUrl returns the OtpUrl field value if set, zero value otherwise.
func (o *IdentityLdapSettings) GetOtpUrl() string {
	if o == nil || o.OtpUrl == nil {
		var ret string
		return ret
	}
	return *o.OtpUrl
}

// GetOtpUrlOk returns a tuple with the OtpUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityLdapSettings) GetOtpUrlOk() (*string, bool) {
	if o == nil || o.OtpUrl == nil {
		return nil, false
	}
	return o.OtpUrl, true
}

// HasOtpUrl returns a boolean if a field has been set.
func (o *IdentityLdapSettings) HasOtpUrl() bool {
	if o != nil && o.OtpUrl != nil {
		return true
	}

	return false
}

// SetOtpUrl gets a reference to the given string and assigns it to the OtpUrl field.
func (o *IdentityLdapSettings) SetOtpUrl(v string) {
	o.OtpUrl = &v
}

func (o IdentityLdapSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Host != nil {
		toSerialize["host"] = o.Host
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.Encrypt != nil {
		toSerialize["encrypt"] = o.Encrypt
	}
	if o.EncryptLdaps != nil {
		toSerialize["encrypt_ldaps"] = o.EncryptLdaps
	}
	if o.EncryptAuth != nil {
		toSerialize["encrypt_auth"] = o.EncryptAuth
	}
	if o.EncryptAuthKey != nil {
		toSerialize["encrypt_auth_key"] = o.EncryptAuthKey
	}
	if o.EncryptAuthCert != nil {
		toSerialize["encrypt_auth_cert"] = o.EncryptAuthCert
	}
	if o.EncryptVerifyCa != nil {
		toSerialize["encrypt_verify_ca"] = o.EncryptVerifyCa
	}
	if o.EncryptCaCert != nil {
		toSerialize["encrypt_ca_cert"] = o.EncryptCaCert
	}
	if o.Binddn != nil {
		toSerialize["binddn"] = o.Binddn
	}
	if o.Bindpw != nil {
		toSerialize["bindpw"] = o.Bindpw
	}
	if o.EncryptAuthCertData != nil {
		toSerialize["encrypt_auth_cert_data"] = o.EncryptAuthCertData
	}
	if o.EncryptAuthCertFilename != nil {
		toSerialize["encrypt_auth_cert_filename"] = o.EncryptAuthCertFilename
	}
	if o.EncryptAuthKeyData != nil {
		toSerialize["encrypt_auth_key_data"] = o.EncryptAuthKeyData
	}
	if o.EncryptAuthKeyFilename != nil {
		toSerialize["encrypt_auth_key_filename"] = o.EncryptAuthKeyFilename
	}
	if o.EncryptCaCertData != nil {
		toSerialize["encrypt_ca_cert_data"] = o.EncryptCaCertData
	}
	if o.EncryptCaCertFilename != nil {
		toSerialize["encrypt_ca_cert_filename"] = o.EncryptCaCertFilename
	}
	if o.UserBase != nil {
		toSerialize["user_base"] = o.UserBase
	}
	if o.UserIdAttribute != nil {
		toSerialize["user_id_attribute"] = o.UserIdAttribute
	}
	if o.UserListFilter != nil {
		toSerialize["user_list_filter"] = o.UserListFilter
	}
	if o.GroupBase != nil {
		toSerialize["group_base"] = o.GroupBase
	}
	if o.GroupIdAttribute != nil {
		toSerialize["group_id_attribute"] = o.GroupIdAttribute
	}
	if o.GroupListFilter != nil {
		toSerialize["group_list_filter"] = o.GroupListFilter
	}
	if o.GroupMemberAttribute != nil {
		toSerialize["group_member_attribute"] = o.GroupMemberAttribute
	}
	if o.GroupMemberAttrFormat != nil {
		toSerialize["group_member_attr_format"] = o.GroupMemberAttrFormat
	}
	if o.GroupSearchScope != nil {
		toSerialize["group_search_scope"] = o.GroupSearchScope
	}
	if o.Otp != nil {
		toSerialize["otp"] = o.Otp
	}
	if o.OtpUrl != nil {
		toSerialize["otp_url"] = o.OtpUrl
	}
	return json.Marshal(toSerialize)
}

type NullableIdentityLdapSettings struct {
	value *IdentityLdapSettings
	isSet bool
}

func (v NullableIdentityLdapSettings) Get() *IdentityLdapSettings {
	return v.value
}

func (v *NullableIdentityLdapSettings) Set(val *IdentityLdapSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityLdapSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityLdapSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityLdapSettings(val *IdentityLdapSettings) *NullableIdentityLdapSettings {
	return &NullableIdentityLdapSettings{value: val, isSet: true}
}

func (v NullableIdentityLdapSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityLdapSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


