/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// RestartRequest struct for RestartRequest
type RestartRequest struct {
	// Restarts target system on server if true
	Restart bool `json:"restart"`
}

// NewRestartRequest instantiates a new RestartRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestartRequest(restart bool) *RestartRequest {
	this := RestartRequest{}
	this.Restart = restart
	return &this
}

// NewRestartRequestWithDefaults instantiates a new RestartRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestartRequestWithDefaults() *RestartRequest {
	this := RestartRequest{}
	return &this
}

// GetRestart returns the Restart field value
func (o *RestartRequest) GetRestart() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Restart
}

// GetRestartOk returns a tuple with the Restart field value
// and a boolean to check if the value has been set.
func (o *RestartRequest) GetRestartOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Restart, true
}

// SetRestart sets field value
func (o *RestartRequest) SetRestart(v bool) {
	o.Restart = v
}

func (o RestartRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["restart"] = o.Restart
	}
	return json.Marshal(toSerialize)
}

type NullableRestartRequest struct {
	value *RestartRequest
	isSet bool
}

func (v NullableRestartRequest) Get() *RestartRequest {
	return v.value
}

func (v *NullableRestartRequest) Set(val *RestartRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRestartRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRestartRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestartRequest(val *RestartRequest) *NullableRestartRequest {
	return &NullableRestartRequest{value: val, isSet: true}
}

func (v NullableRestartRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestartRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


