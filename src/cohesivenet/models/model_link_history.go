/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet_models

import (
	"encoding/json"
)

// LinkHistory struct for LinkHistory
type LinkHistory struct {
	Remote *string `json:"remote,omitempty"`
	Local *string `json:"local,omitempty"`
	Tunnelid *int32 `json:"tunnelid,omitempty"`
	History []LinkEvent `json:"history,omitempty"`
}

// NewLinkHistory instantiates a new LinkHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkHistory() *LinkHistory {
	this := LinkHistory{}
	return &this
}

// NewLinkHistoryWithDefaults instantiates a new LinkHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkHistoryWithDefaults() *LinkHistory {
	this := LinkHistory{}
	return &this
}

// GetRemote returns the Remote field value if set, zero value otherwise.
func (o *LinkHistory) GetRemote() string {
	if o == nil || o.Remote == nil {
		var ret string
		return ret
	}
	return *o.Remote
}

// GetRemoteOk returns a tuple with the Remote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkHistory) GetRemoteOk() (*string, bool) {
	if o == nil || o.Remote == nil {
		return nil, false
	}
	return o.Remote, true
}

// HasRemote returns a boolean if a field has been set.
func (o *LinkHistory) HasRemote() bool {
	if o != nil && o.Remote != nil {
		return true
	}

	return false
}

// SetRemote gets a reference to the given string and assigns it to the Remote field.
func (o *LinkHistory) SetRemote(v string) {
	o.Remote = &v
}

// GetLocal returns the Local field value if set, zero value otherwise.
func (o *LinkHistory) GetLocal() string {
	if o == nil || o.Local == nil {
		var ret string
		return ret
	}
	return *o.Local
}

// GetLocalOk returns a tuple with the Local field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkHistory) GetLocalOk() (*string, bool) {
	if o == nil || o.Local == nil {
		return nil, false
	}
	return o.Local, true
}

// HasLocal returns a boolean if a field has been set.
func (o *LinkHistory) HasLocal() bool {
	if o != nil && o.Local != nil {
		return true
	}

	return false
}

// SetLocal gets a reference to the given string and assigns it to the Local field.
func (o *LinkHistory) SetLocal(v string) {
	o.Local = &v
}

// GetTunnelid returns the Tunnelid field value if set, zero value otherwise.
func (o *LinkHistory) GetTunnelid() int32 {
	if o == nil || o.Tunnelid == nil {
		var ret int32
		return ret
	}
	return *o.Tunnelid
}

// GetTunnelidOk returns a tuple with the Tunnelid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkHistory) GetTunnelidOk() (*int32, bool) {
	if o == nil || o.Tunnelid == nil {
		return nil, false
	}
	return o.Tunnelid, true
}

// HasTunnelid returns a boolean if a field has been set.
func (o *LinkHistory) HasTunnelid() bool {
	if o != nil && o.Tunnelid != nil {
		return true
	}

	return false
}

// SetTunnelid gets a reference to the given int32 and assigns it to the Tunnelid field.
func (o *LinkHistory) SetTunnelid(v int32) {
	o.Tunnelid = &v
}

// GetHistory returns the History field value if set, zero value otherwise.
func (o *LinkHistory) GetHistory() []LinkEvent {
	if o == nil || o.History == nil {
		var ret []LinkEvent
		return ret
	}
	return o.History
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkHistory) GetHistoryOk() ([]LinkEvent, bool) {
	if o == nil || o.History == nil {
		return nil, false
	}
	return o.History, true
}

// HasHistory returns a boolean if a field has been set.
func (o *LinkHistory) HasHistory() bool {
	if o != nil && o.History != nil {
		return true
	}

	return false
}

// SetHistory gets a reference to the given []LinkEvent and assigns it to the History field.
func (o *LinkHistory) SetHistory(v []LinkEvent) {
	o.History = v
}

func (o LinkHistory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Remote != nil {
		toSerialize["remote"] = o.Remote
	}
	if o.Local != nil {
		toSerialize["local"] = o.Local
	}
	if o.Tunnelid != nil {
		toSerialize["tunnelid"] = o.Tunnelid
	}
	if o.History != nil {
		toSerialize["history"] = o.History
	}
	return json.Marshal(toSerialize)
}

type NullableLinkHistory struct {
	value *LinkHistory
	isSet bool
}

func (v NullableLinkHistory) Get() *LinkHistory {
	return v.value
}

func (v *NullableLinkHistory) Set(val *LinkHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkHistory(val *LinkHistory) *NullableLinkHistory {
	return &NullableLinkHistory{value: val, isSet: true}
}

func (v NullableLinkHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


