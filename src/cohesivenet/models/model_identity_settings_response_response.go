/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet_models

import (
	"encoding/json"
	"fmt"
)

// IdentitySettingsResponseResponse - struct for IdentitySettingsResponseResponse
type IdentitySettingsResponseResponse struct {
	IdentityLdapSettings *IdentityLdapSettings
	IdentityOIDCSettings *IdentityOIDCSettings
	IdentityRadiusSettings *IdentityRadiusSettings
}

// IdentityLdapSettingsAsIdentitySettingsResponseResponse is a convenience function that returns IdentityLdapSettings wrapped in IdentitySettingsResponseResponse
func IdentityLdapSettingsAsIdentitySettingsResponseResponse(v *IdentityLdapSettings) IdentitySettingsResponseResponse {
	return IdentitySettingsResponseResponse{
		IdentityLdapSettings: v,
	}
}

// IdentityOIDCSettingsAsIdentitySettingsResponseResponse is a convenience function that returns IdentityOIDCSettings wrapped in IdentitySettingsResponseResponse
func IdentityOIDCSettingsAsIdentitySettingsResponseResponse(v *IdentityOIDCSettings) IdentitySettingsResponseResponse {
	return IdentitySettingsResponseResponse{
		IdentityOIDCSettings: v,
	}
}

// IdentityRadiusSettingsAsIdentitySettingsResponseResponse is a convenience function that returns IdentityRadiusSettings wrapped in IdentitySettingsResponseResponse
func IdentityRadiusSettingsAsIdentitySettingsResponseResponse(v *IdentityRadiusSettings) IdentitySettingsResponseResponse {
	return IdentitySettingsResponseResponse{
		IdentityRadiusSettings: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *IdentitySettingsResponseResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into IdentityLdapSettings
	err = newStrictDecoder(data).Decode(&dst.IdentityLdapSettings)
	if err == nil {
		jsonIdentityLdapSettings, _ := json.Marshal(dst.IdentityLdapSettings)
		if string(jsonIdentityLdapSettings) == "{}" { // empty struct
			dst.IdentityLdapSettings = nil
		} else {
			match++
		}
	} else {
		dst.IdentityLdapSettings = nil
	}

	// try to unmarshal data into IdentityOIDCSettings
	err = newStrictDecoder(data).Decode(&dst.IdentityOIDCSettings)
	if err == nil {
		jsonIdentityOIDCSettings, _ := json.Marshal(dst.IdentityOIDCSettings)
		if string(jsonIdentityOIDCSettings) == "{}" { // empty struct
			dst.IdentityOIDCSettings = nil
		} else {
			match++
		}
	} else {
		dst.IdentityOIDCSettings = nil
	}

	// try to unmarshal data into IdentityRadiusSettings
	err = newStrictDecoder(data).Decode(&dst.IdentityRadiusSettings)
	if err == nil {
		jsonIdentityRadiusSettings, _ := json.Marshal(dst.IdentityRadiusSettings)
		if string(jsonIdentityRadiusSettings) == "{}" { // empty struct
			dst.IdentityRadiusSettings = nil
		} else {
			match++
		}
	} else {
		dst.IdentityRadiusSettings = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.IdentityLdapSettings = nil
		dst.IdentityOIDCSettings = nil
		dst.IdentityRadiusSettings = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(IdentitySettingsResponseResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(IdentitySettingsResponseResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src IdentitySettingsResponseResponse) MarshalJSON() ([]byte, error) {
	if src.IdentityLdapSettings != nil {
		return json.Marshal(&src.IdentityLdapSettings)
	}

	if src.IdentityOIDCSettings != nil {
		return json.Marshal(&src.IdentityOIDCSettings)
	}

	if src.IdentityRadiusSettings != nil {
		return json.Marshal(&src.IdentityRadiusSettings)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *IdentitySettingsResponseResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.IdentityLdapSettings != nil {
		return obj.IdentityLdapSettings
	}

	if obj.IdentityOIDCSettings != nil {
		return obj.IdentityOIDCSettings
	}

	if obj.IdentityRadiusSettings != nil {
		return obj.IdentityRadiusSettings
	}

	// all schemas are nil
	return nil
}

type NullableIdentitySettingsResponseResponse struct {
	value *IdentitySettingsResponseResponse
	isSet bool
}

func (v NullableIdentitySettingsResponseResponse) Get() *IdentitySettingsResponseResponse {
	return v.value
}

func (v *NullableIdentitySettingsResponseResponse) Set(val *IdentitySettingsResponseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentitySettingsResponseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentitySettingsResponseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentitySettingsResponseResponse(val *IdentitySettingsResponseResponse) *NullableIdentitySettingsResponseResponse {
	return &NullableIdentitySettingsResponseResponse{value: val, isSet: true}
}

func (v NullableIdentitySettingsResponseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentitySettingsResponseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


