/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// SetMSRequest struct for SetMSRequest
type SetMSRequest struct {
	// VNS3 Management system endpoint IP address
	Ip *string `json:"ip,omitempty"`
	// Disable/Enable sending alerts to VNS3:ms
	AlertEnabled bool `json:"alert_enabled"`
}

// NewSetMSRequest instantiates a new SetMSRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetMSRequest(alertEnabled bool) *SetMSRequest {
	this := SetMSRequest{}
	this.AlertEnabled = alertEnabled
	return &this
}

// NewSetMSRequestWithDefaults instantiates a new SetMSRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetMSRequestWithDefaults() *SetMSRequest {
	this := SetMSRequest{}
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *SetMSRequest) GetIp() string {
	if o == nil || o.Ip == nil {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SetMSRequest) GetIpOk() (*string, bool) {
	if o == nil || o.Ip == nil {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *SetMSRequest) HasIp() bool {
	if o != nil && o.Ip != nil {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *SetMSRequest) SetIp(v string) {
	o.Ip = &v
}

// GetAlertEnabled returns the AlertEnabled field value
func (o *SetMSRequest) GetAlertEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AlertEnabled
}

// GetAlertEnabledOk returns a tuple with the AlertEnabled field value
// and a boolean to check if the value has been set.
func (o *SetMSRequest) GetAlertEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlertEnabled, true
}

// SetAlertEnabled sets field value
func (o *SetMSRequest) SetAlertEnabled(v bool) {
	o.AlertEnabled = v
}

func (o SetMSRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ip != nil {
		toSerialize["ip"] = o.Ip
	}
	if true {
		toSerialize["alert_enabled"] = o.AlertEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableSetMSRequest struct {
	value *SetMSRequest
	isSet bool
}

func (v NullableSetMSRequest) Get() *SetMSRequest {
	return v.value
}

func (v *NullableSetMSRequest) Set(val *SetMSRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetMSRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetMSRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetMSRequest(val *SetMSRequest) *NullableSetMSRequest {
	return &NullableSetMSRequest{value: val, isSet: true}
}

func (v NullableSetMSRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetMSRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


