/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet_models

import (
	"encoding/json"
)

// VNS3Controller struct for VNS3Controller
type VNS3Controller struct {
	Asn *int32 `json:"asn,omitempty"`
	ManagerId *int32 `json:"manager_id,omitempty"`
	OverlayIpaddress *TopologyClientsInner `json:"overlay_ipaddress,omitempty"`
}

// NewVNS3Controller instantiates a new VNS3Controller object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVNS3Controller() *VNS3Controller {
	this := VNS3Controller{}
	return &this
}

// NewVNS3ControllerWithDefaults instantiates a new VNS3Controller object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVNS3ControllerWithDefaults() *VNS3Controller {
	this := VNS3Controller{}
	return &this
}

// GetAsn returns the Asn field value if set, zero value otherwise.
func (o *VNS3Controller) GetAsn() int32 {
	if o == nil || o.Asn == nil {
		var ret int32
		return ret
	}
	return *o.Asn
}

// GetAsnOk returns a tuple with the Asn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VNS3Controller) GetAsnOk() (*int32, bool) {
	if o == nil || o.Asn == nil {
		return nil, false
	}
	return o.Asn, true
}

// HasAsn returns a boolean if a field has been set.
func (o *VNS3Controller) HasAsn() bool {
	if o != nil && o.Asn != nil {
		return true
	}

	return false
}

// SetAsn gets a reference to the given int32 and assigns it to the Asn field.
func (o *VNS3Controller) SetAsn(v int32) {
	o.Asn = &v
}

// GetManagerId returns the ManagerId field value if set, zero value otherwise.
func (o *VNS3Controller) GetManagerId() int32 {
	if o == nil || o.ManagerId == nil {
		var ret int32
		return ret
	}
	return *o.ManagerId
}

// GetManagerIdOk returns a tuple with the ManagerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VNS3Controller) GetManagerIdOk() (*int32, bool) {
	if o == nil || o.ManagerId == nil {
		return nil, false
	}
	return o.ManagerId, true
}

// HasManagerId returns a boolean if a field has been set.
func (o *VNS3Controller) HasManagerId() bool {
	if o != nil && o.ManagerId != nil {
		return true
	}

	return false
}

// SetManagerId gets a reference to the given int32 and assigns it to the ManagerId field.
func (o *VNS3Controller) SetManagerId(v int32) {
	o.ManagerId = &v
}

// GetOverlayIpaddress returns the OverlayIpaddress field value if set, zero value otherwise.
func (o *VNS3Controller) GetOverlayIpaddress() TopologyClientsInner {
	if o == nil || o.OverlayIpaddress == nil {
		var ret TopologyClientsInner
		return ret
	}
	return *o.OverlayIpaddress
}

// GetOverlayIpaddressOk returns a tuple with the OverlayIpaddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VNS3Controller) GetOverlayIpaddressOk() (*TopologyClientsInner, bool) {
	if o == nil || o.OverlayIpaddress == nil {
		return nil, false
	}
	return o.OverlayIpaddress, true
}

// HasOverlayIpaddress returns a boolean if a field has been set.
func (o *VNS3Controller) HasOverlayIpaddress() bool {
	if o != nil && o.OverlayIpaddress != nil {
		return true
	}

	return false
}

// SetOverlayIpaddress gets a reference to the given TopologyClientsInner and assigns it to the OverlayIpaddress field.
func (o *VNS3Controller) SetOverlayIpaddress(v TopologyClientsInner) {
	o.OverlayIpaddress = &v
}

func (o VNS3Controller) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Asn != nil {
		toSerialize["asn"] = o.Asn
	}
	if o.ManagerId != nil {
		toSerialize["manager_id"] = o.ManagerId
	}
	if o.OverlayIpaddress != nil {
		toSerialize["overlay_ipaddress"] = o.OverlayIpaddress
	}
	return json.Marshal(toSerialize)
}

type NullableVNS3Controller struct {
	value *VNS3Controller
	isSet bool
}

func (v NullableVNS3Controller) Get() *VNS3Controller {
	return v.value
}

func (v *NullableVNS3Controller) Set(val *VNS3Controller) {
	v.value = val
	v.isSet = true
}

func (v NullableVNS3Controller) IsSet() bool {
	return v.isSet
}

func (v *NullableVNS3Controller) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVNS3Controller(val *VNS3Controller) *NullableVNS3Controller {
	return &NullableVNS3Controller{value: val, isSet: true}
}

func (v NullableVNS3Controller) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVNS3Controller) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


