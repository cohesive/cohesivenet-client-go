/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet_models

import (
	"encoding/json"
)

// DeleteContainerDetail struct for DeleteContainerDetail
type DeleteContainerDetail struct {
	Uuid *string `json:"uuid,omitempty"`
	ContainerDeleted *bool `json:"container_deleted,omitempty"`
}

// NewDeleteContainerDetail instantiates a new DeleteContainerDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteContainerDetail() *DeleteContainerDetail {
	this := DeleteContainerDetail{}
	return &this
}

// NewDeleteContainerDetailWithDefaults instantiates a new DeleteContainerDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteContainerDetailWithDefaults() *DeleteContainerDetail {
	this := DeleteContainerDetail{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *DeleteContainerDetail) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteContainerDetail) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *DeleteContainerDetail) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *DeleteContainerDetail) SetUuid(v string) {
	o.Uuid = &v
}

// GetContainerDeleted returns the ContainerDeleted field value if set, zero value otherwise.
func (o *DeleteContainerDetail) GetContainerDeleted() bool {
	if o == nil || o.ContainerDeleted == nil {
		var ret bool
		return ret
	}
	return *o.ContainerDeleted
}

// GetContainerDeletedOk returns a tuple with the ContainerDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteContainerDetail) GetContainerDeletedOk() (*bool, bool) {
	if o == nil || o.ContainerDeleted == nil {
		return nil, false
	}
	return o.ContainerDeleted, true
}

// HasContainerDeleted returns a boolean if a field has been set.
func (o *DeleteContainerDetail) HasContainerDeleted() bool {
	if o != nil && o.ContainerDeleted != nil {
		return true
	}

	return false
}

// SetContainerDeleted gets a reference to the given bool and assigns it to the ContainerDeleted field.
func (o *DeleteContainerDetail) SetContainerDeleted(v bool) {
	o.ContainerDeleted = &v
}

func (o DeleteContainerDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.ContainerDeleted != nil {
		toSerialize["container_deleted"] = o.ContainerDeleted
	}
	return json.Marshal(toSerialize)
}

type NullableDeleteContainerDetail struct {
	value *DeleteContainerDetail
	isSet bool
}

func (v NullableDeleteContainerDetail) Get() *DeleteContainerDetail {
	return v.value
}

func (v *NullableDeleteContainerDetail) Set(val *DeleteContainerDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteContainerDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteContainerDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteContainerDetail(val *DeleteContainerDetail) *NullableDeleteContainerDetail {
	return &NullableDeleteContainerDetail{value: val, isSet: true}
}

func (v NullableDeleteContainerDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteContainerDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


