/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
	"time"
)

// AccessUrl struct for AccessUrl
type AccessUrl struct {
	Id *int32 `json:"id,omitempty"`
	Url *string `json:"url,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	CreatedIp *string `json:"created_ip,omitempty"`
	Name *string `json:"name,omitempty"`
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	Lifetime *string `json:"lifetime,omitempty"`
	Expired *bool `json:"expired,omitempty"`
	LastAccessedAt NullableString `json:"last_accessed_at,omitempty"`
	LastAccessedIp NullableString `json:"last_accessed_ip,omitempty"`
	// Type of access, remote support (rs) or clientpack (cp:100_1_64_0)
	Access *string `json:"access,omitempty"`
}

// NewAccessUrl instantiates a new AccessUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessUrl() *AccessUrl {
	this := AccessUrl{}
	var access string = "rs"
	this.Access = &access
	return &this
}

// NewAccessUrlWithDefaults instantiates a new AccessUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessUrlWithDefaults() *AccessUrl {
	this := AccessUrl{}
	var access string = "rs"
	this.Access = &access
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccessUrl) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessUrl) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccessUrl) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AccessUrl) SetId(v int32) {
	o.Id = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AccessUrl) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessUrl) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AccessUrl) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AccessUrl) SetUrl(v string) {
	o.Url = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *AccessUrl) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessUrl) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *AccessUrl) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *AccessUrl) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCreatedIp returns the CreatedIp field value if set, zero value otherwise.
func (o *AccessUrl) GetCreatedIp() string {
	if o == nil || o.CreatedIp == nil {
		var ret string
		return ret
	}
	return *o.CreatedIp
}

// GetCreatedIpOk returns a tuple with the CreatedIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessUrl) GetCreatedIpOk() (*string, bool) {
	if o == nil || o.CreatedIp == nil {
		return nil, false
	}
	return o.CreatedIp, true
}

// HasCreatedIp returns a boolean if a field has been set.
func (o *AccessUrl) HasCreatedIp() bool {
	if o != nil && o.CreatedIp != nil {
		return true
	}

	return false
}

// SetCreatedIp gets a reference to the given string and assigns it to the CreatedIp field.
func (o *AccessUrl) SetCreatedIp(v string) {
	o.CreatedIp = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AccessUrl) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessUrl) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AccessUrl) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AccessUrl) SetName(v string) {
	o.Name = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *AccessUrl) GetExpiresAt() time.Time {
	if o == nil || o.ExpiresAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessUrl) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *AccessUrl) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *AccessUrl) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetLifetime returns the Lifetime field value if set, zero value otherwise.
func (o *AccessUrl) GetLifetime() string {
	if o == nil || o.Lifetime == nil {
		var ret string
		return ret
	}
	return *o.Lifetime
}

// GetLifetimeOk returns a tuple with the Lifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessUrl) GetLifetimeOk() (*string, bool) {
	if o == nil || o.Lifetime == nil {
		return nil, false
	}
	return o.Lifetime, true
}

// HasLifetime returns a boolean if a field has been set.
func (o *AccessUrl) HasLifetime() bool {
	if o != nil && o.Lifetime != nil {
		return true
	}

	return false
}

// SetLifetime gets a reference to the given string and assigns it to the Lifetime field.
func (o *AccessUrl) SetLifetime(v string) {
	o.Lifetime = &v
}

// GetExpired returns the Expired field value if set, zero value otherwise.
func (o *AccessUrl) GetExpired() bool {
	if o == nil || o.Expired == nil {
		var ret bool
		return ret
	}
	return *o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessUrl) GetExpiredOk() (*bool, bool) {
	if o == nil || o.Expired == nil {
		return nil, false
	}
	return o.Expired, true
}

// HasExpired returns a boolean if a field has been set.
func (o *AccessUrl) HasExpired() bool {
	if o != nil && o.Expired != nil {
		return true
	}

	return false
}

// SetExpired gets a reference to the given bool and assigns it to the Expired field.
func (o *AccessUrl) SetExpired(v bool) {
	o.Expired = &v
}

// GetLastAccessedAt returns the LastAccessedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessUrl) GetLastAccessedAt() string {
	if o == nil || o.LastAccessedAt.Get() == nil {
		var ret string
		return ret
	}
	return *o.LastAccessedAt.Get()
}

// GetLastAccessedAtOk returns a tuple with the LastAccessedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessUrl) GetLastAccessedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastAccessedAt.Get(), o.LastAccessedAt.IsSet()
}

// HasLastAccessedAt returns a boolean if a field has been set.
func (o *AccessUrl) HasLastAccessedAt() bool {
	if o != nil && o.LastAccessedAt.IsSet() {
		return true
	}

	return false
}

// SetLastAccessedAt gets a reference to the given NullableString and assigns it to the LastAccessedAt field.
func (o *AccessUrl) SetLastAccessedAt(v string) {
	o.LastAccessedAt.Set(&v)
}
// SetLastAccessedAtNil sets the value for LastAccessedAt to be an explicit nil
func (o *AccessUrl) SetLastAccessedAtNil() {
	o.LastAccessedAt.Set(nil)
}

// UnsetLastAccessedAt ensures that no value is present for LastAccessedAt, not even an explicit nil
func (o *AccessUrl) UnsetLastAccessedAt() {
	o.LastAccessedAt.Unset()
}

// GetLastAccessedIp returns the LastAccessedIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessUrl) GetLastAccessedIp() string {
	if o == nil || o.LastAccessedIp.Get() == nil {
		var ret string
		return ret
	}
	return *o.LastAccessedIp.Get()
}

// GetLastAccessedIpOk returns a tuple with the LastAccessedIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessUrl) GetLastAccessedIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastAccessedIp.Get(), o.LastAccessedIp.IsSet()
}

// HasLastAccessedIp returns a boolean if a field has been set.
func (o *AccessUrl) HasLastAccessedIp() bool {
	if o != nil && o.LastAccessedIp.IsSet() {
		return true
	}

	return false
}

// SetLastAccessedIp gets a reference to the given NullableString and assigns it to the LastAccessedIp field.
func (o *AccessUrl) SetLastAccessedIp(v string) {
	o.LastAccessedIp.Set(&v)
}
// SetLastAccessedIpNil sets the value for LastAccessedIp to be an explicit nil
func (o *AccessUrl) SetLastAccessedIpNil() {
	o.LastAccessedIp.Set(nil)
}

// UnsetLastAccessedIp ensures that no value is present for LastAccessedIp, not even an explicit nil
func (o *AccessUrl) UnsetLastAccessedIp() {
	o.LastAccessedIp.Unset()
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *AccessUrl) GetAccess() string {
	if o == nil || o.Access == nil {
		var ret string
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessUrl) GetAccessOk() (*string, bool) {
	if o == nil || o.Access == nil {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *AccessUrl) HasAccess() bool {
	if o != nil && o.Access != nil {
		return true
	}

	return false
}

// SetAccess gets a reference to the given string and assigns it to the Access field.
func (o *AccessUrl) SetAccess(v string) {
	o.Access = &v
}

func (o AccessUrl) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.CreatedIp != nil {
		toSerialize["created_ip"] = o.CreatedIp
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ExpiresAt != nil {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if o.Lifetime != nil {
		toSerialize["lifetime"] = o.Lifetime
	}
	if o.Expired != nil {
		toSerialize["expired"] = o.Expired
	}
	if o.LastAccessedAt.IsSet() {
		toSerialize["last_accessed_at"] = o.LastAccessedAt.Get()
	}
	if o.LastAccessedIp.IsSet() {
		toSerialize["last_accessed_ip"] = o.LastAccessedIp.Get()
	}
	if o.Access != nil {
		toSerialize["access"] = o.Access
	}
	return json.Marshal(toSerialize)
}

type NullableAccessUrl struct {
	value *AccessUrl
	isSet bool
}

func (v NullableAccessUrl) Get() *AccessUrl {
	return v.value
}

func (v *NullableAccessUrl) Set(val *AccessUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessUrl(val *AccessUrl) *NullableAccessUrl {
	return &NullableAccessUrl{value: val, isSet: true}
}

func (v NullableAccessUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


