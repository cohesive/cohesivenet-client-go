/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet_models

import (
	"encoding/json"
)

// RuntimeStatus struct for RuntimeStatus
type RuntimeStatus struct {
	// clients keyed by ip address
	ConnectedClients *map[string]RuntimeStatusConnectedClientsValue `json:"connected_clients,omitempty"`
	// Array of arrays with each element of length 2 representing [network, subnet mask]
	ConnectedSubnets [][]string `json:"connected_subnets,omitempty"`
	// IPSEC tunnels keyed by tunnel ID
	Ipsec *map[string]RuntimeStatusIpsecValue `json:"ipsec,omitempty"`
}

// NewRuntimeStatus instantiates a new RuntimeStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuntimeStatus() *RuntimeStatus {
	this := RuntimeStatus{}
	return &this
}

// NewRuntimeStatusWithDefaults instantiates a new RuntimeStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuntimeStatusWithDefaults() *RuntimeStatus {
	this := RuntimeStatus{}
	return &this
}

// GetConnectedClients returns the ConnectedClients field value if set, zero value otherwise.
func (o *RuntimeStatus) GetConnectedClients() map[string]RuntimeStatusConnectedClientsValue {
	if o == nil || o.ConnectedClients == nil {
		var ret map[string]RuntimeStatusConnectedClientsValue
		return ret
	}
	return *o.ConnectedClients
}

// GetConnectedClientsOk returns a tuple with the ConnectedClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeStatus) GetConnectedClientsOk() (*map[string]RuntimeStatusConnectedClientsValue, bool) {
	if o == nil || o.ConnectedClients == nil {
		return nil, false
	}
	return o.ConnectedClients, true
}

// HasConnectedClients returns a boolean if a field has been set.
func (o *RuntimeStatus) HasConnectedClients() bool {
	if o != nil && o.ConnectedClients != nil {
		return true
	}

	return false
}

// SetConnectedClients gets a reference to the given map[string]RuntimeStatusConnectedClientsValue and assigns it to the ConnectedClients field.
func (o *RuntimeStatus) SetConnectedClients(v map[string]RuntimeStatusConnectedClientsValue) {
	o.ConnectedClients = &v
}

// GetConnectedSubnets returns the ConnectedSubnets field value if set, zero value otherwise.
func (o *RuntimeStatus) GetConnectedSubnets() [][]string {
	if o == nil || o.ConnectedSubnets == nil {
		var ret [][]string
		return ret
	}
	return o.ConnectedSubnets
}

// GetConnectedSubnetsOk returns a tuple with the ConnectedSubnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeStatus) GetConnectedSubnetsOk() ([][]string, bool) {
	if o == nil || o.ConnectedSubnets == nil {
		return nil, false
	}
	return o.ConnectedSubnets, true
}

// HasConnectedSubnets returns a boolean if a field has been set.
func (o *RuntimeStatus) HasConnectedSubnets() bool {
	if o != nil && o.ConnectedSubnets != nil {
		return true
	}

	return false
}

// SetConnectedSubnets gets a reference to the given [][]string and assigns it to the ConnectedSubnets field.
func (o *RuntimeStatus) SetConnectedSubnets(v [][]string) {
	o.ConnectedSubnets = v
}

// GetIpsec returns the Ipsec field value if set, zero value otherwise.
func (o *RuntimeStatus) GetIpsec() map[string]RuntimeStatusIpsecValue {
	if o == nil || o.Ipsec == nil {
		var ret map[string]RuntimeStatusIpsecValue
		return ret
	}
	return *o.Ipsec
}

// GetIpsecOk returns a tuple with the Ipsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeStatus) GetIpsecOk() (*map[string]RuntimeStatusIpsecValue, bool) {
	if o == nil || o.Ipsec == nil {
		return nil, false
	}
	return o.Ipsec, true
}

// HasIpsec returns a boolean if a field has been set.
func (o *RuntimeStatus) HasIpsec() bool {
	if o != nil && o.Ipsec != nil {
		return true
	}

	return false
}

// SetIpsec gets a reference to the given map[string]RuntimeStatusIpsecValue and assigns it to the Ipsec field.
func (o *RuntimeStatus) SetIpsec(v map[string]RuntimeStatusIpsecValue) {
	o.Ipsec = &v
}

func (o RuntimeStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectedClients != nil {
		toSerialize["connected_clients"] = o.ConnectedClients
	}
	if o.ConnectedSubnets != nil {
		toSerialize["connected_subnets"] = o.ConnectedSubnets
	}
	if o.Ipsec != nil {
		toSerialize["ipsec"] = o.Ipsec
	}
	return json.Marshal(toSerialize)
}

type NullableRuntimeStatus struct {
	value *RuntimeStatus
	isSet bool
}

func (v NullableRuntimeStatus) Get() *RuntimeStatus {
	return v.value
}

func (v *NullableRuntimeStatus) Set(val *RuntimeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRuntimeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRuntimeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuntimeStatus(val *RuntimeStatus) *NullableRuntimeStatus {
	return &NullableRuntimeStatus{value: val, isSet: true}
}

func (v NullableRuntimeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuntimeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


