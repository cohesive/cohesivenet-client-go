/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// LicenseParameters struct for LicenseParameters
type LicenseParameters struct {
	Subnet *string `json:"subnet,omitempty"`
	// IP addresses of VNS3 controllers in topology
	Controllers []string `json:"controllers,omitempty"`
	// IP addresses of VNS3 controllers in topology
	Managers []string `json:"managers,omitempty"`
	// IP addresses of clients in topology
	Clients []string `json:"clients,omitempty"`
	// ASNs used by controllers in topology
	Asns []int32 `json:"asns,omitempty"`
	MyManagerVip *string `json:"my_manager_vip,omitempty"`
}

// NewLicenseParameters instantiates a new LicenseParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseParameters() *LicenseParameters {
	this := LicenseParameters{}
	return &this
}

// NewLicenseParametersWithDefaults instantiates a new LicenseParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseParametersWithDefaults() *LicenseParameters {
	this := LicenseParameters{}
	return &this
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *LicenseParameters) GetSubnet() string {
	if o == nil || o.Subnet == nil {
		var ret string
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseParameters) GetSubnetOk() (*string, bool) {
	if o == nil || o.Subnet == nil {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *LicenseParameters) HasSubnet() bool {
	if o != nil && o.Subnet != nil {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given string and assigns it to the Subnet field.
func (o *LicenseParameters) SetSubnet(v string) {
	o.Subnet = &v
}

// GetControllers returns the Controllers field value if set, zero value otherwise.
func (o *LicenseParameters) GetControllers() []string {
	if o == nil || o.Controllers == nil {
		var ret []string
		return ret
	}
	return o.Controllers
}

// GetControllersOk returns a tuple with the Controllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseParameters) GetControllersOk() ([]string, bool) {
	if o == nil || o.Controllers == nil {
		return nil, false
	}
	return o.Controllers, true
}

// HasControllers returns a boolean if a field has been set.
func (o *LicenseParameters) HasControllers() bool {
	if o != nil && o.Controllers != nil {
		return true
	}

	return false
}

// SetControllers gets a reference to the given []string and assigns it to the Controllers field.
func (o *LicenseParameters) SetControllers(v []string) {
	o.Controllers = v
}

// GetManagers returns the Managers field value if set, zero value otherwise.
func (o *LicenseParameters) GetManagers() []string {
	if o == nil || o.Managers == nil {
		var ret []string
		return ret
	}
	return o.Managers
}

// GetManagersOk returns a tuple with the Managers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseParameters) GetManagersOk() ([]string, bool) {
	if o == nil || o.Managers == nil {
		return nil, false
	}
	return o.Managers, true
}

// HasManagers returns a boolean if a field has been set.
func (o *LicenseParameters) HasManagers() bool {
	if o != nil && o.Managers != nil {
		return true
	}

	return false
}

// SetManagers gets a reference to the given []string and assigns it to the Managers field.
func (o *LicenseParameters) SetManagers(v []string) {
	o.Managers = v
}

// GetClients returns the Clients field value if set, zero value otherwise.
func (o *LicenseParameters) GetClients() []string {
	if o == nil || o.Clients == nil {
		var ret []string
		return ret
	}
	return o.Clients
}

// GetClientsOk returns a tuple with the Clients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseParameters) GetClientsOk() ([]string, bool) {
	if o == nil || o.Clients == nil {
		return nil, false
	}
	return o.Clients, true
}

// HasClients returns a boolean if a field has been set.
func (o *LicenseParameters) HasClients() bool {
	if o != nil && o.Clients != nil {
		return true
	}

	return false
}

// SetClients gets a reference to the given []string and assigns it to the Clients field.
func (o *LicenseParameters) SetClients(v []string) {
	o.Clients = v
}

// GetAsns returns the Asns field value if set, zero value otherwise.
func (o *LicenseParameters) GetAsns() []int32 {
	if o == nil || o.Asns == nil {
		var ret []int32
		return ret
	}
	return o.Asns
}

// GetAsnsOk returns a tuple with the Asns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseParameters) GetAsnsOk() ([]int32, bool) {
	if o == nil || o.Asns == nil {
		return nil, false
	}
	return o.Asns, true
}

// HasAsns returns a boolean if a field has been set.
func (o *LicenseParameters) HasAsns() bool {
	if o != nil && o.Asns != nil {
		return true
	}

	return false
}

// SetAsns gets a reference to the given []int32 and assigns it to the Asns field.
func (o *LicenseParameters) SetAsns(v []int32) {
	o.Asns = v
}

// GetMyManagerVip returns the MyManagerVip field value if set, zero value otherwise.
func (o *LicenseParameters) GetMyManagerVip() string {
	if o == nil || o.MyManagerVip == nil {
		var ret string
		return ret
	}
	return *o.MyManagerVip
}

// GetMyManagerVipOk returns a tuple with the MyManagerVip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseParameters) GetMyManagerVipOk() (*string, bool) {
	if o == nil || o.MyManagerVip == nil {
		return nil, false
	}
	return o.MyManagerVip, true
}

// HasMyManagerVip returns a boolean if a field has been set.
func (o *LicenseParameters) HasMyManagerVip() bool {
	if o != nil && o.MyManagerVip != nil {
		return true
	}

	return false
}

// SetMyManagerVip gets a reference to the given string and assigns it to the MyManagerVip field.
func (o *LicenseParameters) SetMyManagerVip(v string) {
	o.MyManagerVip = &v
}

func (o LicenseParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Subnet != nil {
		toSerialize["subnet"] = o.Subnet
	}
	if o.Controllers != nil {
		toSerialize["controllers"] = o.Controllers
	}
	if o.Managers != nil {
		toSerialize["managers"] = o.Managers
	}
	if o.Clients != nil {
		toSerialize["clients"] = o.Clients
	}
	if o.Asns != nil {
		toSerialize["asns"] = o.Asns
	}
	if o.MyManagerVip != nil {
		toSerialize["my_manager_vip"] = o.MyManagerVip
	}
	return json.Marshal(toSerialize)
}

type NullableLicenseParameters struct {
	value *LicenseParameters
	isSet bool
}

func (v NullableLicenseParameters) Get() *LicenseParameters {
	return v.value
}

func (v *NullableLicenseParameters) Set(val *LicenseParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseParameters(val *LicenseParameters) *NullableLicenseParameters {
	return &NullableLicenseParameters{value: val, isSet: true}
}

func (v NullableLicenseParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


