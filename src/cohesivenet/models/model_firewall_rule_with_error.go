/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// FirewallRuleWithError struct for FirewallRuleWithError
type FirewallRuleWithError struct {
	// unique random id
	Id *string `json:"id,omitempty"`
	// Unresolved rule
	Rule *string `json:"rule,omitempty"`
	// Unresolved rule
	Error *string `json:"error,omitempty"`
}

// NewFirewallRuleWithError instantiates a new FirewallRuleWithError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirewallRuleWithError() *FirewallRuleWithError {
	this := FirewallRuleWithError{}
	return &this
}

// NewFirewallRuleWithErrorWithDefaults instantiates a new FirewallRuleWithError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirewallRuleWithErrorWithDefaults() *FirewallRuleWithError {
	this := FirewallRuleWithError{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FirewallRuleWithError) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallRuleWithError) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FirewallRuleWithError) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FirewallRuleWithError) SetId(v string) {
	o.Id = &v
}

// GetRule returns the Rule field value if set, zero value otherwise.
func (o *FirewallRuleWithError) GetRule() string {
	if o == nil || o.Rule == nil {
		var ret string
		return ret
	}
	return *o.Rule
}

// GetRuleOk returns a tuple with the Rule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallRuleWithError) GetRuleOk() (*string, bool) {
	if o == nil || o.Rule == nil {
		return nil, false
	}
	return o.Rule, true
}

// HasRule returns a boolean if a field has been set.
func (o *FirewallRuleWithError) HasRule() bool {
	if o != nil && o.Rule != nil {
		return true
	}

	return false
}

// SetRule gets a reference to the given string and assigns it to the Rule field.
func (o *FirewallRuleWithError) SetRule(v string) {
	o.Rule = &v
}

func (o FirewallRuleWithError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Rule != nil {
		toSerialize["rule"] = o.Rule
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableFirewallRuleWithError struct {
	value *FirewallRuleWithError
	isSet bool
}

func (v NullableFirewallRuleWithError) Get() *FirewallRuleWithError {
	return v.value
}

func (v *NullableFirewallRuleWithError) Set(val *FirewallRuleWithError) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallRuleWithError) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallRuleWithError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallRuleWithError(val *FirewallRuleWithError) *NullableFirewallRuleWithError {
	return &NullableFirewallRuleWithError{value: val, isSet: true}
}

func (v NullableFirewallRuleWithError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallRuleWithError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


