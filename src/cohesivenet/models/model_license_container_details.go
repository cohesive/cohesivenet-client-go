/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet_models

import (
	"encoding/json"
)

// LicenseContainerDetails struct for LicenseContainerDetails
type LicenseContainerDetails struct {
	ContainersRunCount *int32 `json:"containers_run_count,omitempty"`
	ContainersImageCount *int32 `json:"containers_image_count,omitempty"`
}

// NewLicenseContainerDetails instantiates a new LicenseContainerDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseContainerDetails() *LicenseContainerDetails {
	this := LicenseContainerDetails{}
	return &this
}

// NewLicenseContainerDetailsWithDefaults instantiates a new LicenseContainerDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseContainerDetailsWithDefaults() *LicenseContainerDetails {
	this := LicenseContainerDetails{}
	return &this
}

// GetContainersRunCount returns the ContainersRunCount field value if set, zero value otherwise.
func (o *LicenseContainerDetails) GetContainersRunCount() int32 {
	if o == nil || o.ContainersRunCount == nil {
		var ret int32
		return ret
	}
	return *o.ContainersRunCount
}

// GetContainersRunCountOk returns a tuple with the ContainersRunCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseContainerDetails) GetContainersRunCountOk() (*int32, bool) {
	if o == nil || o.ContainersRunCount == nil {
		return nil, false
	}
	return o.ContainersRunCount, true
}

// HasContainersRunCount returns a boolean if a field has been set.
func (o *LicenseContainerDetails) HasContainersRunCount() bool {
	if o != nil && o.ContainersRunCount != nil {
		return true
	}

	return false
}

// SetContainersRunCount gets a reference to the given int32 and assigns it to the ContainersRunCount field.
func (o *LicenseContainerDetails) SetContainersRunCount(v int32) {
	o.ContainersRunCount = &v
}

// GetContainersImageCount returns the ContainersImageCount field value if set, zero value otherwise.
func (o *LicenseContainerDetails) GetContainersImageCount() int32 {
	if o == nil || o.ContainersImageCount == nil {
		var ret int32
		return ret
	}
	return *o.ContainersImageCount
}

// GetContainersImageCountOk returns a tuple with the ContainersImageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseContainerDetails) GetContainersImageCountOk() (*int32, bool) {
	if o == nil || o.ContainersImageCount == nil {
		return nil, false
	}
	return o.ContainersImageCount, true
}

// HasContainersImageCount returns a boolean if a field has been set.
func (o *LicenseContainerDetails) HasContainersImageCount() bool {
	if o != nil && o.ContainersImageCount != nil {
		return true
	}

	return false
}

// SetContainersImageCount gets a reference to the given int32 and assigns it to the ContainersImageCount field.
func (o *LicenseContainerDetails) SetContainersImageCount(v int32) {
	o.ContainersImageCount = &v
}

func (o LicenseContainerDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContainersRunCount != nil {
		toSerialize["containers_run_count"] = o.ContainersRunCount
	}
	if o.ContainersImageCount != nil {
		toSerialize["containers_image_count"] = o.ContainersImageCount
	}
	return json.Marshal(toSerialize)
}

type NullableLicenseContainerDetails struct {
	value *LicenseContainerDetails
	isSet bool
}

func (v NullableLicenseContainerDetails) Get() *LicenseContainerDetails {
	return v.value
}

func (v *NullableLicenseContainerDetails) Set(val *LicenseContainerDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseContainerDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseContainerDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseContainerDetails(val *LicenseContainerDetails) *NullableLicenseContainerDetails {
	return &NullableLicenseContainerDetails{value: val, isSet: true}
}

func (v NullableLicenseContainerDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseContainerDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


