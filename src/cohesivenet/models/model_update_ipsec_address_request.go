/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet_models

import (
	"encoding/json"
)

// UpdateIpsecAddressRequest struct for UpdateIpsecAddressRequest
type UpdateIpsecAddressRequest struct {
	// This is effectively a \"cloud NAT\" address, since you don't know what your LAN address  will be between invocations in a cloud, this address can be used by remote endpoints  as your \"behind a NAT\" address, sometimes referred to Peer or IKE ID, if needed (e.g. Watchguard or Juniper). It can ALSO be thought of even more simply as an IPsec \"loopback\" interface that you can use to terminate traffic. 
	IpsecLocalIpaddress string `json:"ipsec_local_ipaddress"`
	// Return a task token waiting for IPsec configuration update, default is false, meaning the request will block
	Async *bool `json:"async,omitempty"`
}

// NewUpdateIpsecAddressRequest instantiates a new UpdateIpsecAddressRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateIpsecAddressRequest(ipsecLocalIpaddress string) *UpdateIpsecAddressRequest {
	this := UpdateIpsecAddressRequest{}
	this.IpsecLocalIpaddress = ipsecLocalIpaddress
	var async bool = false
	this.Async = &async
	return &this
}

// NewUpdateIpsecAddressRequestWithDefaults instantiates a new UpdateIpsecAddressRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateIpsecAddressRequestWithDefaults() *UpdateIpsecAddressRequest {
	this := UpdateIpsecAddressRequest{}
	var async bool = false
	this.Async = &async
	return &this
}

// GetIpsecLocalIpaddress returns the IpsecLocalIpaddress field value
func (o *UpdateIpsecAddressRequest) GetIpsecLocalIpaddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpsecLocalIpaddress
}

// GetIpsecLocalIpaddressOk returns a tuple with the IpsecLocalIpaddress field value
// and a boolean to check if the value has been set.
func (o *UpdateIpsecAddressRequest) GetIpsecLocalIpaddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpsecLocalIpaddress, true
}

// SetIpsecLocalIpaddress sets field value
func (o *UpdateIpsecAddressRequest) SetIpsecLocalIpaddress(v string) {
	o.IpsecLocalIpaddress = v
}

// GetAsync returns the Async field value if set, zero value otherwise.
func (o *UpdateIpsecAddressRequest) GetAsync() bool {
	if o == nil || o.Async == nil {
		var ret bool
		return ret
	}
	return *o.Async
}

// GetAsyncOk returns a tuple with the Async field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIpsecAddressRequest) GetAsyncOk() (*bool, bool) {
	if o == nil || o.Async == nil {
		return nil, false
	}
	return o.Async, true
}

// HasAsync returns a boolean if a field has been set.
func (o *UpdateIpsecAddressRequest) HasAsync() bool {
	if o != nil && o.Async != nil {
		return true
	}

	return false
}

// SetAsync gets a reference to the given bool and assigns it to the Async field.
func (o *UpdateIpsecAddressRequest) SetAsync(v bool) {
	o.Async = &v
}

func (o UpdateIpsecAddressRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ipsec_local_ipaddress"] = o.IpsecLocalIpaddress
	}
	if o.Async != nil {
		toSerialize["async"] = o.Async
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateIpsecAddressRequest struct {
	value *UpdateIpsecAddressRequest
	isSet bool
}

func (v NullableUpdateIpsecAddressRequest) Get() *UpdateIpsecAddressRequest {
	return v.value
}

func (v *NullableUpdateIpsecAddressRequest) Set(val *UpdateIpsecAddressRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateIpsecAddressRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateIpsecAddressRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateIpsecAddressRequest(val *UpdateIpsecAddressRequest) *NullableUpdateIpsecAddressRequest {
	return &NullableUpdateIpsecAddressRequest{value: val, isSet: true}
}

func (v NullableUpdateIpsecAddressRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateIpsecAddressRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


