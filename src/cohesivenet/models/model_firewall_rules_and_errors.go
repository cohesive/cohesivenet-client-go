/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// FirewallRulesAndErrors struct for FirewallRulesAndErrors
type FirewallRulesAndErrors struct {
	Rules []FirewallRule `json:"rules,omitempty"`
	// List of errors for any rules that failed
	Errors []string `json:"errors,omitempty"`
}

// NewFirewallRulesAndErrors instantiates a new FirewallRulesAndErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirewallRulesAndErrors() *FirewallRulesAndErrors {
	this := FirewallRulesAndErrors{}
	return &this
}

// NewFirewallRulesAndErrorsWithDefaults instantiates a new FirewallRulesAndErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirewallRulesAndErrorsWithDefaults() *FirewallRulesAndErrors {
	this := FirewallRulesAndErrors{}
	return &this
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *FirewallRulesAndErrors) GetRules() []FirewallRule {
	if o == nil || o.Rules == nil {
		var ret []FirewallRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallRulesAndErrors) GetRulesOk() ([]FirewallRule, bool) {
	if o == nil || o.Rules == nil {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *FirewallRulesAndErrors) HasRules() bool {
	if o != nil && o.Rules != nil {
		return true
	}

	return false
}

// SetRules gets a reference to the given []FirewallRule and assigns it to the Rules field.
func (o *FirewallRulesAndErrors) SetRules(v []FirewallRule) {
	o.Rules = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *FirewallRulesAndErrors) GetErrors() []string {
	if o == nil || o.Errors == nil {
		var ret []string
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallRulesAndErrors) GetErrorsOk() ([]string, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *FirewallRulesAndErrors) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *FirewallRulesAndErrors) SetErrors(v []string) {
	o.Errors = v
}

func (o FirewallRulesAndErrors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableFirewallRulesAndErrors struct {
	value *FirewallRulesAndErrors
	isSet bool
}

func (v NullableFirewallRulesAndErrors) Get() *FirewallRulesAndErrors {
	return v.value
}

func (v *NullableFirewallRulesAndErrors) Set(val *FirewallRulesAndErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallRulesAndErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallRulesAndErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallRulesAndErrors(val *FirewallRulesAndErrors) *NullableFirewallRulesAndErrors {
	return &NullableFirewallRulesAndErrors{value: val, isSet: true}
}

func (v NullableFirewallRulesAndErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallRulesAndErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


