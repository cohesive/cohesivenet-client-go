/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet_models

import (
	"encoding/json"
)

// FirewallActionRequest struct for FirewallActionRequest
type FirewallActionRequest struct {
	// Action to take. Currently only reset_connection_tracking supported
	Action string `json:"action"`
}

// NewFirewallActionRequest instantiates a new FirewallActionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirewallActionRequest(action string) *FirewallActionRequest {
	this := FirewallActionRequest{}
	this.Action = action
	return &this
}

// NewFirewallActionRequestWithDefaults instantiates a new FirewallActionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirewallActionRequestWithDefaults() *FirewallActionRequest {
	this := FirewallActionRequest{}
	return &this
}

// GetAction returns the Action field value
func (o *FirewallActionRequest) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *FirewallActionRequest) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *FirewallActionRequest) SetAction(v string) {
	o.Action = v
}

func (o FirewallActionRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["action"] = o.Action
	}
	return json.Marshal(toSerialize)
}

type NullableFirewallActionRequest struct {
	value *FirewallActionRequest
	isSet bool
}

func (v NullableFirewallActionRequest) Get() *FirewallActionRequest {
	return v.value
}

func (v *NullableFirewallActionRequest) Set(val *FirewallActionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallActionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallActionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallActionRequest(val *FirewallActionRequest) *NullableFirewallActionRequest {
	return &NullableFirewallActionRequest{value: val, isSet: true}
}

func (v NullableFirewallActionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallActionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


