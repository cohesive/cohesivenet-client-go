/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"time"
)

// IpsecEndpointTrafficPair struct for IpsecEndpointTrafficPair
type IpsecEndpointTrafficPair struct {
	Id *int32 `json:"id,omitempty"`
	RemoteSubnet *string `json:"remote_subnet,omitempty"`
	LocalSubnet *string `json:"local_subnet,omitempty"`
	PingIpaddress NullableString `json:"ping_ipaddress,omitempty"`
	PingInterface *string `json:"ping_interface,omitempty"`
	PingInterval *int32 `json:"ping_interval,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Description NullableString `json:"description,omitempty"`
	IpsecEndpointId *int32 `json:"ipsec_endpoint_id,omitempty"`
	EndpointId *int32 `json:"endpoint_id,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewIpsecEndpointTrafficPair instantiates a new IpsecEndpointTrafficPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpsecEndpointTrafficPair() *IpsecEndpointTrafficPair {
	this := IpsecEndpointTrafficPair{}
	return &this
}

// NewIpsecEndpointTrafficPairWithDefaults instantiates a new IpsecEndpointTrafficPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpsecEndpointTrafficPairWithDefaults() *IpsecEndpointTrafficPair {
	this := IpsecEndpointTrafficPair{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IpsecEndpointTrafficPair) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecEndpointTrafficPair) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IpsecEndpointTrafficPair) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *IpsecEndpointTrafficPair) SetId(v int32) {
	o.Id = &v
}

// GetRemoteSubnet returns the RemoteSubnet field value if set, zero value otherwise.
func (o *IpsecEndpointTrafficPair) GetRemoteSubnet() string {
	if o == nil || o.RemoteSubnet == nil {
		var ret string
		return ret
	}
	return *o.RemoteSubnet
}

// GetRemoteSubnetOk returns a tuple with the RemoteSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecEndpointTrafficPair) GetRemoteSubnetOk() (*string, bool) {
	if o == nil || o.RemoteSubnet == nil {
		return nil, false
	}
	return o.RemoteSubnet, true
}

// HasRemoteSubnet returns a boolean if a field has been set.
func (o *IpsecEndpointTrafficPair) HasRemoteSubnet() bool {
	if o != nil && o.RemoteSubnet != nil {
		return true
	}

	return false
}

// SetRemoteSubnet gets a reference to the given string and assigns it to the RemoteSubnet field.
func (o *IpsecEndpointTrafficPair) SetRemoteSubnet(v string) {
	o.RemoteSubnet = &v
}

// GetLocalSubnet returns the LocalSubnet field value if set, zero value otherwise.
func (o *IpsecEndpointTrafficPair) GetLocalSubnet() string {
	if o == nil || o.LocalSubnet == nil {
		var ret string
		return ret
	}
	return *o.LocalSubnet
}

// GetLocalSubnetOk returns a tuple with the LocalSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecEndpointTrafficPair) GetLocalSubnetOk() (*string, bool) {
	if o == nil || o.LocalSubnet == nil {
		return nil, false
	}
	return o.LocalSubnet, true
}

// HasLocalSubnet returns a boolean if a field has been set.
func (o *IpsecEndpointTrafficPair) HasLocalSubnet() bool {
	if o != nil && o.LocalSubnet != nil {
		return true
	}

	return false
}

// SetLocalSubnet gets a reference to the given string and assigns it to the LocalSubnet field.
func (o *IpsecEndpointTrafficPair) SetLocalSubnet(v string) {
	o.LocalSubnet = &v
}

// GetPingIpaddress returns the PingIpaddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpsecEndpointTrafficPair) GetPingIpaddress() string {
	if o == nil || o.PingIpaddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.PingIpaddress.Get()
}

// GetPingIpaddressOk returns a tuple with the PingIpaddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpsecEndpointTrafficPair) GetPingIpaddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PingIpaddress.Get(), o.PingIpaddress.IsSet()
}

// HasPingIpaddress returns a boolean if a field has been set.
func (o *IpsecEndpointTrafficPair) HasPingIpaddress() bool {
	if o != nil && o.PingIpaddress.IsSet() {
		return true
	}

	return false
}

// SetPingIpaddress gets a reference to the given NullableString and assigns it to the PingIpaddress field.
func (o *IpsecEndpointTrafficPair) SetPingIpaddress(v string) {
	o.PingIpaddress.Set(&v)
}
// SetPingIpaddressNil sets the value for PingIpaddress to be an explicit nil
func (o *IpsecEndpointTrafficPair) SetPingIpaddressNil() {
	o.PingIpaddress.Set(nil)
}

// UnsetPingIpaddress ensures that no value is present for PingIpaddress, not even an explicit nil
func (o *IpsecEndpointTrafficPair) UnsetPingIpaddress() {
	o.PingIpaddress.Unset()
}

// GetPingInterface returns the PingInterface field value if set, zero value otherwise.
func (o *IpsecEndpointTrafficPair) GetPingInterface() string {
	if o == nil || o.PingInterface == nil {
		var ret string
		return ret
	}
	return *o.PingInterface
}

// GetPingInterfaceOk returns a tuple with the PingInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecEndpointTrafficPair) GetPingInterfaceOk() (*string, bool) {
	if o == nil || o.PingInterface == nil {
		return nil, false
	}
	return o.PingInterface, true
}

// HasPingInterface returns a boolean if a field has been set.
func (o *IpsecEndpointTrafficPair) HasPingInterface() bool {
	if o != nil && o.PingInterface != nil {
		return true
	}

	return false
}

// SetPingInterface gets a reference to the given string and assigns it to the PingInterface field.
func (o *IpsecEndpointTrafficPair) SetPingInterface(v string) {
	o.PingInterface = &v
}

// GetPingInterval returns the PingInterval field value if set, zero value otherwise.
func (o *IpsecEndpointTrafficPair) GetPingInterval() int32 {
	if o == nil || o.PingInterval == nil {
		var ret int32
		return ret
	}
	return *o.PingInterval
}

// GetPingIntervalOk returns a tuple with the PingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecEndpointTrafficPair) GetPingIntervalOk() (*int32, bool) {
	if o == nil || o.PingInterval == nil {
		return nil, false
	}
	return o.PingInterval, true
}

// HasPingInterval returns a boolean if a field has been set.
func (o *IpsecEndpointTrafficPair) HasPingInterval() bool {
	if o != nil && o.PingInterval != nil {
		return true
	}

	return false
}

// SetPingInterval gets a reference to the given int32 and assigns it to the PingInterval field.
func (o *IpsecEndpointTrafficPair) SetPingInterval(v int32) {
	o.PingInterval = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *IpsecEndpointTrafficPair) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecEndpointTrafficPair) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *IpsecEndpointTrafficPair) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *IpsecEndpointTrafficPair) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpsecEndpointTrafficPair) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpsecEndpointTrafficPair) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *IpsecEndpointTrafficPair) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *IpsecEndpointTrafficPair) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *IpsecEndpointTrafficPair) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *IpsecEndpointTrafficPair) UnsetDescription() {
	o.Description.Unset()
}

// GetIpsecEndpointId returns the IpsecEndpointId field value if set, zero value otherwise.
func (o *IpsecEndpointTrafficPair) GetIpsecEndpointId() int32 {
	if o == nil || o.IpsecEndpointId == nil {
		var ret int32
		return ret
	}
	return *o.IpsecEndpointId
}

// GetIpsecEndpointIdOk returns a tuple with the IpsecEndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecEndpointTrafficPair) GetIpsecEndpointIdOk() (*int32, bool) {
	if o == nil || o.IpsecEndpointId == nil {
		return nil, false
	}
	return o.IpsecEndpointId, true
}

// HasIpsecEndpointId returns a boolean if a field has been set.
func (o *IpsecEndpointTrafficPair) HasIpsecEndpointId() bool {
	if o != nil && o.IpsecEndpointId != nil {
		return true
	}

	return false
}

// SetIpsecEndpointId gets a reference to the given int32 and assigns it to the IpsecEndpointId field.
func (o *IpsecEndpointTrafficPair) SetIpsecEndpointId(v int32) {
	o.IpsecEndpointId = &v
}

// GetEndpointId returns the EndpointId field value if set, zero value otherwise.
func (o *IpsecEndpointTrafficPair) GetEndpointId() int32 {
	if o == nil || o.EndpointId == nil {
		var ret int32
		return ret
	}
	return *o.EndpointId
}

// GetEndpointIdOk returns a tuple with the EndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecEndpointTrafficPair) GetEndpointIdOk() (*int32, bool) {
	if o == nil || o.EndpointId == nil {
		return nil, false
	}
	return o.EndpointId, true
}

// HasEndpointId returns a boolean if a field has been set.
func (o *IpsecEndpointTrafficPair) HasEndpointId() bool {
	if o != nil && o.EndpointId != nil {
		return true
	}

	return false
}

// SetEndpointId gets a reference to the given int32 and assigns it to the EndpointId field.
func (o *IpsecEndpointTrafficPair) SetEndpointId(v int32) {
	o.EndpointId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IpsecEndpointTrafficPair) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecEndpointTrafficPair) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IpsecEndpointTrafficPair) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *IpsecEndpointTrafficPair) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *IpsecEndpointTrafficPair) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecEndpointTrafficPair) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IpsecEndpointTrafficPair) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *IpsecEndpointTrafficPair) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o IpsecEndpointTrafficPair) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.RemoteSubnet != nil {
		toSerialize["remote_subnet"] = o.RemoteSubnet
	}
	if o.LocalSubnet != nil {
		toSerialize["local_subnet"] = o.LocalSubnet
	}
	if o.PingIpaddress.IsSet() {
		toSerialize["ping_ipaddress"] = o.PingIpaddress.Get()
	}
	if o.PingInterface != nil {
		toSerialize["ping_interface"] = o.PingInterface
	}
	if o.PingInterval != nil {
		toSerialize["ping_interval"] = o.PingInterval
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.IpsecEndpointId != nil {
		toSerialize["ipsec_endpoint_id"] = o.IpsecEndpointId
	}
	if o.EndpointId != nil {
		toSerialize["endpoint_id"] = o.EndpointId
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableIpsecEndpointTrafficPair struct {
	value *IpsecEndpointTrafficPair
	isSet bool
}

func (v NullableIpsecEndpointTrafficPair) Get() *IpsecEndpointTrafficPair {
	return v.value
}

func (v *NullableIpsecEndpointTrafficPair) Set(val *IpsecEndpointTrafficPair) {
	v.value = val
	v.isSet = true
}

func (v NullableIpsecEndpointTrafficPair) IsSet() bool {
	return v.isSet
}

func (v *NullableIpsecEndpointTrafficPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpsecEndpointTrafficPair(val *IpsecEndpointTrafficPair) *NullableIpsecEndpointTrafficPair {
	return &NullableIpsecEndpointTrafficPair{value: val, isSet: true}
}

func (v NullableIpsecEndpointTrafficPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpsecEndpointTrafficPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


