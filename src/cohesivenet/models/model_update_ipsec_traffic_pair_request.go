/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// UpdateIpsecTrafficPairRequest struct for UpdateIpsecTrafficPairRequest
type UpdateIpsecTrafficPairRequest struct {
	// Remote subnet for tunnel in CIDR notation
	RemoteSubnet *string `json:"remote_subnet,omitempty"`
	// Local subnet for tunnel in CIDR notation
	LocalSubnet *string `json:"local_subnet,omitempty"`
	// Exo Ping feature - remote IP destination of ping
	PingIpaddress *string `json:"ping_ipaddress,omitempty"`
	// Exo Ping feature - periodicy of the ping in seconds
	PingInterval *int32 `json:"ping_interval,omitempty"`
	// Exo Ping feature - what network interface IP of the VNS3 controller to use as the source of ping
	PingInterface *string `json:"ping_interface,omitempty"`
	// Disables tunnel if set to false
	Enabled *bool `json:"enabled,omitempty"`
	Description *string `json:"description,omitempty"`
}

// NewUpdateIpsecTrafficPairRequest instantiates a new UpdateIpsecTrafficPairRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateIpsecTrafficPairRequest() *UpdateIpsecTrafficPairRequest {
	this := UpdateIpsecTrafficPairRequest{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// NewUpdateIpsecTrafficPairRequestWithDefaults instantiates a new UpdateIpsecTrafficPairRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateIpsecTrafficPairRequestWithDefaults() *UpdateIpsecTrafficPairRequest {
	this := UpdateIpsecTrafficPairRequest{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetRemoteSubnet returns the RemoteSubnet field value if set, zero value otherwise.
func (o *UpdateIpsecTrafficPairRequest) GetRemoteSubnet() string {
	if o == nil || o.RemoteSubnet == nil {
		var ret string
		return ret
	}
	return *o.RemoteSubnet
}

// GetRemoteSubnetOk returns a tuple with the RemoteSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIpsecTrafficPairRequest) GetRemoteSubnetOk() (*string, bool) {
	if o == nil || o.RemoteSubnet == nil {
		return nil, false
	}
	return o.RemoteSubnet, true
}

// HasRemoteSubnet returns a boolean if a field has been set.
func (o *UpdateIpsecTrafficPairRequest) HasRemoteSubnet() bool {
	if o != nil && o.RemoteSubnet != nil {
		return true
	}

	return false
}

// SetRemoteSubnet gets a reference to the given string and assigns it to the RemoteSubnet field.
func (o *UpdateIpsecTrafficPairRequest) SetRemoteSubnet(v string) {
	o.RemoteSubnet = &v
}

// GetLocalSubnet returns the LocalSubnet field value if set, zero value otherwise.
func (o *UpdateIpsecTrafficPairRequest) GetLocalSubnet() string {
	if o == nil || o.LocalSubnet == nil {
		var ret string
		return ret
	}
	return *o.LocalSubnet
}

// GetLocalSubnetOk returns a tuple with the LocalSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIpsecTrafficPairRequest) GetLocalSubnetOk() (*string, bool) {
	if o == nil || o.LocalSubnet == nil {
		return nil, false
	}
	return o.LocalSubnet, true
}

// HasLocalSubnet returns a boolean if a field has been set.
func (o *UpdateIpsecTrafficPairRequest) HasLocalSubnet() bool {
	if o != nil && o.LocalSubnet != nil {
		return true
	}

	return false
}

// SetLocalSubnet gets a reference to the given string and assigns it to the LocalSubnet field.
func (o *UpdateIpsecTrafficPairRequest) SetLocalSubnet(v string) {
	o.LocalSubnet = &v
}

// GetPingIpaddress returns the PingIpaddress field value if set, zero value otherwise.
func (o *UpdateIpsecTrafficPairRequest) GetPingIpaddress() string {
	if o == nil || o.PingIpaddress == nil {
		var ret string
		return ret
	}
	return *o.PingIpaddress
}

// GetPingIpaddressOk returns a tuple with the PingIpaddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIpsecTrafficPairRequest) GetPingIpaddressOk() (*string, bool) {
	if o == nil || o.PingIpaddress == nil {
		return nil, false
	}
	return o.PingIpaddress, true
}

// HasPingIpaddress returns a boolean if a field has been set.
func (o *UpdateIpsecTrafficPairRequest) HasPingIpaddress() bool {
	if o != nil && o.PingIpaddress != nil {
		return true
	}

	return false
}

// SetPingIpaddress gets a reference to the given string and assigns it to the PingIpaddress field.
func (o *UpdateIpsecTrafficPairRequest) SetPingIpaddress(v string) {
	o.PingIpaddress = &v
}

// GetPingInterval returns the PingInterval field value if set, zero value otherwise.
func (o *UpdateIpsecTrafficPairRequest) GetPingInterval() int32 {
	if o == nil || o.PingInterval == nil {
		var ret int32
		return ret
	}
	return *o.PingInterval
}

// GetPingIntervalOk returns a tuple with the PingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIpsecTrafficPairRequest) GetPingIntervalOk() (*int32, bool) {
	if o == nil || o.PingInterval == nil {
		return nil, false
	}
	return o.PingInterval, true
}

// HasPingInterval returns a boolean if a field has been set.
func (o *UpdateIpsecTrafficPairRequest) HasPingInterval() bool {
	if o != nil && o.PingInterval != nil {
		return true
	}

	return false
}

// SetPingInterval gets a reference to the given int32 and assigns it to the PingInterval field.
func (o *UpdateIpsecTrafficPairRequest) SetPingInterval(v int32) {
	o.PingInterval = &v
}

// GetPingInterface returns the PingInterface field value if set, zero value otherwise.
func (o *UpdateIpsecTrafficPairRequest) GetPingInterface() string {
	if o == nil || o.PingInterface == nil {
		var ret string
		return ret
	}
	return *o.PingInterface
}

// GetPingInterfaceOk returns a tuple with the PingInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIpsecTrafficPairRequest) GetPingInterfaceOk() (*string, bool) {
	if o == nil || o.PingInterface == nil {
		return nil, false
	}
	return o.PingInterface, true
}

// HasPingInterface returns a boolean if a field has been set.
func (o *UpdateIpsecTrafficPairRequest) HasPingInterface() bool {
	if o != nil && o.PingInterface != nil {
		return true
	}

	return false
}

// SetPingInterface gets a reference to the given string and assigns it to the PingInterface field.
func (o *UpdateIpsecTrafficPairRequest) SetPingInterface(v string) {
	o.PingInterface = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdateIpsecTrafficPairRequest) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIpsecTrafficPairRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UpdateIpsecTrafficPairRequest) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdateIpsecTrafficPairRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateIpsecTrafficPairRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateIpsecTrafficPairRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateIpsecTrafficPairRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateIpsecTrafficPairRequest) SetDescription(v string) {
	o.Description = &v
}

func (o UpdateIpsecTrafficPairRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RemoteSubnet != nil {
		toSerialize["remote_subnet"] = o.RemoteSubnet
	}
	if o.LocalSubnet != nil {
		toSerialize["local_subnet"] = o.LocalSubnet
	}
	if o.PingIpaddress != nil {
		toSerialize["ping_ipaddress"] = o.PingIpaddress
	}
	if o.PingInterval != nil {
		toSerialize["ping_interval"] = o.PingInterval
	}
	if o.PingInterface != nil {
		toSerialize["ping_interface"] = o.PingInterface
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateIpsecTrafficPairRequest struct {
	value *UpdateIpsecTrafficPairRequest
	isSet bool
}

func (v NullableUpdateIpsecTrafficPairRequest) Get() *UpdateIpsecTrafficPairRequest {
	return v.value
}

func (v *NullableUpdateIpsecTrafficPairRequest) Set(val *UpdateIpsecTrafficPairRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateIpsecTrafficPairRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateIpsecTrafficPairRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateIpsecTrafficPairRequest(val *UpdateIpsecTrafficPairRequest) *NullableUpdateIpsecTrafficPairRequest {
	return &NullableUpdateIpsecTrafficPairRequest{value: val, isSet: true}
}

func (v NullableUpdateIpsecTrafficPairRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateIpsecTrafficPairRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


