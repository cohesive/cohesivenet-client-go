/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// CreatePeerRequest struct for CreatePeerRequest
type CreatePeerRequest struct {
	// Manager ID as an integer of the the manager you are peering with,  NOT the id of the one you are calling from 
	Id int32 `json:"id"`
	// IP address or host name of the one you are peering with.
	Name string `json:"name"`
	// link MTU between 500 and 4800. Defaults to 1500
	OverlayMtu *string `json:"overlay_mtu,omitempty"`
	// Setting false will NOT finalize the peering operation.  A peer \"reconfigure\" call would then be required. Default is true 
	Force *bool `json:"force,omitempty"`
}

// NewCreatePeerRequest instantiates a new CreatePeerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePeerRequest(id int32, name string) *CreatePeerRequest {
	this := CreatePeerRequest{}
	this.Id = id
	this.Name = name
	return &this
}

// NewCreatePeerRequestWithDefaults instantiates a new CreatePeerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePeerRequestWithDefaults() *CreatePeerRequest {
	this := CreatePeerRequest{}
	return &this
}

// GetId returns the Id field value
func (o *CreatePeerRequest) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CreatePeerRequest) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CreatePeerRequest) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CreatePeerRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreatePeerRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreatePeerRequest) SetName(v string) {
	o.Name = v
}

// GetOverlayMtu returns the OverlayMtu field value if set, zero value otherwise.
func (o *CreatePeerRequest) GetOverlayMtu() string {
	if o == nil || o.OverlayMtu == nil {
		var ret string
		return ret
	}
	return *o.OverlayMtu
}

// GetOverlayMtuOk returns a tuple with the OverlayMtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePeerRequest) GetOverlayMtuOk() (*string, bool) {
	if o == nil || o.OverlayMtu == nil {
		return nil, false
	}
	return o.OverlayMtu, true
}

// HasOverlayMtu returns a boolean if a field has been set.
func (o *CreatePeerRequest) HasOverlayMtu() bool {
	if o != nil && o.OverlayMtu != nil {
		return true
	}

	return false
}

// SetOverlayMtu gets a reference to the given string and assigns it to the OverlayMtu field.
func (o *CreatePeerRequest) SetOverlayMtu(v string) {
	o.OverlayMtu = &v
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *CreatePeerRequest) GetForce() bool {
	if o == nil || o.Force == nil {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePeerRequest) GetForceOk() (*bool, bool) {
	if o == nil || o.Force == nil {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *CreatePeerRequest) HasForce() bool {
	if o != nil && o.Force != nil {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *CreatePeerRequest) SetForce(v bool) {
	o.Force = &v
}

func (o CreatePeerRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.OverlayMtu != nil {
		toSerialize["overlay_mtu"] = o.OverlayMtu
	}
	if o.Force != nil {
		toSerialize["force"] = o.Force
	}
	return json.Marshal(toSerialize)
}

type NullableCreatePeerRequest struct {
	value *CreatePeerRequest
	isSet bool
}

func (v NullableCreatePeerRequest) Get() *CreatePeerRequest {
	return v.value
}

func (v *NullableCreatePeerRequest) Set(val *CreatePeerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePeerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePeerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePeerRequest(val *CreatePeerRequest) *NullableCreatePeerRequest {
	return &NullableCreatePeerRequest{value: val, isSet: true}
}

func (v NullableCreatePeerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePeerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


