/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// SSLCert struct for SSLCert
type SSLCert struct {
	Subject *string `json:"subject,omitempty"`
	Issuer *string `json:"issuer,omitempty"`
	Before *string `json:"before,omitempty"`
	After *string `json:"after,omitempty"`
	Algorithm *string `json:"algorithm,omitempty"`
	Sha1Fingerprint *string `json:"sha1_fingerprint,omitempty"`
	Sha256Fingerprint *string `json:"sha256_fingerprint,omitempty"`
}

// NewSSLCert instantiates a new SSLCert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSSLCert() *SSLCert {
	this := SSLCert{}
	return &this
}

// NewSSLCertWithDefaults instantiates a new SSLCert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSSLCertWithDefaults() *SSLCert {
	this := SSLCert{}
	return &this
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *SSLCert) GetSubject() string {
	if o == nil || o.Subject == nil {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCert) GetSubjectOk() (*string, bool) {
	if o == nil || o.Subject == nil {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *SSLCert) HasSubject() bool {
	if o != nil && o.Subject != nil {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *SSLCert) SetSubject(v string) {
	o.Subject = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *SSLCert) GetIssuer() string {
	if o == nil || o.Issuer == nil {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCert) GetIssuerOk() (*string, bool) {
	if o == nil || o.Issuer == nil {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *SSLCert) HasIssuer() bool {
	if o != nil && o.Issuer != nil {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *SSLCert) SetIssuer(v string) {
	o.Issuer = &v
}

// GetBefore returns the Before field value if set, zero value otherwise.
func (o *SSLCert) GetBefore() string {
	if o == nil || o.Before == nil {
		var ret string
		return ret
	}
	return *o.Before
}

// GetBeforeOk returns a tuple with the Before field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCert) GetBeforeOk() (*string, bool) {
	if o == nil || o.Before == nil {
		return nil, false
	}
	return o.Before, true
}

// HasBefore returns a boolean if a field has been set.
func (o *SSLCert) HasBefore() bool {
	if o != nil && o.Before != nil {
		return true
	}

	return false
}

// SetBefore gets a reference to the given string and assigns it to the Before field.
func (o *SSLCert) SetBefore(v string) {
	o.Before = &v
}

// GetAfter returns the After field value if set, zero value otherwise.
func (o *SSLCert) GetAfter() string {
	if o == nil || o.After == nil {
		var ret string
		return ret
	}
	return *o.After
}

// GetAfterOk returns a tuple with the After field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCert) GetAfterOk() (*string, bool) {
	if o == nil || o.After == nil {
		return nil, false
	}
	return o.After, true
}

// HasAfter returns a boolean if a field has been set.
func (o *SSLCert) HasAfter() bool {
	if o != nil && o.After != nil {
		return true
	}

	return false
}

// SetAfter gets a reference to the given string and assigns it to the After field.
func (o *SSLCert) SetAfter(v string) {
	o.After = &v
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *SSLCert) GetAlgorithm() string {
	if o == nil || o.Algorithm == nil {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCert) GetAlgorithmOk() (*string, bool) {
	if o == nil || o.Algorithm == nil {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *SSLCert) HasAlgorithm() bool {
	if o != nil && o.Algorithm != nil {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *SSLCert) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetSha1Fingerprint returns the Sha1Fingerprint field value if set, zero value otherwise.
func (o *SSLCert) GetSha1Fingerprint() string {
	if o == nil || o.Sha1Fingerprint == nil {
		var ret string
		return ret
	}
	return *o.Sha1Fingerprint
}

// GetSha1FingerprintOk returns a tuple with the Sha1Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCert) GetSha1FingerprintOk() (*string, bool) {
	if o == nil || o.Sha1Fingerprint == nil {
		return nil, false
	}
	return o.Sha1Fingerprint, true
}

// HasSha1Fingerprint returns a boolean if a field has been set.
func (o *SSLCert) HasSha1Fingerprint() bool {
	if o != nil && o.Sha1Fingerprint != nil {
		return true
	}

	return false
}

// SetSha1Fingerprint gets a reference to the given string and assigns it to the Sha1Fingerprint field.
func (o *SSLCert) SetSha1Fingerprint(v string) {
	o.Sha1Fingerprint = &v
}

// GetSha256Fingerprint returns the Sha256Fingerprint field value if set, zero value otherwise.
func (o *SSLCert) GetSha256Fingerprint() string {
	if o == nil || o.Sha256Fingerprint == nil {
		var ret string
		return ret
	}
	return *o.Sha256Fingerprint
}

// GetSha256FingerprintOk returns a tuple with the Sha256Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLCert) GetSha256FingerprintOk() (*string, bool) {
	if o == nil || o.Sha256Fingerprint == nil {
		return nil, false
	}
	return o.Sha256Fingerprint, true
}

// HasSha256Fingerprint returns a boolean if a field has been set.
func (o *SSLCert) HasSha256Fingerprint() bool {
	if o != nil && o.Sha256Fingerprint != nil {
		return true
	}

	return false
}

// SetSha256Fingerprint gets a reference to the given string and assigns it to the Sha256Fingerprint field.
func (o *SSLCert) SetSha256Fingerprint(v string) {
	o.Sha256Fingerprint = &v
}

func (o SSLCert) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Subject != nil {
		toSerialize["subject"] = o.Subject
	}
	if o.Issuer != nil {
		toSerialize["issuer"] = o.Issuer
	}
	if o.Before != nil {
		toSerialize["before"] = o.Before
	}
	if o.After != nil {
		toSerialize["after"] = o.After
	}
	if o.Algorithm != nil {
		toSerialize["algorithm"] = o.Algorithm
	}
	if o.Sha1Fingerprint != nil {
		toSerialize["sha1_fingerprint"] = o.Sha1Fingerprint
	}
	if o.Sha256Fingerprint != nil {
		toSerialize["sha256_fingerprint"] = o.Sha256Fingerprint
	}
	return json.Marshal(toSerialize)
}

type NullableSSLCert struct {
	value *SSLCert
	isSet bool
}

func (v NullableSSLCert) Get() *SSLCert {
	return v.value
}

func (v *NullableSSLCert) Set(val *SSLCert) {
	v.value = val
	v.isSet = true
}

func (v NullableSSLCert) IsSet() bool {
	return v.isSet
}

func (v *NullableSSLCert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSSLCert(val *SSLCert) *NullableSSLCert {
	return &NullableSSLCert{value: val, isSet: true}
}

func (v NullableSSLCert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSSLCert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


