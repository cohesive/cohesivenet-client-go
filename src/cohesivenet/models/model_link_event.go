/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet_models

import (
	"encoding/json"
)

// LinkEvent struct for LinkEvent
type LinkEvent struct {
	// Tunnel event, up or down
	Event *string `json:"event,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	TimestampI *int32 `json:"timestamp_i,omitempty"`
}

// NewLinkEvent instantiates a new LinkEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkEvent() *LinkEvent {
	this := LinkEvent{}
	return &this
}

// NewLinkEventWithDefaults instantiates a new LinkEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkEventWithDefaults() *LinkEvent {
	this := LinkEvent{}
	return &this
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *LinkEvent) GetEvent() string {
	if o == nil || o.Event == nil {
		var ret string
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkEvent) GetEventOk() (*string, bool) {
	if o == nil || o.Event == nil {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *LinkEvent) HasEvent() bool {
	if o != nil && o.Event != nil {
		return true
	}

	return false
}

// SetEvent gets a reference to the given string and assigns it to the Event field.
func (o *LinkEvent) SetEvent(v string) {
	o.Event = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *LinkEvent) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkEvent) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *LinkEvent) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *LinkEvent) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetTimestampI returns the TimestampI field value if set, zero value otherwise.
func (o *LinkEvent) GetTimestampI() int32 {
	if o == nil || o.TimestampI == nil {
		var ret int32
		return ret
	}
	return *o.TimestampI
}

// GetTimestampIOk returns a tuple with the TimestampI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkEvent) GetTimestampIOk() (*int32, bool) {
	if o == nil || o.TimestampI == nil {
		return nil, false
	}
	return o.TimestampI, true
}

// HasTimestampI returns a boolean if a field has been set.
func (o *LinkEvent) HasTimestampI() bool {
	if o != nil && o.TimestampI != nil {
		return true
	}

	return false
}

// SetTimestampI gets a reference to the given int32 and assigns it to the TimestampI field.
func (o *LinkEvent) SetTimestampI(v int32) {
	o.TimestampI = &v
}

func (o LinkEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Event != nil {
		toSerialize["event"] = o.Event
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.TimestampI != nil {
		toSerialize["timestamp_i"] = o.TimestampI
	}
	return json.Marshal(toSerialize)
}

type NullableLinkEvent struct {
	value *LinkEvent
	isSet bool
}

func (v NullableLinkEvent) Get() *LinkEvent {
	return v.value
}

func (v *NullableLinkEvent) Set(val *LinkEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkEvent(val *LinkEvent) *NullableLinkEvent {
	return &NullableLinkEvent{value: val, isSet: true}
}

func (v NullableLinkEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


