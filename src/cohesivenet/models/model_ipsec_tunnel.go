/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// IpsecTunnel struct for IpsecTunnel
type IpsecTunnel struct {
	Id *int32 `json:"id,omitempty"`
	LocalSubnet *string `json:"local_subnet,omitempty"`
	RemoteSubnet *string `json:"remote_subnet,omitempty"`
	Endpointid *int32 `json:"endpointid,omitempty"`
	EndpointId *int32 `json:"endpoint_id,omitempty"`
	EndpointName *string `json:"endpoint_name,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Active *bool `json:"active,omitempty"`
	Description NullableString `json:"description,omitempty"`
	// True if tunnel was just bounced
	Bounce *bool `json:"bounce,omitempty"`
	Connected *bool `json:"connected,omitempty"`
	PingInterface *string `json:"ping_interface,omitempty"`
	// Interval for ping in seconds
	PingInterval NullableInt32 `json:"ping_interval,omitempty"`
	PingIpaddress *string `json:"ping_ipaddress,omitempty"`
	TunnelParams *IpsecTunnelParams `json:"tunnel_params,omitempty"`
}

// NewIpsecTunnel instantiates a new IpsecTunnel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpsecTunnel() *IpsecTunnel {
	this := IpsecTunnel{}
	return &this
}

// NewIpsecTunnelWithDefaults instantiates a new IpsecTunnel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpsecTunnelWithDefaults() *IpsecTunnel {
	this := IpsecTunnel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IpsecTunnel) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecTunnel) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IpsecTunnel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *IpsecTunnel) SetId(v int32) {
	o.Id = &v
}

// GetLocalSubnet returns the LocalSubnet field value if set, zero value otherwise.
func (o *IpsecTunnel) GetLocalSubnet() string {
	if o == nil || o.LocalSubnet == nil {
		var ret string
		return ret
	}
	return *o.LocalSubnet
}

// GetLocalSubnetOk returns a tuple with the LocalSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecTunnel) GetLocalSubnetOk() (*string, bool) {
	if o == nil || o.LocalSubnet == nil {
		return nil, false
	}
	return o.LocalSubnet, true
}

// HasLocalSubnet returns a boolean if a field has been set.
func (o *IpsecTunnel) HasLocalSubnet() bool {
	if o != nil && o.LocalSubnet != nil {
		return true
	}

	return false
}

// SetLocalSubnet gets a reference to the given string and assigns it to the LocalSubnet field.
func (o *IpsecTunnel) SetLocalSubnet(v string) {
	o.LocalSubnet = &v
}

// GetRemoteSubnet returns the RemoteSubnet field value if set, zero value otherwise.
func (o *IpsecTunnel) GetRemoteSubnet() string {
	if o == nil || o.RemoteSubnet == nil {
		var ret string
		return ret
	}
	return *o.RemoteSubnet
}

// GetRemoteSubnetOk returns a tuple with the RemoteSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecTunnel) GetRemoteSubnetOk() (*string, bool) {
	if o == nil || o.RemoteSubnet == nil {
		return nil, false
	}
	return o.RemoteSubnet, true
}

// HasRemoteSubnet returns a boolean if a field has been set.
func (o *IpsecTunnel) HasRemoteSubnet() bool {
	if o != nil && o.RemoteSubnet != nil {
		return true
	}

	return false
}

// SetRemoteSubnet gets a reference to the given string and assigns it to the RemoteSubnet field.
func (o *IpsecTunnel) SetRemoteSubnet(v string) {
	o.RemoteSubnet = &v
}

// GetEndpointid returns the Endpointid field value if set, zero value otherwise.
func (o *IpsecTunnel) GetEndpointid() int32 {
	if o == nil || o.Endpointid == nil {
		var ret int32
		return ret
	}
	return *o.Endpointid
}

// GetEndpointidOk returns a tuple with the Endpointid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecTunnel) GetEndpointidOk() (*int32, bool) {
	if o == nil || o.Endpointid == nil {
		return nil, false
	}
	return o.Endpointid, true
}

// HasEndpointid returns a boolean if a field has been set.
func (o *IpsecTunnel) HasEndpointid() bool {
	if o != nil && o.Endpointid != nil {
		return true
	}

	return false
}

// SetEndpointid gets a reference to the given int32 and assigns it to the Endpointid field.
func (o *IpsecTunnel) SetEndpointid(v int32) {
	o.Endpointid = &v
}

// GetEndpointId returns the EndpointId field value if set, zero value otherwise.
func (o *IpsecTunnel) GetEndpointId() int32 {
	if o == nil || o.EndpointId == nil {
		var ret int32
		return ret
	}
	return *o.EndpointId
}

// GetEndpointIdOk returns a tuple with the EndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecTunnel) GetEndpointIdOk() (*int32, bool) {
	if o == nil || o.EndpointId == nil {
		return nil, false
	}
	return o.EndpointId, true
}

// HasEndpointId returns a boolean if a field has been set.
func (o *IpsecTunnel) HasEndpointId() bool {
	if o != nil && o.EndpointId != nil {
		return true
	}

	return false
}

// SetEndpointId gets a reference to the given int32 and assigns it to the EndpointId field.
func (o *IpsecTunnel) SetEndpointId(v int32) {
	o.EndpointId = &v
}

// GetEndpointName returns the EndpointName field value if set, zero value otherwise.
func (o *IpsecTunnel) GetEndpointName() string {
	if o == nil || o.EndpointName == nil {
		var ret string
		return ret
	}
	return *o.EndpointName
}

// GetEndpointNameOk returns a tuple with the EndpointName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecTunnel) GetEndpointNameOk() (*string, bool) {
	if o == nil || o.EndpointName == nil {
		return nil, false
	}
	return o.EndpointName, true
}

// HasEndpointName returns a boolean if a field has been set.
func (o *IpsecTunnel) HasEndpointName() bool {
	if o != nil && o.EndpointName != nil {
		return true
	}

	return false
}

// SetEndpointName gets a reference to the given string and assigns it to the EndpointName field.
func (o *IpsecTunnel) SetEndpointName(v string) {
	o.EndpointName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *IpsecTunnel) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecTunnel) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *IpsecTunnel) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *IpsecTunnel) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *IpsecTunnel) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecTunnel) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *IpsecTunnel) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *IpsecTunnel) SetActive(v bool) {
	o.Active = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpsecTunnel) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpsecTunnel) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *IpsecTunnel) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *IpsecTunnel) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *IpsecTunnel) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *IpsecTunnel) UnsetDescription() {
	o.Description.Unset()
}

// GetBounce returns the Bounce field value if set, zero value otherwise.
func (o *IpsecTunnel) GetBounce() bool {
	if o == nil || o.Bounce == nil {
		var ret bool
		return ret
	}
	return *o.Bounce
}

// GetBounceOk returns a tuple with the Bounce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecTunnel) GetBounceOk() (*bool, bool) {
	if o == nil || o.Bounce == nil {
		return nil, false
	}
	return o.Bounce, true
}

// HasBounce returns a boolean if a field has been set.
func (o *IpsecTunnel) HasBounce() bool {
	if o != nil && o.Bounce != nil {
		return true
	}

	return false
}

// SetBounce gets a reference to the given bool and assigns it to the Bounce field.
func (o *IpsecTunnel) SetBounce(v bool) {
	o.Bounce = &v
}

// GetConnected returns the Connected field value if set, zero value otherwise.
func (o *IpsecTunnel) GetConnected() bool {
	if o == nil || o.Connected == nil {
		var ret bool
		return ret
	}
	return *o.Connected
}

// GetConnectedOk returns a tuple with the Connected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecTunnel) GetConnectedOk() (*bool, bool) {
	if o == nil || o.Connected == nil {
		return nil, false
	}
	return o.Connected, true
}

// HasConnected returns a boolean if a field has been set.
func (o *IpsecTunnel) HasConnected() bool {
	if o != nil && o.Connected != nil {
		return true
	}

	return false
}

// SetConnected gets a reference to the given bool and assigns it to the Connected field.
func (o *IpsecTunnel) SetConnected(v bool) {
	o.Connected = &v
}

// GetPingInterface returns the PingInterface field value if set, zero value otherwise.
func (o *IpsecTunnel) GetPingInterface() string {
	if o == nil || o.PingInterface == nil {
		var ret string
		return ret
	}
	return *o.PingInterface
}

// GetPingInterfaceOk returns a tuple with the PingInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecTunnel) GetPingInterfaceOk() (*string, bool) {
	if o == nil || o.PingInterface == nil {
		return nil, false
	}
	return o.PingInterface, true
}

// HasPingInterface returns a boolean if a field has been set.
func (o *IpsecTunnel) HasPingInterface() bool {
	if o != nil && o.PingInterface != nil {
		return true
	}

	return false
}

// SetPingInterface gets a reference to the given string and assigns it to the PingInterface field.
func (o *IpsecTunnel) SetPingInterface(v string) {
	o.PingInterface = &v
}

// GetPingInterval returns the PingInterval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpsecTunnel) GetPingInterval() int32 {
	if o == nil || o.PingInterval.Get() == nil {
		var ret int32
		return ret
	}
	return *o.PingInterval.Get()
}

// GetPingIntervalOk returns a tuple with the PingInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpsecTunnel) GetPingIntervalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PingInterval.Get(), o.PingInterval.IsSet()
}

// HasPingInterval returns a boolean if a field has been set.
func (o *IpsecTunnel) HasPingInterval() bool {
	if o != nil && o.PingInterval.IsSet() {
		return true
	}

	return false
}

// SetPingInterval gets a reference to the given NullableInt32 and assigns it to the PingInterval field.
func (o *IpsecTunnel) SetPingInterval(v int32) {
	o.PingInterval.Set(&v)
}
// SetPingIntervalNil sets the value for PingInterval to be an explicit nil
func (o *IpsecTunnel) SetPingIntervalNil() {
	o.PingInterval.Set(nil)
}

// UnsetPingInterval ensures that no value is present for PingInterval, not even an explicit nil
func (o *IpsecTunnel) UnsetPingInterval() {
	o.PingInterval.Unset()
}

// GetPingIpaddress returns the PingIpaddress field value if set, zero value otherwise.
func (o *IpsecTunnel) GetPingIpaddress() string {
	if o == nil || o.PingIpaddress == nil {
		var ret string
		return ret
	}
	return *o.PingIpaddress
}

// GetPingIpaddressOk returns a tuple with the PingIpaddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecTunnel) GetPingIpaddressOk() (*string, bool) {
	if o == nil || o.PingIpaddress == nil {
		return nil, false
	}
	return o.PingIpaddress, true
}

// HasPingIpaddress returns a boolean if a field has been set.
func (o *IpsecTunnel) HasPingIpaddress() bool {
	if o != nil && o.PingIpaddress != nil {
		return true
	}

	return false
}

// SetPingIpaddress gets a reference to the given string and assigns it to the PingIpaddress field.
func (o *IpsecTunnel) SetPingIpaddress(v string) {
	o.PingIpaddress = &v
}

// GetTunnelParams returns the TunnelParams field value if set, zero value otherwise.
func (o *IpsecTunnel) GetTunnelParams() IpsecTunnelParams {
	if o == nil || o.TunnelParams == nil {
		var ret IpsecTunnelParams
		return ret
	}
	return *o.TunnelParams
}

// GetTunnelParamsOk returns a tuple with the TunnelParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecTunnel) GetTunnelParamsOk() (*IpsecTunnelParams, bool) {
	if o == nil || o.TunnelParams == nil {
		return nil, false
	}
	return o.TunnelParams, true
}

// HasTunnelParams returns a boolean if a field has been set.
func (o *IpsecTunnel) HasTunnelParams() bool {
	if o != nil && o.TunnelParams != nil {
		return true
	}

	return false
}

// SetTunnelParams gets a reference to the given IpsecTunnelParams and assigns it to the TunnelParams field.
func (o *IpsecTunnel) SetTunnelParams(v IpsecTunnelParams) {
	o.TunnelParams = &v
}

func (o IpsecTunnel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LocalSubnet != nil {
		toSerialize["local_subnet"] = o.LocalSubnet
	}
	if o.RemoteSubnet != nil {
		toSerialize["remote_subnet"] = o.RemoteSubnet
	}
	if o.Endpointid != nil {
		toSerialize["endpointid"] = o.Endpointid
	}
	if o.EndpointId != nil {
		toSerialize["endpoint_id"] = o.EndpointId
	}
	if o.EndpointName != nil {
		toSerialize["endpoint_name"] = o.EndpointName
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Bounce != nil {
		toSerialize["bounce"] = o.Bounce
	}
	if o.Connected != nil {
		toSerialize["connected"] = o.Connected
	}
	if o.PingInterface != nil {
		toSerialize["ping_interface"] = o.PingInterface
	}
	if o.PingInterval.IsSet() {
		toSerialize["ping_interval"] = o.PingInterval.Get()
	}
	if o.PingIpaddress != nil {
		toSerialize["ping_ipaddress"] = o.PingIpaddress
	}
	if o.TunnelParams != nil {
		toSerialize["tunnel_params"] = o.TunnelParams
	}
	return json.Marshal(toSerialize)
}

type NullableIpsecTunnel struct {
	value *IpsecTunnel
	isSet bool
}

func (v NullableIpsecTunnel) Get() *IpsecTunnel {
	return v.value
}

func (v *NullableIpsecTunnel) Set(val *IpsecTunnel) {
	v.value = val
	v.isSet = true
}

func (v NullableIpsecTunnel) IsSet() bool {
	return v.isSet
}

func (v *NullableIpsecTunnel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpsecTunnel(val *IpsecTunnel) *NullableIpsecTunnel {
	return &NullableIpsecTunnel{value: val, isSet: true}
}

func (v NullableIpsecTunnel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpsecTunnel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


