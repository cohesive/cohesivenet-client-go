/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet_models

import (
	"encoding/json"
)

// UpdatePluginRequest struct for UpdatePluginRequest
type UpdatePluginRequest struct {
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	// Plugin start command
	Command *string `json:"command,omitempty"`
	// URL to documentation for the plugin provided by plugin developer
	DocumentationUrl *string `json:"documentation_url,omitempty"`
	// URL to support site provided by plugin developer
	SupportUrl *string `json:"support_url,omitempty"`
	Version *string `json:"version,omitempty"`
	// Key Value pairs associated with plugin
	Tags *map[string]string `json:"tags,omitempty"`
}

// NewUpdatePluginRequest instantiates a new UpdatePluginRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePluginRequest() *UpdatePluginRequest {
	this := UpdatePluginRequest{}
	return &this
}

// NewUpdatePluginRequestWithDefaults instantiates a new UpdatePluginRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePluginRequestWithDefaults() *UpdatePluginRequest {
	this := UpdatePluginRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdatePluginRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePluginRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdatePluginRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdatePluginRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdatePluginRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePluginRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdatePluginRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdatePluginRequest) SetDescription(v string) {
	o.Description = &v
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *UpdatePluginRequest) GetCommand() string {
	if o == nil || o.Command == nil {
		var ret string
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePluginRequest) GetCommandOk() (*string, bool) {
	if o == nil || o.Command == nil {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *UpdatePluginRequest) HasCommand() bool {
	if o != nil && o.Command != nil {
		return true
	}

	return false
}

// SetCommand gets a reference to the given string and assigns it to the Command field.
func (o *UpdatePluginRequest) SetCommand(v string) {
	o.Command = &v
}

// GetDocumentationUrl returns the DocumentationUrl field value if set, zero value otherwise.
func (o *UpdatePluginRequest) GetDocumentationUrl() string {
	if o == nil || o.DocumentationUrl == nil {
		var ret string
		return ret
	}
	return *o.DocumentationUrl
}

// GetDocumentationUrlOk returns a tuple with the DocumentationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePluginRequest) GetDocumentationUrlOk() (*string, bool) {
	if o == nil || o.DocumentationUrl == nil {
		return nil, false
	}
	return o.DocumentationUrl, true
}

// HasDocumentationUrl returns a boolean if a field has been set.
func (o *UpdatePluginRequest) HasDocumentationUrl() bool {
	if o != nil && o.DocumentationUrl != nil {
		return true
	}

	return false
}

// SetDocumentationUrl gets a reference to the given string and assigns it to the DocumentationUrl field.
func (o *UpdatePluginRequest) SetDocumentationUrl(v string) {
	o.DocumentationUrl = &v
}

// GetSupportUrl returns the SupportUrl field value if set, zero value otherwise.
func (o *UpdatePluginRequest) GetSupportUrl() string {
	if o == nil || o.SupportUrl == nil {
		var ret string
		return ret
	}
	return *o.SupportUrl
}

// GetSupportUrlOk returns a tuple with the SupportUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePluginRequest) GetSupportUrlOk() (*string, bool) {
	if o == nil || o.SupportUrl == nil {
		return nil, false
	}
	return o.SupportUrl, true
}

// HasSupportUrl returns a boolean if a field has been set.
func (o *UpdatePluginRequest) HasSupportUrl() bool {
	if o != nil && o.SupportUrl != nil {
		return true
	}

	return false
}

// SetSupportUrl gets a reference to the given string and assigns it to the SupportUrl field.
func (o *UpdatePluginRequest) SetSupportUrl(v string) {
	o.SupportUrl = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *UpdatePluginRequest) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePluginRequest) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *UpdatePluginRequest) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *UpdatePluginRequest) SetVersion(v string) {
	o.Version = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *UpdatePluginRequest) GetTags() map[string]string {
	if o == nil || o.Tags == nil {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePluginRequest) GetTagsOk() (*map[string]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *UpdatePluginRequest) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *UpdatePluginRequest) SetTags(v map[string]string) {
	o.Tags = &v
}

func (o UpdatePluginRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Command != nil {
		toSerialize["command"] = o.Command
	}
	if o.DocumentationUrl != nil {
		toSerialize["documentation_url"] = o.DocumentationUrl
	}
	if o.SupportUrl != nil {
		toSerialize["support_url"] = o.SupportUrl
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableUpdatePluginRequest struct {
	value *UpdatePluginRequest
	isSet bool
}

func (v NullableUpdatePluginRequest) Get() *UpdatePluginRequest {
	return v.value
}

func (v *NullableUpdatePluginRequest) Set(val *UpdatePluginRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePluginRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePluginRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePluginRequest(val *UpdatePluginRequest) *NullableUpdatePluginRequest {
	return &NullableUpdatePluginRequest{value: val, isSet: true}
}

func (v NullableUpdatePluginRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePluginRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


