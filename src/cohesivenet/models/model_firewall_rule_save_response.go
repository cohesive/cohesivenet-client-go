/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// FirewallRuleSaveResponse - struct for FirewallRuleSaveResponse. Note OneOf logic
type FirewallRuleSaveResponse struct {
	FirewallRulesAndErrorsResponse *FirewallRulesAndErrorsResponse
	FirewallRuleDetailResponse *FirewallRuleDetailResponse
}

// FirewallRulesAndErrorsResponseAsFirewallRuleSaveResponse is a convenience function that returns FirewallRulesAndErrorsResponse wrapped in FirewallRuleSaveResponse
func FirewallRulesAndErrorsResponseAsFirewallRuleSaveResponse(v *FirewallRulesAndErrorsResponse) FirewallRuleSaveResponse {
	return FirewallRuleSaveResponse{
		FirewallRulesAndErrorsResponse: v,
	}
}

// FirewallRuleDetailResponseAsFirewallRuleSaveResponse is a convenience function that returns FirewallRuleDetailResponse wrapped in FirewallRuleSaveResponse
func FirewallRuleDetailResponseAsFirewallRuleSaveResponse(v *FirewallRuleDetailResponse) FirewallRuleSaveResponse {
	return FirewallRuleSaveResponse{
		FirewallRuleDetailResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FirewallRuleSaveResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FirewallRulesAndErrorsResponse
	err = newStrictDecoder(data).Decode(&dst.FirewallRulesAndErrorsResponse)
	if err == nil {
		jsonFirewallRulesAndErrorsResponse, _ := json.Marshal(dst.FirewallRulesAndErrorsResponse)
		if string(jsonFirewallRulesAndErrorsResponse) == "{}" { // empty struct
			dst.FirewallRulesAndErrorsResponse = nil
		} else {
			match++
		}
	} else {
		dst.FirewallRulesAndErrorsResponse = nil
	}

	// try to unmarshal data into FirewallRuleDetailResponse
	err = newStrictDecoder(data).Decode(&dst.FirewallRuleDetailResponse)
	if err == nil {
		jsonFirewallRuleDetailResponse, _ := json.Marshal(dst.FirewallRuleDetailResponse)
		if string(jsonFirewallRuleDetailResponse) == "{}" { // empty struct
			dst.FirewallRuleDetailResponse = nil
		} else {
			match++
		}
	} else {
		dst.FirewallRuleDetailResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FirewallRulesAndErrorsResponse = nil
		dst.FirewallRuleDetailResponse = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(FirewallRuleSaveResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(FirewallRuleSaveResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FirewallRuleSaveResponse) MarshalJSON() ([]byte, error) {
	if src.FirewallRulesAndErrorsResponse != nil {
		return json.Marshal(&src.FirewallRulesAndErrorsResponse)
	}

	if src.FirewallRuleDetailResponse != nil {
		return json.Marshal(&src.FirewallRuleDetailResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FirewallRuleSaveResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FirewallRulesAndErrorsResponse != nil {
		return obj.FirewallRulesAndErrorsResponse
	}

	if obj.FirewallRuleDetailResponse != nil {
		return obj.FirewallRuleDetailResponse
	}

	// all schemas are nil
	return nil
}

type NullableFirewallRuleSaveResponse struct {
	value *FirewallRuleSaveResponse
	isSet bool
}

func (v NullableFirewallRuleSaveResponse) Get() *FirewallRuleSaveResponse {
	return v.value
}

func (v *NullableFirewallRuleSaveResponse) Set(val *FirewallRuleSaveResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallRuleSaveResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallRuleSaveResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallRuleSaveResponse(val *FirewallRuleSaveResponse) *NullableFirewallRuleSaveResponse {
	return &NullableFirewallRuleSaveResponse{value: val, isSet: true}
}

func (v NullableFirewallRuleSaveResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallRuleSaveResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


