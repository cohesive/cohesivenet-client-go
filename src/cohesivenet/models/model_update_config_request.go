/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// UpdateConfigRequest struct for UpdateConfigRequest
type UpdateConfigRequest struct {
	// Specifies a text name to display at the top of the web ui and in the desc_config API response
	TopologyName *string `json:"topology_name,omitempty"`
	// Specifies a text name for this controller
	ControllerName *string `json:"controller_name,omitempty"`
	// Single or space separated list of ntp server IPs or dns names.  Using this argument overwrites the existing Configuration. 
	NtpHosts *string `json:"ntp_hosts,omitempty"`
}

// NewUpdateConfigRequest instantiates a new UpdateConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateConfigRequest() *UpdateConfigRequest {
	this := UpdateConfigRequest{}
	return &this
}

// NewUpdateConfigRequestWithDefaults instantiates a new UpdateConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateConfigRequestWithDefaults() *UpdateConfigRequest {
	this := UpdateConfigRequest{}
	return &this
}

// GetTopologyName returns the TopologyName field value if set, zero value otherwise.
func (o *UpdateConfigRequest) GetTopologyName() string {
	if o == nil || o.TopologyName == nil {
		var ret string
		return ret
	}
	return *o.TopologyName
}

// GetTopologyNameOk returns a tuple with the TopologyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConfigRequest) GetTopologyNameOk() (*string, bool) {
	if o == nil || o.TopologyName == nil {
		return nil, false
	}
	return o.TopologyName, true
}

// HasTopologyName returns a boolean if a field has been set.
func (o *UpdateConfigRequest) HasTopologyName() bool {
	if o != nil && o.TopologyName != nil {
		return true
	}

	return false
}

// SetTopologyName gets a reference to the given string and assigns it to the TopologyName field.
func (o *UpdateConfigRequest) SetTopologyName(v string) {
	o.TopologyName = &v
}

// GetControllerName returns the ControllerName field value if set, zero value otherwise.
func (o *UpdateConfigRequest) GetControllerName() string {
	if o == nil || o.ControllerName == nil {
		var ret string
		return ret
	}
	return *o.ControllerName
}

// GetControllerNameOk returns a tuple with the ControllerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConfigRequest) GetControllerNameOk() (*string, bool) {
	if o == nil || o.ControllerName == nil {
		return nil, false
	}
	return o.ControllerName, true
}

// HasControllerName returns a boolean if a field has been set.
func (o *UpdateConfigRequest) HasControllerName() bool {
	if o != nil && o.ControllerName != nil {
		return true
	}

	return false
}

// SetControllerName gets a reference to the given string and assigns it to the ControllerName field.
func (o *UpdateConfigRequest) SetControllerName(v string) {
	o.ControllerName = &v
}

// GetNtpHosts returns the NtpHosts field value if set, zero value otherwise.
func (o *UpdateConfigRequest) GetNtpHosts() string {
	if o == nil || o.NtpHosts == nil {
		var ret string
		return ret
	}
	return *o.NtpHosts
}

// GetNtpHostsOk returns a tuple with the NtpHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConfigRequest) GetNtpHostsOk() (*string, bool) {
	if o == nil || o.NtpHosts == nil {
		return nil, false
	}
	return o.NtpHosts, true
}

// HasNtpHosts returns a boolean if a field has been set.
func (o *UpdateConfigRequest) HasNtpHosts() bool {
	if o != nil && o.NtpHosts != nil {
		return true
	}

	return false
}

// SetNtpHosts gets a reference to the given string and assigns it to the NtpHosts field.
func (o *UpdateConfigRequest) SetNtpHosts(v string) {
	o.NtpHosts = &v
}

func (o UpdateConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TopologyName != nil {
		toSerialize["topology_name"] = o.TopologyName
	}
	if o.ControllerName != nil {
		toSerialize["controller_name"] = o.ControllerName
	}
	if o.NtpHosts != nil {
		toSerialize["ntp_hosts"] = o.NtpHosts
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateConfigRequest struct {
	value *UpdateConfigRequest
	isSet bool
}

func (v NullableUpdateConfigRequest) Get() *UpdateConfigRequest {
	return v.value
}

func (v *NullableUpdateConfigRequest) Set(val *UpdateConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateConfigRequest(val *UpdateConfigRequest) *NullableUpdateConfigRequest {
	return &NullableUpdateConfigRequest{value: val, isSet: true}
}

func (v NullableUpdateConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


