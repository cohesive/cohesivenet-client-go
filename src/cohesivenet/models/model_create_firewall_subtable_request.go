/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// CreateFirewallSubtableRequest struct for CreateFirewallSubtableRequest
type CreateFirewallSubtableRequest struct {
	// Name of subtable. Alphanumeric, _, - characters allowed. No spaces.
	Name string `json:"name"`
	// Valid table. This determines which main tables can route to this subtable.
	Type string `json:"type"`
	Description *string `json:"description,omitempty"`
	Rules []CreateFirewallSubtableRequestRulesInner `json:"rules,omitempty"`
}

// NewCreateFirewallSubtableRequest instantiates a new CreateFirewallSubtableRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateFirewallSubtableRequest(name string, type_ string) *CreateFirewallSubtableRequest {
	this := CreateFirewallSubtableRequest{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewCreateFirewallSubtableRequestWithDefaults instantiates a new CreateFirewallSubtableRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateFirewallSubtableRequestWithDefaults() *CreateFirewallSubtableRequest {
	this := CreateFirewallSubtableRequest{}
	return &this
}

// GetName returns the Name field value
func (o *CreateFirewallSubtableRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateFirewallSubtableRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateFirewallSubtableRequest) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *CreateFirewallSubtableRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateFirewallSubtableRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateFirewallSubtableRequest) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateFirewallSubtableRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFirewallSubtableRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateFirewallSubtableRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateFirewallSubtableRequest) SetDescription(v string) {
	o.Description = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *CreateFirewallSubtableRequest) GetRules() []CreateFirewallSubtableRequestRulesInner {
	if o == nil || o.Rules == nil {
		var ret []CreateFirewallSubtableRequestRulesInner
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFirewallSubtableRequest) GetRulesOk() ([]CreateFirewallSubtableRequestRulesInner, bool) {
	if o == nil || o.Rules == nil {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *CreateFirewallSubtableRequest) HasRules() bool {
	if o != nil && o.Rules != nil {
		return true
	}

	return false
}

// SetRules gets a reference to the given []CreateFirewallSubtableRequestRulesInner and assigns it to the Rules field.
func (o *CreateFirewallSubtableRequest) SetRules(v []CreateFirewallSubtableRequestRulesInner) {
	o.Rules = v
}

func (o CreateFirewallSubtableRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	return json.Marshal(toSerialize)
}

type NullableCreateFirewallSubtableRequest struct {
	value *CreateFirewallSubtableRequest
	isSet bool
}

func (v NullableCreateFirewallSubtableRequest) Get() *CreateFirewallSubtableRequest {
	return v.value
}

func (v *NullableCreateFirewallSubtableRequest) Set(val *CreateFirewallSubtableRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateFirewallSubtableRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateFirewallSubtableRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateFirewallSubtableRequest(val *CreateFirewallSubtableRequest) *NullableCreateFirewallSubtableRequest {
	return &NullableCreateFirewallSubtableRequest{value: val, isSet: true}
}

func (v NullableCreateFirewallSubtableRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateFirewallSubtableRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


