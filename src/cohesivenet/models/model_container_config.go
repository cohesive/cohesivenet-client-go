/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet_models

import (
	"encoding/json"
)

// ContainerConfig struct for ContainerConfig
type ContainerConfig struct {
	Entrypoint NullableString `json:"Entrypoint,omitempty"`
	Dns NullableString `json:"Dns,omitempty"`
	OpenStdin *bool `json:"OpenStdin,omitempty"`
	StdinOnce *bool `json:"StdinOnce,omitempty"`
	AttachStderr *bool `json:"AttachStderr,omitempty"`
	AttachStdout *bool `json:"AttachStdout,omitempty"`
	AttachStdin *bool `json:"AttachStdin,omitempty"`
	Env map[string]interface{} `json:"Env,omitempty"`
	User *string `json:"User,omitempty"`
	Tty *bool `json:"Tty,omitempty"`
	ExposedPorts map[string]interface{} `json:"ExposedPorts,omitempty"`
	Memory *int32 `json:"Memory,omitempty"`
	MemorySwap *int32 `json:"MemorySwap,omitempty"`
	VolumesFrom *string `json:"VolumesFrom,omitempty"`
	Volumes NullableString `json:"Volumes,omitempty"`
	Cmd NullableString `json:"Cmd,omitempty"`
	PortSpecs map[string]interface{} `json:"PortSpecs,omitempty"`
	Image *string `json:"Image,omitempty"`
	WorkingDir *string `json:"WorkingDir,omitempty"`
	CpuShares *int32 `json:"CpuShares,omitempty"`
	NetworkDisabled *bool `json:"NetworkDisabled,omitempty"`
	Domainname *string `json:"Domainname,omitempty"`
	OnBuild NullableString `json:"OnBuild,omitempty"`
	Hostname *string `json:"Hostname,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ContainerConfig ContainerConfig

// NewContainerConfig instantiates a new ContainerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerConfig() *ContainerConfig {
	this := ContainerConfig{}
	return &this
}

// NewContainerConfigWithDefaults instantiates a new ContainerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerConfigWithDefaults() *ContainerConfig {
	this := ContainerConfig{}
	return &this
}

// GetEntrypoint returns the Entrypoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerConfig) GetEntrypoint() string {
	if o == nil || o.Entrypoint.Get() == nil {
		var ret string
		return ret
	}
	return *o.Entrypoint.Get()
}

// GetEntrypointOk returns a tuple with the Entrypoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerConfig) GetEntrypointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Entrypoint.Get(), o.Entrypoint.IsSet()
}

// HasEntrypoint returns a boolean if a field has been set.
func (o *ContainerConfig) HasEntrypoint() bool {
	if o != nil && o.Entrypoint.IsSet() {
		return true
	}

	return false
}

// SetEntrypoint gets a reference to the given NullableString and assigns it to the Entrypoint field.
func (o *ContainerConfig) SetEntrypoint(v string) {
	o.Entrypoint.Set(&v)
}
// SetEntrypointNil sets the value for Entrypoint to be an explicit nil
func (o *ContainerConfig) SetEntrypointNil() {
	o.Entrypoint.Set(nil)
}

// UnsetEntrypoint ensures that no value is present for Entrypoint, not even an explicit nil
func (o *ContainerConfig) UnsetEntrypoint() {
	o.Entrypoint.Unset()
}

// GetDns returns the Dns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerConfig) GetDns() string {
	if o == nil || o.Dns.Get() == nil {
		var ret string
		return ret
	}
	return *o.Dns.Get()
}

// GetDnsOk returns a tuple with the Dns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerConfig) GetDnsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Dns.Get(), o.Dns.IsSet()
}

// HasDns returns a boolean if a field has been set.
func (o *ContainerConfig) HasDns() bool {
	if o != nil && o.Dns.IsSet() {
		return true
	}

	return false
}

// SetDns gets a reference to the given NullableString and assigns it to the Dns field.
func (o *ContainerConfig) SetDns(v string) {
	o.Dns.Set(&v)
}
// SetDnsNil sets the value for Dns to be an explicit nil
func (o *ContainerConfig) SetDnsNil() {
	o.Dns.Set(nil)
}

// UnsetDns ensures that no value is present for Dns, not even an explicit nil
func (o *ContainerConfig) UnsetDns() {
	o.Dns.Unset()
}

// GetOpenStdin returns the OpenStdin field value if set, zero value otherwise.
func (o *ContainerConfig) GetOpenStdin() bool {
	if o == nil || o.OpenStdin == nil {
		var ret bool
		return ret
	}
	return *o.OpenStdin
}

// GetOpenStdinOk returns a tuple with the OpenStdin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerConfig) GetOpenStdinOk() (*bool, bool) {
	if o == nil || o.OpenStdin == nil {
		return nil, false
	}
	return o.OpenStdin, true
}

// HasOpenStdin returns a boolean if a field has been set.
func (o *ContainerConfig) HasOpenStdin() bool {
	if o != nil && o.OpenStdin != nil {
		return true
	}

	return false
}

// SetOpenStdin gets a reference to the given bool and assigns it to the OpenStdin field.
func (o *ContainerConfig) SetOpenStdin(v bool) {
	o.OpenStdin = &v
}

// GetStdinOnce returns the StdinOnce field value if set, zero value otherwise.
func (o *ContainerConfig) GetStdinOnce() bool {
	if o == nil || o.StdinOnce == nil {
		var ret bool
		return ret
	}
	return *o.StdinOnce
}

// GetStdinOnceOk returns a tuple with the StdinOnce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerConfig) GetStdinOnceOk() (*bool, bool) {
	if o == nil || o.StdinOnce == nil {
		return nil, false
	}
	return o.StdinOnce, true
}

// HasStdinOnce returns a boolean if a field has been set.
func (o *ContainerConfig) HasStdinOnce() bool {
	if o != nil && o.StdinOnce != nil {
		return true
	}

	return false
}

// SetStdinOnce gets a reference to the given bool and assigns it to the StdinOnce field.
func (o *ContainerConfig) SetStdinOnce(v bool) {
	o.StdinOnce = &v
}

// GetAttachStderr returns the AttachStderr field value if set, zero value otherwise.
func (o *ContainerConfig) GetAttachStderr() bool {
	if o == nil || o.AttachStderr == nil {
		var ret bool
		return ret
	}
	return *o.AttachStderr
}

// GetAttachStderrOk returns a tuple with the AttachStderr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerConfig) GetAttachStderrOk() (*bool, bool) {
	if o == nil || o.AttachStderr == nil {
		return nil, false
	}
	return o.AttachStderr, true
}

// HasAttachStderr returns a boolean if a field has been set.
func (o *ContainerConfig) HasAttachStderr() bool {
	if o != nil && o.AttachStderr != nil {
		return true
	}

	return false
}

// SetAttachStderr gets a reference to the given bool and assigns it to the AttachStderr field.
func (o *ContainerConfig) SetAttachStderr(v bool) {
	o.AttachStderr = &v
}

// GetAttachStdout returns the AttachStdout field value if set, zero value otherwise.
func (o *ContainerConfig) GetAttachStdout() bool {
	if o == nil || o.AttachStdout == nil {
		var ret bool
		return ret
	}
	return *o.AttachStdout
}

// GetAttachStdoutOk returns a tuple with the AttachStdout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerConfig) GetAttachStdoutOk() (*bool, bool) {
	if o == nil || o.AttachStdout == nil {
		return nil, false
	}
	return o.AttachStdout, true
}

// HasAttachStdout returns a boolean if a field has been set.
func (o *ContainerConfig) HasAttachStdout() bool {
	if o != nil && o.AttachStdout != nil {
		return true
	}

	return false
}

// SetAttachStdout gets a reference to the given bool and assigns it to the AttachStdout field.
func (o *ContainerConfig) SetAttachStdout(v bool) {
	o.AttachStdout = &v
}

// GetAttachStdin returns the AttachStdin field value if set, zero value otherwise.
func (o *ContainerConfig) GetAttachStdin() bool {
	if o == nil || o.AttachStdin == nil {
		var ret bool
		return ret
	}
	return *o.AttachStdin
}

// GetAttachStdinOk returns a tuple with the AttachStdin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerConfig) GetAttachStdinOk() (*bool, bool) {
	if o == nil || o.AttachStdin == nil {
		return nil, false
	}
	return o.AttachStdin, true
}

// HasAttachStdin returns a boolean if a field has been set.
func (o *ContainerConfig) HasAttachStdin() bool {
	if o != nil && o.AttachStdin != nil {
		return true
	}

	return false
}

// SetAttachStdin gets a reference to the given bool and assigns it to the AttachStdin field.
func (o *ContainerConfig) SetAttachStdin(v bool) {
	o.AttachStdin = &v
}

// GetEnv returns the Env field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerConfig) GetEnv() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerConfig) GetEnvOk() (map[string]interface{}, bool) {
	if o == nil || o.Env == nil {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *ContainerConfig) HasEnv() bool {
	if o != nil && o.Env != nil {
		return true
	}

	return false
}

// SetEnv gets a reference to the given map[string]interface{} and assigns it to the Env field.
func (o *ContainerConfig) SetEnv(v map[string]interface{}) {
	o.Env = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ContainerConfig) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerConfig) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ContainerConfig) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *ContainerConfig) SetUser(v string) {
	o.User = &v
}

// GetTty returns the Tty field value if set, zero value otherwise.
func (o *ContainerConfig) GetTty() bool {
	if o == nil || o.Tty == nil {
		var ret bool
		return ret
	}
	return *o.Tty
}

// GetTtyOk returns a tuple with the Tty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerConfig) GetTtyOk() (*bool, bool) {
	if o == nil || o.Tty == nil {
		return nil, false
	}
	return o.Tty, true
}

// HasTty returns a boolean if a field has been set.
func (o *ContainerConfig) HasTty() bool {
	if o != nil && o.Tty != nil {
		return true
	}

	return false
}

// SetTty gets a reference to the given bool and assigns it to the Tty field.
func (o *ContainerConfig) SetTty(v bool) {
	o.Tty = &v
}

// GetExposedPorts returns the ExposedPorts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerConfig) GetExposedPorts() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.ExposedPorts
}

// GetExposedPortsOk returns a tuple with the ExposedPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerConfig) GetExposedPortsOk() (map[string]interface{}, bool) {
	if o == nil || o.ExposedPorts == nil {
		return nil, false
	}
	return o.ExposedPorts, true
}

// HasExposedPorts returns a boolean if a field has been set.
func (o *ContainerConfig) HasExposedPorts() bool {
	if o != nil && o.ExposedPorts != nil {
		return true
	}

	return false
}

// SetExposedPorts gets a reference to the given map[string]interface{} and assigns it to the ExposedPorts field.
func (o *ContainerConfig) SetExposedPorts(v map[string]interface{}) {
	o.ExposedPorts = v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *ContainerConfig) GetMemory() int32 {
	if o == nil || o.Memory == nil {
		var ret int32
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerConfig) GetMemoryOk() (*int32, bool) {
	if o == nil || o.Memory == nil {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *ContainerConfig) HasMemory() bool {
	if o != nil && o.Memory != nil {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int32 and assigns it to the Memory field.
func (o *ContainerConfig) SetMemory(v int32) {
	o.Memory = &v
}

// GetMemorySwap returns the MemorySwap field value if set, zero value otherwise.
func (o *ContainerConfig) GetMemorySwap() int32 {
	if o == nil || o.MemorySwap == nil {
		var ret int32
		return ret
	}
	return *o.MemorySwap
}

// GetMemorySwapOk returns a tuple with the MemorySwap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerConfig) GetMemorySwapOk() (*int32, bool) {
	if o == nil || o.MemorySwap == nil {
		return nil, false
	}
	return o.MemorySwap, true
}

// HasMemorySwap returns a boolean if a field has been set.
func (o *ContainerConfig) HasMemorySwap() bool {
	if o != nil && o.MemorySwap != nil {
		return true
	}

	return false
}

// SetMemorySwap gets a reference to the given int32 and assigns it to the MemorySwap field.
func (o *ContainerConfig) SetMemorySwap(v int32) {
	o.MemorySwap = &v
}

// GetVolumesFrom returns the VolumesFrom field value if set, zero value otherwise.
func (o *ContainerConfig) GetVolumesFrom() string {
	if o == nil || o.VolumesFrom == nil {
		var ret string
		return ret
	}
	return *o.VolumesFrom
}

// GetVolumesFromOk returns a tuple with the VolumesFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerConfig) GetVolumesFromOk() (*string, bool) {
	if o == nil || o.VolumesFrom == nil {
		return nil, false
	}
	return o.VolumesFrom, true
}

// HasVolumesFrom returns a boolean if a field has been set.
func (o *ContainerConfig) HasVolumesFrom() bool {
	if o != nil && o.VolumesFrom != nil {
		return true
	}

	return false
}

// SetVolumesFrom gets a reference to the given string and assigns it to the VolumesFrom field.
func (o *ContainerConfig) SetVolumesFrom(v string) {
	o.VolumesFrom = &v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerConfig) GetVolumes() string {
	if o == nil || o.Volumes.Get() == nil {
		var ret string
		return ret
	}
	return *o.Volumes.Get()
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerConfig) GetVolumesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Volumes.Get(), o.Volumes.IsSet()
}

// HasVolumes returns a boolean if a field has been set.
func (o *ContainerConfig) HasVolumes() bool {
	if o != nil && o.Volumes.IsSet() {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given NullableString and assigns it to the Volumes field.
func (o *ContainerConfig) SetVolumes(v string) {
	o.Volumes.Set(&v)
}
// SetVolumesNil sets the value for Volumes to be an explicit nil
func (o *ContainerConfig) SetVolumesNil() {
	o.Volumes.Set(nil)
}

// UnsetVolumes ensures that no value is present for Volumes, not even an explicit nil
func (o *ContainerConfig) UnsetVolumes() {
	o.Volumes.Unset()
}

// GetCmd returns the Cmd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerConfig) GetCmd() string {
	if o == nil || o.Cmd.Get() == nil {
		var ret string
		return ret
	}
	return *o.Cmd.Get()
}

// GetCmdOk returns a tuple with the Cmd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerConfig) GetCmdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cmd.Get(), o.Cmd.IsSet()
}

// HasCmd returns a boolean if a field has been set.
func (o *ContainerConfig) HasCmd() bool {
	if o != nil && o.Cmd.IsSet() {
		return true
	}

	return false
}

// SetCmd gets a reference to the given NullableString and assigns it to the Cmd field.
func (o *ContainerConfig) SetCmd(v string) {
	o.Cmd.Set(&v)
}
// SetCmdNil sets the value for Cmd to be an explicit nil
func (o *ContainerConfig) SetCmdNil() {
	o.Cmd.Set(nil)
}

// UnsetCmd ensures that no value is present for Cmd, not even an explicit nil
func (o *ContainerConfig) UnsetCmd() {
	o.Cmd.Unset()
}

// GetPortSpecs returns the PortSpecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerConfig) GetPortSpecs() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.PortSpecs
}

// GetPortSpecsOk returns a tuple with the PortSpecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerConfig) GetPortSpecsOk() (map[string]interface{}, bool) {
	if o == nil || o.PortSpecs == nil {
		return nil, false
	}
	return o.PortSpecs, true
}

// HasPortSpecs returns a boolean if a field has been set.
func (o *ContainerConfig) HasPortSpecs() bool {
	if o != nil && o.PortSpecs != nil {
		return true
	}

	return false
}

// SetPortSpecs gets a reference to the given map[string]interface{} and assigns it to the PortSpecs field.
func (o *ContainerConfig) SetPortSpecs(v map[string]interface{}) {
	o.PortSpecs = v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *ContainerConfig) GetImage() string {
	if o == nil || o.Image == nil {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerConfig) GetImageOk() (*string, bool) {
	if o == nil || o.Image == nil {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *ContainerConfig) HasImage() bool {
	if o != nil && o.Image != nil {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *ContainerConfig) SetImage(v string) {
	o.Image = &v
}

// GetWorkingDir returns the WorkingDir field value if set, zero value otherwise.
func (o *ContainerConfig) GetWorkingDir() string {
	if o == nil || o.WorkingDir == nil {
		var ret string
		return ret
	}
	return *o.WorkingDir
}

// GetWorkingDirOk returns a tuple with the WorkingDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerConfig) GetWorkingDirOk() (*string, bool) {
	if o == nil || o.WorkingDir == nil {
		return nil, false
	}
	return o.WorkingDir, true
}

// HasWorkingDir returns a boolean if a field has been set.
func (o *ContainerConfig) HasWorkingDir() bool {
	if o != nil && o.WorkingDir != nil {
		return true
	}

	return false
}

// SetWorkingDir gets a reference to the given string and assigns it to the WorkingDir field.
func (o *ContainerConfig) SetWorkingDir(v string) {
	o.WorkingDir = &v
}

// GetCpuShares returns the CpuShares field value if set, zero value otherwise.
func (o *ContainerConfig) GetCpuShares() int32 {
	if o == nil || o.CpuShares == nil {
		var ret int32
		return ret
	}
	return *o.CpuShares
}

// GetCpuSharesOk returns a tuple with the CpuShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerConfig) GetCpuSharesOk() (*int32, bool) {
	if o == nil || o.CpuShares == nil {
		return nil, false
	}
	return o.CpuShares, true
}

// HasCpuShares returns a boolean if a field has been set.
func (o *ContainerConfig) HasCpuShares() bool {
	if o != nil && o.CpuShares != nil {
		return true
	}

	return false
}

// SetCpuShares gets a reference to the given int32 and assigns it to the CpuShares field.
func (o *ContainerConfig) SetCpuShares(v int32) {
	o.CpuShares = &v
}

// GetNetworkDisabled returns the NetworkDisabled field value if set, zero value otherwise.
func (o *ContainerConfig) GetNetworkDisabled() bool {
	if o == nil || o.NetworkDisabled == nil {
		var ret bool
		return ret
	}
	return *o.NetworkDisabled
}

// GetNetworkDisabledOk returns a tuple with the NetworkDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerConfig) GetNetworkDisabledOk() (*bool, bool) {
	if o == nil || o.NetworkDisabled == nil {
		return nil, false
	}
	return o.NetworkDisabled, true
}

// HasNetworkDisabled returns a boolean if a field has been set.
func (o *ContainerConfig) HasNetworkDisabled() bool {
	if o != nil && o.NetworkDisabled != nil {
		return true
	}

	return false
}

// SetNetworkDisabled gets a reference to the given bool and assigns it to the NetworkDisabled field.
func (o *ContainerConfig) SetNetworkDisabled(v bool) {
	o.NetworkDisabled = &v
}

// GetDomainname returns the Domainname field value if set, zero value otherwise.
func (o *ContainerConfig) GetDomainname() string {
	if o == nil || o.Domainname == nil {
		var ret string
		return ret
	}
	return *o.Domainname
}

// GetDomainnameOk returns a tuple with the Domainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerConfig) GetDomainnameOk() (*string, bool) {
	if o == nil || o.Domainname == nil {
		return nil, false
	}
	return o.Domainname, true
}

// HasDomainname returns a boolean if a field has been set.
func (o *ContainerConfig) HasDomainname() bool {
	if o != nil && o.Domainname != nil {
		return true
	}

	return false
}

// SetDomainname gets a reference to the given string and assigns it to the Domainname field.
func (o *ContainerConfig) SetDomainname(v string) {
	o.Domainname = &v
}

// GetOnBuild returns the OnBuild field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerConfig) GetOnBuild() string {
	if o == nil || o.OnBuild.Get() == nil {
		var ret string
		return ret
	}
	return *o.OnBuild.Get()
}

// GetOnBuildOk returns a tuple with the OnBuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerConfig) GetOnBuildOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OnBuild.Get(), o.OnBuild.IsSet()
}

// HasOnBuild returns a boolean if a field has been set.
func (o *ContainerConfig) HasOnBuild() bool {
	if o != nil && o.OnBuild.IsSet() {
		return true
	}

	return false
}

// SetOnBuild gets a reference to the given NullableString and assigns it to the OnBuild field.
func (o *ContainerConfig) SetOnBuild(v string) {
	o.OnBuild.Set(&v)
}
// SetOnBuildNil sets the value for OnBuild to be an explicit nil
func (o *ContainerConfig) SetOnBuildNil() {
	o.OnBuild.Set(nil)
}

// UnsetOnBuild ensures that no value is present for OnBuild, not even an explicit nil
func (o *ContainerConfig) UnsetOnBuild() {
	o.OnBuild.Unset()
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *ContainerConfig) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerConfig) GetHostnameOk() (*string, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *ContainerConfig) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *ContainerConfig) SetHostname(v string) {
	o.Hostname = &v
}

func (o ContainerConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Entrypoint.IsSet() {
		toSerialize["Entrypoint"] = o.Entrypoint.Get()
	}
	if o.Dns.IsSet() {
		toSerialize["Dns"] = o.Dns.Get()
	}
	if o.OpenStdin != nil {
		toSerialize["OpenStdin"] = o.OpenStdin
	}
	if o.StdinOnce != nil {
		toSerialize["StdinOnce"] = o.StdinOnce
	}
	if o.AttachStderr != nil {
		toSerialize["AttachStderr"] = o.AttachStderr
	}
	if o.AttachStdout != nil {
		toSerialize["AttachStdout"] = o.AttachStdout
	}
	if o.AttachStdin != nil {
		toSerialize["AttachStdin"] = o.AttachStdin
	}
	if o.Env != nil {
		toSerialize["Env"] = o.Env
	}
	if o.User != nil {
		toSerialize["User"] = o.User
	}
	if o.Tty != nil {
		toSerialize["Tty"] = o.Tty
	}
	if o.ExposedPorts != nil {
		toSerialize["ExposedPorts"] = o.ExposedPorts
	}
	if o.Memory != nil {
		toSerialize["Memory"] = o.Memory
	}
	if o.MemorySwap != nil {
		toSerialize["MemorySwap"] = o.MemorySwap
	}
	if o.VolumesFrom != nil {
		toSerialize["VolumesFrom"] = o.VolumesFrom
	}
	if o.Volumes.IsSet() {
		toSerialize["Volumes"] = o.Volumes.Get()
	}
	if o.Cmd.IsSet() {
		toSerialize["Cmd"] = o.Cmd.Get()
	}
	if o.PortSpecs != nil {
		toSerialize["PortSpecs"] = o.PortSpecs
	}
	if o.Image != nil {
		toSerialize["Image"] = o.Image
	}
	if o.WorkingDir != nil {
		toSerialize["WorkingDir"] = o.WorkingDir
	}
	if o.CpuShares != nil {
		toSerialize["CpuShares"] = o.CpuShares
	}
	if o.NetworkDisabled != nil {
		toSerialize["NetworkDisabled"] = o.NetworkDisabled
	}
	if o.Domainname != nil {
		toSerialize["Domainname"] = o.Domainname
	}
	if o.OnBuild.IsSet() {
		toSerialize["OnBuild"] = o.OnBuild.Get()
	}
	if o.Hostname != nil {
		toSerialize["Hostname"] = o.Hostname
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ContainerConfig) UnmarshalJSON(bytes []byte) (err error) {
	varContainerConfig := _ContainerConfig{}

	if err = json.Unmarshal(bytes, &varContainerConfig); err == nil {
		*o = ContainerConfig(varContainerConfig)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Entrypoint")
		delete(additionalProperties, "Dns")
		delete(additionalProperties, "OpenStdin")
		delete(additionalProperties, "StdinOnce")
		delete(additionalProperties, "AttachStderr")
		delete(additionalProperties, "AttachStdout")
		delete(additionalProperties, "AttachStdin")
		delete(additionalProperties, "Env")
		delete(additionalProperties, "User")
		delete(additionalProperties, "Tty")
		delete(additionalProperties, "ExposedPorts")
		delete(additionalProperties, "Memory")
		delete(additionalProperties, "MemorySwap")
		delete(additionalProperties, "VolumesFrom")
		delete(additionalProperties, "Volumes")
		delete(additionalProperties, "Cmd")
		delete(additionalProperties, "PortSpecs")
		delete(additionalProperties, "Image")
		delete(additionalProperties, "WorkingDir")
		delete(additionalProperties, "CpuShares")
		delete(additionalProperties, "NetworkDisabled")
		delete(additionalProperties, "Domainname")
		delete(additionalProperties, "OnBuild")
		delete(additionalProperties, "Hostname")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContainerConfig struct {
	value *ContainerConfig
	isSet bool
}

func (v NullableContainerConfig) Get() *ContainerConfig {
	return v.value
}

func (v *NullableContainerConfig) Set(val *ContainerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerConfig(val *ContainerConfig) *NullableContainerConfig {
	return &NullableContainerConfig{value: val, isSet: true}
}

func (v NullableContainerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


