/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// MSConfig struct for MSConfig
type MSConfig struct {
	// IP address of VNS3 Management Systems
	Ip *string `json:"ip,omitempty"`
	// Enable alerting to MS
	AlertEnabled *bool `json:"alert_enabled,omitempty"`
}

// NewMSConfig instantiates a new MSConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMSConfig() *MSConfig {
	this := MSConfig{}
	return &this
}

// NewMSConfigWithDefaults instantiates a new MSConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMSConfigWithDefaults() *MSConfig {
	this := MSConfig{}
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *MSConfig) GetIp() string {
	if o == nil || o.Ip == nil {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSConfig) GetIpOk() (*string, bool) {
	if o == nil || o.Ip == nil {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *MSConfig) HasIp() bool {
	if o != nil && o.Ip != nil {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *MSConfig) SetIp(v string) {
	o.Ip = &v
}

// GetAlertEnabled returns the AlertEnabled field value if set, zero value otherwise.
func (o *MSConfig) GetAlertEnabled() bool {
	if o == nil || o.AlertEnabled == nil {
		var ret bool
		return ret
	}
	return *o.AlertEnabled
}

// GetAlertEnabledOk returns a tuple with the AlertEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSConfig) GetAlertEnabledOk() (*bool, bool) {
	if o == nil || o.AlertEnabled == nil {
		return nil, false
	}
	return o.AlertEnabled, true
}

// HasAlertEnabled returns a boolean if a field has been set.
func (o *MSConfig) HasAlertEnabled() bool {
	if o != nil && o.AlertEnabled != nil {
		return true
	}

	return false
}

// SetAlertEnabled gets a reference to the given bool and assigns it to the AlertEnabled field.
func (o *MSConfig) SetAlertEnabled(v bool) {
	o.AlertEnabled = &v
}

func (o MSConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ip != nil {
		toSerialize["ip"] = o.Ip
	}
	if o.AlertEnabled != nil {
		toSerialize["alert_enabled"] = o.AlertEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableMSConfig struct {
	value *MSConfig
	isSet bool
}

func (v NullableMSConfig) Get() *MSConfig {
	return v.value
}

func (v *NullableMSConfig) Set(val *MSConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableMSConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableMSConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMSConfig(val *MSConfig) *NullableMSConfig {
	return &NullableMSConfig{value: val, isSet: true}
}

func (v NullableMSConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMSConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


