/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet_models

import (
	"encoding/json"
)

// TopologyClientsInner struct for TopologyClientsInner
type TopologyClientsInner struct {
	IpAddress *string `json:"ip_address,omitempty"`
	Octets []int32 `json:"octets,omitempty"`
}

// NewTopologyClientsInner instantiates a new TopologyClientsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopologyClientsInner() *TopologyClientsInner {
	this := TopologyClientsInner{}
	return &this
}

// NewTopologyClientsInnerWithDefaults instantiates a new TopologyClientsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopologyClientsInnerWithDefaults() *TopologyClientsInner {
	this := TopologyClientsInner{}
	return &this
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *TopologyClientsInner) GetIpAddress() string {
	if o == nil || o.IpAddress == nil {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopologyClientsInner) GetIpAddressOk() (*string, bool) {
	if o == nil || o.IpAddress == nil {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *TopologyClientsInner) HasIpAddress() bool {
	if o != nil && o.IpAddress != nil {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *TopologyClientsInner) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetOctets returns the Octets field value if set, zero value otherwise.
func (o *TopologyClientsInner) GetOctets() []int32 {
	if o == nil || o.Octets == nil {
		var ret []int32
		return ret
	}
	return o.Octets
}

// GetOctetsOk returns a tuple with the Octets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopologyClientsInner) GetOctetsOk() ([]int32, bool) {
	if o == nil || o.Octets == nil {
		return nil, false
	}
	return o.Octets, true
}

// HasOctets returns a boolean if a field has been set.
func (o *TopologyClientsInner) HasOctets() bool {
	if o != nil && o.Octets != nil {
		return true
	}

	return false
}

// SetOctets gets a reference to the given []int32 and assigns it to the Octets field.
func (o *TopologyClientsInner) SetOctets(v []int32) {
	o.Octets = v
}

func (o TopologyClientsInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IpAddress != nil {
		toSerialize["ip_address"] = o.IpAddress
	}
	if o.Octets != nil {
		toSerialize["octets"] = o.Octets
	}
	return json.Marshal(toSerialize)
}

type NullableTopologyClientsInner struct {
	value *TopologyClientsInner
	isSet bool
}

func (v NullableTopologyClientsInner) Get() *TopologyClientsInner {
	return v.value
}

func (v *NullableTopologyClientsInner) Set(val *TopologyClientsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableTopologyClientsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableTopologyClientsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopologyClientsInner(val *TopologyClientsInner) *NullableTopologyClientsInner {
	return &NullableTopologyClientsInner{value: val, isSet: true}
}

func (v NullableTopologyClientsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopologyClientsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


