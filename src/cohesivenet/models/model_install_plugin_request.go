/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet_models

import (
	"encoding/json"
)

// InstallPluginRequest struct for InstallPluginRequest
type InstallPluginRequest struct {
	// Name of the new plugin
	Name string `json:"name"`
	// Plugin Image URL to a tar.gz installable image.
	ImageUrl string `json:"image_url"`
	Description *string `json:"description,omitempty"`
	// Plugin start command
	Command *string `json:"command,omitempty"`
	// URL to documentation for the plugin provided by plugin developer
	DocumentationUrl *string `json:"documentation_url,omitempty"`
	// URL to support site provided by plugin developer
	SupportUrl *string `json:"support_url,omitempty"`
	CatalogId *string `json:"catalog_id,omitempty"`
	Version *string `json:"version,omitempty"`
	// Key Value pairs associated with plugin
	Tags *map[string]string `json:"tags,omitempty"`
	// Optional additional data to associate with metadata
	Metadata *map[string]string `json:"metadata,omitempty"`
}

// NewInstallPluginRequest instantiates a new InstallPluginRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallPluginRequest(name string, imageUrl string) *InstallPluginRequest {
	this := InstallPluginRequest{}
	this.Name = name
	this.ImageUrl = imageUrl
	var version string = "1"
	this.Version = &version
	return &this
}

// NewInstallPluginRequestWithDefaults instantiates a new InstallPluginRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallPluginRequestWithDefaults() *InstallPluginRequest {
	this := InstallPluginRequest{}
	var version string = "1"
	this.Version = &version
	return &this
}

// GetName returns the Name field value
func (o *InstallPluginRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InstallPluginRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InstallPluginRequest) SetName(v string) {
	o.Name = v
}

// GetImageUrl returns the ImageUrl field value
func (o *InstallPluginRequest) GetImageUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value
// and a boolean to check if the value has been set.
func (o *InstallPluginRequest) GetImageUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageUrl, true
}

// SetImageUrl sets field value
func (o *InstallPluginRequest) SetImageUrl(v string) {
	o.ImageUrl = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InstallPluginRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallPluginRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InstallPluginRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InstallPluginRequest) SetDescription(v string) {
	o.Description = &v
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *InstallPluginRequest) GetCommand() string {
	if o == nil || o.Command == nil {
		var ret string
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallPluginRequest) GetCommandOk() (*string, bool) {
	if o == nil || o.Command == nil {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *InstallPluginRequest) HasCommand() bool {
	if o != nil && o.Command != nil {
		return true
	}

	return false
}

// SetCommand gets a reference to the given string and assigns it to the Command field.
func (o *InstallPluginRequest) SetCommand(v string) {
	o.Command = &v
}

// GetDocumentationUrl returns the DocumentationUrl field value if set, zero value otherwise.
func (o *InstallPluginRequest) GetDocumentationUrl() string {
	if o == nil || o.DocumentationUrl == nil {
		var ret string
		return ret
	}
	return *o.DocumentationUrl
}

// GetDocumentationUrlOk returns a tuple with the DocumentationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallPluginRequest) GetDocumentationUrlOk() (*string, bool) {
	if o == nil || o.DocumentationUrl == nil {
		return nil, false
	}
	return o.DocumentationUrl, true
}

// HasDocumentationUrl returns a boolean if a field has been set.
func (o *InstallPluginRequest) HasDocumentationUrl() bool {
	if o != nil && o.DocumentationUrl != nil {
		return true
	}

	return false
}

// SetDocumentationUrl gets a reference to the given string and assigns it to the DocumentationUrl field.
func (o *InstallPluginRequest) SetDocumentationUrl(v string) {
	o.DocumentationUrl = &v
}

// GetSupportUrl returns the SupportUrl field value if set, zero value otherwise.
func (o *InstallPluginRequest) GetSupportUrl() string {
	if o == nil || o.SupportUrl == nil {
		var ret string
		return ret
	}
	return *o.SupportUrl
}

// GetSupportUrlOk returns a tuple with the SupportUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallPluginRequest) GetSupportUrlOk() (*string, bool) {
	if o == nil || o.SupportUrl == nil {
		return nil, false
	}
	return o.SupportUrl, true
}

// HasSupportUrl returns a boolean if a field has been set.
func (o *InstallPluginRequest) HasSupportUrl() bool {
	if o != nil && o.SupportUrl != nil {
		return true
	}

	return false
}

// SetSupportUrl gets a reference to the given string and assigns it to the SupportUrl field.
func (o *InstallPluginRequest) SetSupportUrl(v string) {
	o.SupportUrl = &v
}

// GetCatalogId returns the CatalogId field value if set, zero value otherwise.
func (o *InstallPluginRequest) GetCatalogId() string {
	if o == nil || o.CatalogId == nil {
		var ret string
		return ret
	}
	return *o.CatalogId
}

// GetCatalogIdOk returns a tuple with the CatalogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallPluginRequest) GetCatalogIdOk() (*string, bool) {
	if o == nil || o.CatalogId == nil {
		return nil, false
	}
	return o.CatalogId, true
}

// HasCatalogId returns a boolean if a field has been set.
func (o *InstallPluginRequest) HasCatalogId() bool {
	if o != nil && o.CatalogId != nil {
		return true
	}

	return false
}

// SetCatalogId gets a reference to the given string and assigns it to the CatalogId field.
func (o *InstallPluginRequest) SetCatalogId(v string) {
	o.CatalogId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *InstallPluginRequest) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallPluginRequest) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *InstallPluginRequest) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *InstallPluginRequest) SetVersion(v string) {
	o.Version = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *InstallPluginRequest) GetTags() map[string]string {
	if o == nil || o.Tags == nil {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallPluginRequest) GetTagsOk() (*map[string]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *InstallPluginRequest) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *InstallPluginRequest) SetTags(v map[string]string) {
	o.Tags = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *InstallPluginRequest) GetMetadata() map[string]string {
	if o == nil || o.Metadata == nil {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallPluginRequest) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *InstallPluginRequest) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *InstallPluginRequest) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

func (o InstallPluginRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["image_url"] = o.ImageUrl
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Command != nil {
		toSerialize["command"] = o.Command
	}
	if o.DocumentationUrl != nil {
		toSerialize["documentation_url"] = o.DocumentationUrl
	}
	if o.SupportUrl != nil {
		toSerialize["support_url"] = o.SupportUrl
	}
	if o.CatalogId != nil {
		toSerialize["catalog_id"] = o.CatalogId
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableInstallPluginRequest struct {
	value *InstallPluginRequest
	isSet bool
}

func (v NullableInstallPluginRequest) Get() *InstallPluginRequest {
	return v.value
}

func (v *NullableInstallPluginRequest) Set(val *InstallPluginRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallPluginRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallPluginRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallPluginRequest(val *InstallPluginRequest) *NullableInstallPluginRequest {
	return &NullableInstallPluginRequest{value: val, isSet: true}
}

func (v NullableInstallPluginRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallPluginRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


