/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// SimpleStatusResponseResponse struct for SimpleStatusResponseResponse
type SimpleStatusResponseResponse struct {
	Status *string `json:"status,omitempty"`
}

// NewSimpleStatusResponseResponse instantiates a new SimpleStatusResponseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleStatusResponseResponse() *SimpleStatusResponseResponse {
	this := SimpleStatusResponseResponse{}
	return &this
}

// NewSimpleStatusResponseResponseWithDefaults instantiates a new SimpleStatusResponseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleStatusResponseResponseWithDefaults() *SimpleStatusResponseResponse {
	this := SimpleStatusResponseResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SimpleStatusResponseResponse) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleStatusResponseResponse) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SimpleStatusResponseResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SimpleStatusResponseResponse) SetStatus(v string) {
	o.Status = &v
}

func (o SimpleStatusResponseResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableSimpleStatusResponseResponse struct {
	value *SimpleStatusResponseResponse
	isSet bool
}

func (v NullableSimpleStatusResponseResponse) Get() *SimpleStatusResponseResponse {
	return v.value
}

func (v *NullableSimpleStatusResponseResponse) Set(val *SimpleStatusResponseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleStatusResponseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleStatusResponseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleStatusResponseResponse(val *SimpleStatusResponseResponse) *NullableSimpleStatusResponseResponse {
	return &NullableSimpleStatusResponseResponse{value: val, isSet: true}
}

func (v NullableSimpleStatusResponseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleStatusResponseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


