/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// ConnectedSubnetsOneOf - struct for ConnectedSubnetsOneOf
type ConnectedSubnetsOneOf struct {
	ArrayOfConnectedSubnet *[]ConnectedSubnet
	ArrayOfArrayOfString *[][]string
}

// []ConnectedSubnetAsConnectedSubnetsOneOf is a convenience function that returns []ConnectedSubnet wrapped in ConnectedSubnetsOneOf
func ArrayOfConnectedSubnetAsConnectedSubnetsOneOf(v *[]ConnectedSubnet) ConnectedSubnetsOneOf {
	return ConnectedSubnetsOneOf{
		ArrayOfConnectedSubnet: v,
	}
}

// [][]stringAsConnectedSubnetsOneOf is a convenience function that returns [][]string wrapped in ConnectedSubnetsOneOf
func ArrayOfArrayOfStringAsConnectedSubnetsOneOf(v *[][]string) ConnectedSubnetsOneOf {
	return ConnectedSubnetsOneOf{
		ArrayOfArrayOfString: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ConnectedSubnetsOneOf) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfConnectedSubnet
	err = newStrictDecoder(data).Decode(&dst.ArrayOfConnectedSubnet)
	if err == nil {
		jsonArrayOfConnectedSubnet, _ := json.Marshal(dst.ArrayOfConnectedSubnet)
		if string(jsonArrayOfConnectedSubnet) == "{}" { // empty struct
			dst.ArrayOfConnectedSubnet = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfConnectedSubnet = nil
	}

	// try to unmarshal data into ArrayOfArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfArrayOfString)
	if err == nil {
		jsonArrayOfArrayOfString, _ := json.Marshal(dst.ArrayOfArrayOfString)
		if string(jsonArrayOfArrayOfString) == "{}" { // empty struct
			dst.ArrayOfArrayOfString = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfArrayOfString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfConnectedSubnet = nil
		dst.ArrayOfArrayOfString = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ConnectedSubnetsOneOf)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ConnectedSubnetsOneOf)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConnectedSubnetsOneOf) MarshalJSON() ([]byte, error) {
	if src.ArrayOfConnectedSubnet != nil {
		return json.Marshal(&src.ArrayOfConnectedSubnet)
	}

	if src.ArrayOfArrayOfString != nil {
		return json.Marshal(&src.ArrayOfArrayOfString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ConnectedSubnetsOneOf) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfConnectedSubnet != nil {
		return obj.ArrayOfConnectedSubnet
	}

	if obj.ArrayOfArrayOfString != nil {
		return obj.ArrayOfArrayOfString
	}

	// all schemas are nil
	return nil
}

type NullableConnectedSubnetsOneOf struct {
	value *ConnectedSubnetsOneOf
	isSet bool
}

func (v NullableConnectedSubnetsOneOf) Get() *ConnectedSubnetsOneOf {
	return v.value
}

func (v *NullableConnectedSubnetsOneOf) Set(val *ConnectedSubnetsOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectedSubnetsOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectedSubnetsOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectedSubnetsOneOf(val *ConnectedSubnetsOneOf) *NullableConnectedSubnetsOneOf {
	return &NullableConnectedSubnetsOneOf{value: val, isSet: true}
}

func (v NullableConnectedSubnetsOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectedSubnetsOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


