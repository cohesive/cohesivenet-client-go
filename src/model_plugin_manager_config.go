/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// PluginManagerConfig struct for PluginManagerConfig
type PluginManagerConfig struct {
	LogFiles []PluginManagerConfigLogFilesInner `json:"log_files,omitempty"`
	ConfigurationFiles []PluginManagerConfigConfigFile `json:"configuration_files,omitempty"`
	Ports []PluginManagerConfigPort `json:"ports,omitempty"`
	ProcessManager *PluginManagerConfigProcessManager `json:"process_manager,omitempty"`
	Executables []PluginManagerConfigExecutable `json:"executables,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PluginManagerConfig PluginManagerConfig

// NewPluginManagerConfig instantiates a new PluginManagerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginManagerConfig() *PluginManagerConfig {
	this := PluginManagerConfig{}
	return &this
}

// NewPluginManagerConfigWithDefaults instantiates a new PluginManagerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginManagerConfigWithDefaults() *PluginManagerConfig {
	this := PluginManagerConfig{}
	return &this
}

// GetLogFiles returns the LogFiles field value if set, zero value otherwise.
func (o *PluginManagerConfig) GetLogFiles() []PluginManagerConfigLogFilesInner {
	if o == nil || o.LogFiles == nil {
		var ret []PluginManagerConfigLogFilesInner
		return ret
	}
	return o.LogFiles
}

// GetLogFilesOk returns a tuple with the LogFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerConfig) GetLogFilesOk() ([]PluginManagerConfigLogFilesInner, bool) {
	if o == nil || o.LogFiles == nil {
		return nil, false
	}
	return o.LogFiles, true
}

// HasLogFiles returns a boolean if a field has been set.
func (o *PluginManagerConfig) HasLogFiles() bool {
	if o != nil && o.LogFiles != nil {
		return true
	}

	return false
}

// SetLogFiles gets a reference to the given []PluginManagerConfigLogFilesInner and assigns it to the LogFiles field.
func (o *PluginManagerConfig) SetLogFiles(v []PluginManagerConfigLogFilesInner) {
	o.LogFiles = v
}

// GetConfigurationFiles returns the ConfigurationFiles field value if set, zero value otherwise.
func (o *PluginManagerConfig) GetConfigurationFiles() []PluginManagerConfigConfigFile {
	if o == nil || o.ConfigurationFiles == nil {
		var ret []PluginManagerConfigConfigFile
		return ret
	}
	return o.ConfigurationFiles
}

// GetConfigurationFilesOk returns a tuple with the ConfigurationFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerConfig) GetConfigurationFilesOk() ([]PluginManagerConfigConfigFile, bool) {
	if o == nil || o.ConfigurationFiles == nil {
		return nil, false
	}
	return o.ConfigurationFiles, true
}

// HasConfigurationFiles returns a boolean if a field has been set.
func (o *PluginManagerConfig) HasConfigurationFiles() bool {
	if o != nil && o.ConfigurationFiles != nil {
		return true
	}

	return false
}

// SetConfigurationFiles gets a reference to the given []PluginManagerConfigConfigFile and assigns it to the ConfigurationFiles field.
func (o *PluginManagerConfig) SetConfigurationFiles(v []PluginManagerConfigConfigFile) {
	o.ConfigurationFiles = v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *PluginManagerConfig) GetPorts() []PluginManagerConfigPort {
	if o == nil || o.Ports == nil {
		var ret []PluginManagerConfigPort
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerConfig) GetPortsOk() ([]PluginManagerConfigPort, bool) {
	if o == nil || o.Ports == nil {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *PluginManagerConfig) HasPorts() bool {
	if o != nil && o.Ports != nil {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []PluginManagerConfigPort and assigns it to the Ports field.
func (o *PluginManagerConfig) SetPorts(v []PluginManagerConfigPort) {
	o.Ports = v
}

// GetProcessManager returns the ProcessManager field value if set, zero value otherwise.
func (o *PluginManagerConfig) GetProcessManager() PluginManagerConfigProcessManager {
	if o == nil || o.ProcessManager == nil {
		var ret PluginManagerConfigProcessManager
		return ret
	}
	return *o.ProcessManager
}

// GetProcessManagerOk returns a tuple with the ProcessManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerConfig) GetProcessManagerOk() (*PluginManagerConfigProcessManager, bool) {
	if o == nil || o.ProcessManager == nil {
		return nil, false
	}
	return o.ProcessManager, true
}

// HasProcessManager returns a boolean if a field has been set.
func (o *PluginManagerConfig) HasProcessManager() bool {
	if o != nil && o.ProcessManager != nil {
		return true
	}

	return false
}

// SetProcessManager gets a reference to the given PluginManagerConfigProcessManager and assigns it to the ProcessManager field.
func (o *PluginManagerConfig) SetProcessManager(v PluginManagerConfigProcessManager) {
	o.ProcessManager = &v
}

// GetExecutables returns the Executables field value if set, zero value otherwise.
func (o *PluginManagerConfig) GetExecutables() []PluginManagerConfigExecutable {
	if o == nil || o.Executables == nil {
		var ret []PluginManagerConfigExecutable
		return ret
	}
	return o.Executables
}

// GetExecutablesOk returns a tuple with the Executables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginManagerConfig) GetExecutablesOk() ([]PluginManagerConfigExecutable, bool) {
	if o == nil || o.Executables == nil {
		return nil, false
	}
	return o.Executables, true
}

// HasExecutables returns a boolean if a field has been set.
func (o *PluginManagerConfig) HasExecutables() bool {
	if o != nil && o.Executables != nil {
		return true
	}

	return false
}

// SetExecutables gets a reference to the given []PluginManagerConfigExecutable and assigns it to the Executables field.
func (o *PluginManagerConfig) SetExecutables(v []PluginManagerConfigExecutable) {
	o.Executables = v
}

func (o PluginManagerConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LogFiles != nil {
		toSerialize["log_files"] = o.LogFiles
	}
	if o.ConfigurationFiles != nil {
		toSerialize["configuration_files"] = o.ConfigurationFiles
	}
	if o.Ports != nil {
		toSerialize["ports"] = o.Ports
	}
	if o.ProcessManager != nil {
		toSerialize["process_manager"] = o.ProcessManager
	}
	if o.Executables != nil {
		toSerialize["executables"] = o.Executables
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PluginManagerConfig) UnmarshalJSON(bytes []byte) (err error) {
	varPluginManagerConfig := _PluginManagerConfig{}

	if err = json.Unmarshal(bytes, &varPluginManagerConfig); err == nil {
		*o = PluginManagerConfig(varPluginManagerConfig)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "log_files")
		delete(additionalProperties, "configuration_files")
		delete(additionalProperties, "ports")
		delete(additionalProperties, "process_manager")
		delete(additionalProperties, "executables")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePluginManagerConfig struct {
	value *PluginManagerConfig
	isSet bool
}

func (v NullablePluginManagerConfig) Get() *PluginManagerConfig {
	return v.value
}

func (v *NullablePluginManagerConfig) Set(val *PluginManagerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginManagerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginManagerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginManagerConfig(val *PluginManagerConfig) *NullablePluginManagerConfig {
	return &NullablePluginManagerConfig{value: val, isSet: true}
}

func (v NullablePluginManagerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginManagerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


