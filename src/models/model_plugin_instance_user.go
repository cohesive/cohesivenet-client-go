/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// PluginInstanceUser struct for PluginInstanceUser
type PluginInstanceUser struct {
	Username *string `json:"username,omitempty"`
	Password *bool `json:"password,omitempty"`
	PublicKey *string `json:"public_key,omitempty"`
}

// NewPluginInstanceUser instantiates a new PluginInstanceUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginInstanceUser() *PluginInstanceUser {
	this := PluginInstanceUser{}
	return &this
}

// NewPluginInstanceUserWithDefaults instantiates a new PluginInstanceUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginInstanceUserWithDefaults() *PluginInstanceUser {
	this := PluginInstanceUser{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *PluginInstanceUser) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginInstanceUser) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *PluginInstanceUser) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *PluginInstanceUser) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *PluginInstanceUser) GetPassword() bool {
	if o == nil || o.Password == nil {
		var ret bool
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginInstanceUser) GetPasswordOk() (*bool, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *PluginInstanceUser) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given bool and assigns it to the Password field.
func (o *PluginInstanceUser) SetPassword(v bool) {
	o.Password = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *PluginInstanceUser) GetPublicKey() string {
	if o == nil || o.PublicKey == nil {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginInstanceUser) GetPublicKeyOk() (*string, bool) {
	if o == nil || o.PublicKey == nil {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *PluginInstanceUser) HasPublicKey() bool {
	if o != nil && o.PublicKey != nil {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *PluginInstanceUser) SetPublicKey(v string) {
	o.PublicKey = &v
}

func (o PluginInstanceUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.PublicKey != nil {
		toSerialize["public_key"] = o.PublicKey
	}
	return json.Marshal(toSerialize)
}

type NullablePluginInstanceUser struct {
	value *PluginInstanceUser
	isSet bool
}

func (v NullablePluginInstanceUser) Get() *PluginInstanceUser {
	return v.value
}

func (v *NullablePluginInstanceUser) Set(val *PluginInstanceUser) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginInstanceUser) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginInstanceUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginInstanceUser(val *PluginInstanceUser) *NullablePluginInstanceUser {
	return &NullablePluginInstanceUser{value: val, isSet: true}
}

func (v NullablePluginInstanceUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginInstanceUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


