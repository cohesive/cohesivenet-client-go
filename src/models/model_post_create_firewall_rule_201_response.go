/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// PostCreateFirewallRule201Response - struct for PostCreateFirewallRule201Response
type PostCreateFirewallRule201Response struct {
	FirewallRuleV2CreateMultipleResponse *FirewallRuleV2CreateMultipleResponse
	FirewallRuleV2DetailResponse *FirewallRuleV2DetailResponse
}

// FirewallRuleV2CreateMultipleResponseAsPostCreateFirewallRule201Response is a convenience function that returns FirewallRuleV2CreateMultipleResponse wrapped in PostCreateFirewallRule201Response
func FirewallRuleV2CreateMultipleResponseAsPostCreateFirewallRule201Response(v *FirewallRuleV2CreateMultipleResponse) PostCreateFirewallRule201Response {
	return PostCreateFirewallRule201Response{
		FirewallRuleV2CreateMultipleResponse: v,
	}
}

// FirewallRuleV2DetailResponseAsPostCreateFirewallRule201Response is a convenience function that returns FirewallRuleV2DetailResponse wrapped in PostCreateFirewallRule201Response
func FirewallRuleV2DetailResponseAsPostCreateFirewallRule201Response(v *FirewallRuleV2DetailResponse) PostCreateFirewallRule201Response {
	return PostCreateFirewallRule201Response{
		FirewallRuleV2DetailResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PostCreateFirewallRule201Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FirewallRuleV2CreateMultipleResponse
	err = newStrictDecoder(data).Decode(&dst.FirewallRuleV2CreateMultipleResponse)
	if err == nil {
		jsonFirewallRuleV2CreateMultipleResponse, _ := json.Marshal(dst.FirewallRuleV2CreateMultipleResponse)
		if string(jsonFirewallRuleV2CreateMultipleResponse) == "{}" { // empty struct
			dst.FirewallRuleV2CreateMultipleResponse = nil
		} else {
			match++
		}
	} else {
		dst.FirewallRuleV2CreateMultipleResponse = nil
	}

	// try to unmarshal data into FirewallRuleV2DetailResponse
	err = newStrictDecoder(data).Decode(&dst.FirewallRuleV2DetailResponse)
	if err == nil {
		jsonFirewallRuleV2DetailResponse, _ := json.Marshal(dst.FirewallRuleV2DetailResponse)
		if string(jsonFirewallRuleV2DetailResponse) == "{}" { // empty struct
			dst.FirewallRuleV2DetailResponse = nil
		} else {
			match++
		}
	} else {
		dst.FirewallRuleV2DetailResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FirewallRuleV2CreateMultipleResponse = nil
		dst.FirewallRuleV2DetailResponse = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(PostCreateFirewallRule201Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(PostCreateFirewallRule201Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PostCreateFirewallRule201Response) MarshalJSON() ([]byte, error) {
	if src.FirewallRuleV2CreateMultipleResponse != nil {
		return json.Marshal(&src.FirewallRuleV2CreateMultipleResponse)
	}

	if src.FirewallRuleV2DetailResponse != nil {
		return json.Marshal(&src.FirewallRuleV2DetailResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PostCreateFirewallRule201Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FirewallRuleV2CreateMultipleResponse != nil {
		return obj.FirewallRuleV2CreateMultipleResponse
	}

	if obj.FirewallRuleV2DetailResponse != nil {
		return obj.FirewallRuleV2DetailResponse
	}

	// all schemas are nil
	return nil
}

type NullablePostCreateFirewallRule201Response struct {
	value *PostCreateFirewallRule201Response
	isSet bool
}

func (v NullablePostCreateFirewallRule201Response) Get() *PostCreateFirewallRule201Response {
	return v.value
}

func (v *NullablePostCreateFirewallRule201Response) Set(val *PostCreateFirewallRule201Response) {
	v.value = val
	v.isSet = true
}

func (v NullablePostCreateFirewallRule201Response) IsSet() bool {
	return v.isSet
}

func (v *NullablePostCreateFirewallRule201Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostCreateFirewallRule201Response(val *PostCreateFirewallRule201Response) *NullablePostCreateFirewallRule201Response {
	return &NullablePostCreateFirewallRule201Response{value: val, isSet: true}
}

func (v NullablePostCreateFirewallRule201Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostCreateFirewallRule201Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


