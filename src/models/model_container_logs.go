/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// ContainerLogs struct for ContainerLogs
type ContainerLogs struct {
	Uuid *string `json:"uuid,omitempty"`
	Logs []string `json:"logs,omitempty"`
}

// NewContainerLogs instantiates a new ContainerLogs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerLogs() *ContainerLogs {
	this := ContainerLogs{}
	return &this
}

// NewContainerLogsWithDefaults instantiates a new ContainerLogs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerLogsWithDefaults() *ContainerLogs {
	this := ContainerLogs{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ContainerLogs) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerLogs) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ContainerLogs) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ContainerLogs) SetUuid(v string) {
	o.Uuid = &v
}

// GetLogs returns the Logs field value if set, zero value otherwise.
func (o *ContainerLogs) GetLogs() []string {
	if o == nil || o.Logs == nil {
		var ret []string
		return ret
	}
	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerLogs) GetLogsOk() ([]string, bool) {
	if o == nil || o.Logs == nil {
		return nil, false
	}
	return o.Logs, true
}

// HasLogs returns a boolean if a field has been set.
func (o *ContainerLogs) HasLogs() bool {
	if o != nil && o.Logs != nil {
		return true
	}

	return false
}

// SetLogs gets a reference to the given []string and assigns it to the Logs field.
func (o *ContainerLogs) SetLogs(v []string) {
	o.Logs = v
}

func (o ContainerLogs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Logs != nil {
		toSerialize["logs"] = o.Logs
	}
	return json.Marshal(toSerialize)
}

type NullableContainerLogs struct {
	value *ContainerLogs
	isSet bool
}

func (v NullableContainerLogs) Get() *ContainerLogs {
	return v.value
}

func (v *NullableContainerLogs) Set(val *ContainerLogs) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerLogs) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerLogs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerLogs(val *ContainerLogs) *NullableContainerLogs {
	return &NullableContainerLogs{value: val, isSet: true}
}

func (v NullableContainerLogs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerLogs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


