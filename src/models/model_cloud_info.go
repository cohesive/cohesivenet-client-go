/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// CloudInfo struct for CloudInfo
type CloudInfo struct {
	// ec2, gce, azure, hpcloud, centurylink
	CloudType *string `json:"cloud_type,omitempty"`
	CloudData *CloudInfoCloudData `json:"cloud_data,omitempty"`
}

// NewCloudInfo instantiates a new CloudInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudInfo() *CloudInfo {
	this := CloudInfo{}
	return &this
}

// NewCloudInfoWithDefaults instantiates a new CloudInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudInfoWithDefaults() *CloudInfo {
	this := CloudInfo{}
	return &this
}

// GetCloudType returns the CloudType field value if set, zero value otherwise.
func (o *CloudInfo) GetCloudType() string {
	if o == nil || o.CloudType == nil {
		var ret string
		return ret
	}
	return *o.CloudType
}

// GetCloudTypeOk returns a tuple with the CloudType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudInfo) GetCloudTypeOk() (*string, bool) {
	if o == nil || o.CloudType == nil {
		return nil, false
	}
	return o.CloudType, true
}

// HasCloudType returns a boolean if a field has been set.
func (o *CloudInfo) HasCloudType() bool {
	if o != nil && o.CloudType != nil {
		return true
	}

	return false
}

// SetCloudType gets a reference to the given string and assigns it to the CloudType field.
func (o *CloudInfo) SetCloudType(v string) {
	o.CloudType = &v
}

// GetCloudData returns the CloudData field value if set, zero value otherwise.
func (o *CloudInfo) GetCloudData() CloudInfoCloudData {
	if o == nil || o.CloudData == nil {
		var ret CloudInfoCloudData
		return ret
	}
	return *o.CloudData
}

// GetCloudDataOk returns a tuple with the CloudData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudInfo) GetCloudDataOk() (*CloudInfoCloudData, bool) {
	if o == nil || o.CloudData == nil {
		return nil, false
	}
	return o.CloudData, true
}

// HasCloudData returns a boolean if a field has been set.
func (o *CloudInfo) HasCloudData() bool {
	if o != nil && o.CloudData != nil {
		return true
	}

	return false
}

// SetCloudData gets a reference to the given CloudInfoCloudData and assigns it to the CloudData field.
func (o *CloudInfo) SetCloudData(v CloudInfoCloudData) {
	o.CloudData = &v
}

func (o CloudInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CloudType != nil {
		toSerialize["cloud_type"] = o.CloudType
	}
	if o.CloudData != nil {
		toSerialize["cloud_data"] = o.CloudData
	}
	return json.Marshal(toSerialize)
}

type NullableCloudInfo struct {
	value *CloudInfo
	isSet bool
}

func (v NullableCloudInfo) Get() *CloudInfo {
	return v.value
}

func (v *NullableCloudInfo) Set(val *CloudInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudInfo(val *CloudInfo) *NullableCloudInfo {
	return &NullableCloudInfo{value: val, isSet: true}
}

func (v NullableCloudInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


