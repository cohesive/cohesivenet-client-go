/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// RemoteSupportConfig struct for RemoteSupportConfig
type RemoteSupportConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// NewRemoteSupportConfig instantiates a new RemoteSupportConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteSupportConfig() *RemoteSupportConfig {
	this := RemoteSupportConfig{}
	return &this
}

// NewRemoteSupportConfigWithDefaults instantiates a new RemoteSupportConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteSupportConfigWithDefaults() *RemoteSupportConfig {
	this := RemoteSupportConfig{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RemoteSupportConfig) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSupportConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RemoteSupportConfig) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RemoteSupportConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o RemoteSupportConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteSupportConfig struct {
	value *RemoteSupportConfig
	isSet bool
}

func (v NullableRemoteSupportConfig) Get() *RemoteSupportConfig {
	return v.value
}

func (v *NullableRemoteSupportConfig) Set(val *RemoteSupportConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteSupportConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteSupportConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteSupportConfig(val *RemoteSupportConfig) *NullableRemoteSupportConfig {
	return &NullableRemoteSupportConfig{value: val, isSet: true}
}

func (v NullableRemoteSupportConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteSupportConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


