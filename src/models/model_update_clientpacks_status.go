/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// UpdateClientpacksStatus struct for UpdateClientpacksStatus
type UpdateClientpacksStatus struct {
	Enabled *bool `json:"enabled,omitempty"`
	CheckedOut *bool `json:"checked_out,omitempty"`
}

// NewUpdateClientpacksStatus instantiates a new UpdateClientpacksStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateClientpacksStatus() *UpdateClientpacksStatus {
	this := UpdateClientpacksStatus{}
	return &this
}

// NewUpdateClientpacksStatusWithDefaults instantiates a new UpdateClientpacksStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateClientpacksStatusWithDefaults() *UpdateClientpacksStatus {
	this := UpdateClientpacksStatus{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdateClientpacksStatus) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateClientpacksStatus) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UpdateClientpacksStatus) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdateClientpacksStatus) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetCheckedOut returns the CheckedOut field value if set, zero value otherwise.
func (o *UpdateClientpacksStatus) GetCheckedOut() bool {
	if o == nil || o.CheckedOut == nil {
		var ret bool
		return ret
	}
	return *o.CheckedOut
}

// GetCheckedOutOk returns a tuple with the CheckedOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateClientpacksStatus) GetCheckedOutOk() (*bool, bool) {
	if o == nil || o.CheckedOut == nil {
		return nil, false
	}
	return o.CheckedOut, true
}

// HasCheckedOut returns a boolean if a field has been set.
func (o *UpdateClientpacksStatus) HasCheckedOut() bool {
	if o != nil && o.CheckedOut != nil {
		return true
	}

	return false
}

// SetCheckedOut gets a reference to the given bool and assigns it to the CheckedOut field.
func (o *UpdateClientpacksStatus) SetCheckedOut(v bool) {
	o.CheckedOut = &v
}

func (o UpdateClientpacksStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.CheckedOut != nil {
		toSerialize["checked_out"] = o.CheckedOut
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateClientpacksStatus struct {
	value *UpdateClientpacksStatus
	isSet bool
}

func (v NullableUpdateClientpacksStatus) Get() *UpdateClientpacksStatus {
	return v.value
}

func (v *NullableUpdateClientpacksStatus) Set(val *UpdateClientpacksStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateClientpacksStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateClientpacksStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateClientpacksStatus(val *UpdateClientpacksStatus) *NullableUpdateClientpacksStatus {
	return &NullableUpdateClientpacksStatus{value: val, isSet: true}
}

func (v NullableUpdateClientpacksStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateClientpacksStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


