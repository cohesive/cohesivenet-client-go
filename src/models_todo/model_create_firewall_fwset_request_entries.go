/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
	"fmt"
)

// CreateFirewallFwsetRequestEntries - struct for CreateFirewallFwsetRequestEntries
type CreateFirewallFwsetRequestEntries struct {
	ArrayOfCreateFirewallFwsetRequestEntriesOneOfInner *[]CreateFirewallFwsetRequestEntriesOneOfInner
	String *string
}

// []CreateFirewallFwsetRequestEntriesOneOfInnerAsCreateFirewallFwsetRequestEntries is a convenience function that returns []CreateFirewallFwsetRequestEntriesOneOfInner wrapped in CreateFirewallFwsetRequestEntries
func ArrayOfCreateFirewallFwsetRequestEntriesOneOfInnerAsCreateFirewallFwsetRequestEntries(v *[]CreateFirewallFwsetRequestEntriesOneOfInner) CreateFirewallFwsetRequestEntries {
	return CreateFirewallFwsetRequestEntries{
		ArrayOfCreateFirewallFwsetRequestEntriesOneOfInner: v,
	}
}

// stringAsCreateFirewallFwsetRequestEntries is a convenience function that returns string wrapped in CreateFirewallFwsetRequestEntries
func StringAsCreateFirewallFwsetRequestEntries(v *string) CreateFirewallFwsetRequestEntries {
	return CreateFirewallFwsetRequestEntries{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateFirewallFwsetRequestEntries) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfCreateFirewallFwsetRequestEntriesOneOfInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfCreateFirewallFwsetRequestEntriesOneOfInner)
	if err == nil {
		jsonArrayOfCreateFirewallFwsetRequestEntriesOneOfInner, _ := json.Marshal(dst.ArrayOfCreateFirewallFwsetRequestEntriesOneOfInner)
		if string(jsonArrayOfCreateFirewallFwsetRequestEntriesOneOfInner) == "{}" { // empty struct
			dst.ArrayOfCreateFirewallFwsetRequestEntriesOneOfInner = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfCreateFirewallFwsetRequestEntriesOneOfInner = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfCreateFirewallFwsetRequestEntriesOneOfInner = nil
		dst.String = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(CreateFirewallFwsetRequestEntries)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(CreateFirewallFwsetRequestEntries)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateFirewallFwsetRequestEntries) MarshalJSON() ([]byte, error) {
	if src.ArrayOfCreateFirewallFwsetRequestEntriesOneOfInner != nil {
		return json.Marshal(&src.ArrayOfCreateFirewallFwsetRequestEntriesOneOfInner)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateFirewallFwsetRequestEntries) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfCreateFirewallFwsetRequestEntriesOneOfInner != nil {
		return obj.ArrayOfCreateFirewallFwsetRequestEntriesOneOfInner
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableCreateFirewallFwsetRequestEntries struct {
	value *CreateFirewallFwsetRequestEntries
	isSet bool
}

func (v NullableCreateFirewallFwsetRequestEntries) Get() *CreateFirewallFwsetRequestEntries {
	return v.value
}

func (v *NullableCreateFirewallFwsetRequestEntries) Set(val *CreateFirewallFwsetRequestEntries) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateFirewallFwsetRequestEntries) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateFirewallFwsetRequestEntries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateFirewallFwsetRequestEntries(val *CreateFirewallFwsetRequestEntries) *NullableCreateFirewallFwsetRequestEntries {
	return &NullableCreateFirewallFwsetRequestEntries{value: val, isSet: true}
}

func (v NullableCreateFirewallFwsetRequestEntries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateFirewallFwsetRequestEntries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


