/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// TaskToken struct for TaskToken
type TaskToken struct {
	Token *string `json:"token,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewTaskToken instantiates a new TaskToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskToken() *TaskToken {
	this := TaskToken{}
	return &this
}

// NewTaskTokenWithDefaults instantiates a new TaskToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskTokenWithDefaults() *TaskToken {
	this := TaskToken{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *TaskToken) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskToken) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *TaskToken) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *TaskToken) SetToken(v string) {
	o.Token = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TaskToken) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskToken) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TaskToken) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TaskToken) SetStatus(v string) {
	o.Status = &v
}

func (o TaskToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableTaskToken struct {
	value *TaskToken
	isSet bool
}

func (v NullableTaskToken) Get() *TaskToken {
	return v.value
}

func (v *NullableTaskToken) Set(val *TaskToken) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskToken) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskToken(val *TaskToken) *NullableTaskToken {
	return &NullableTaskToken{value: val, isSet: true}
}

func (v NullableTaskToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


