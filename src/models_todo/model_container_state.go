/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// ContainerState struct for ContainerState
type ContainerState struct {
	Status *string `json:"Status,omitempty"`
	Running *bool `json:"Running,omitempty"`
	Paused *bool `json:"Paused,omitempty"`
	Restarting *bool `json:"Restarting,omitempty"`
	OOMKilled *bool `json:"OOMKilled,omitempty"`
	Pid *int32 `json:"Pid,omitempty"`
	ExitCode *int32 `json:"ExitCode,omitempty"`
	Error *string `json:"Error,omitempty"`
	StartedAt *string `json:"StartedAt,omitempty"`
	FinishedAt *string `json:"FinishedAt,omitempty"`
	Ghost *bool `json:"Ghost,omitempty"`
	Dead *bool `json:"Dead,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ContainerState ContainerState

// NewContainerState instantiates a new ContainerState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerState() *ContainerState {
	this := ContainerState{}
	return &this
}

// NewContainerStateWithDefaults instantiates a new ContainerState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerStateWithDefaults() *ContainerState {
	this := ContainerState{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ContainerState) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerState) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ContainerState) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ContainerState) SetStatus(v string) {
	o.Status = &v
}

// GetRunning returns the Running field value if set, zero value otherwise.
func (o *ContainerState) GetRunning() bool {
	if o == nil || o.Running == nil {
		var ret bool
		return ret
	}
	return *o.Running
}

// GetRunningOk returns a tuple with the Running field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerState) GetRunningOk() (*bool, bool) {
	if o == nil || o.Running == nil {
		return nil, false
	}
	return o.Running, true
}

// HasRunning returns a boolean if a field has been set.
func (o *ContainerState) HasRunning() bool {
	if o != nil && o.Running != nil {
		return true
	}

	return false
}

// SetRunning gets a reference to the given bool and assigns it to the Running field.
func (o *ContainerState) SetRunning(v bool) {
	o.Running = &v
}

// GetPaused returns the Paused field value if set, zero value otherwise.
func (o *ContainerState) GetPaused() bool {
	if o == nil || o.Paused == nil {
		var ret bool
		return ret
	}
	return *o.Paused
}

// GetPausedOk returns a tuple with the Paused field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerState) GetPausedOk() (*bool, bool) {
	if o == nil || o.Paused == nil {
		return nil, false
	}
	return o.Paused, true
}

// HasPaused returns a boolean if a field has been set.
func (o *ContainerState) HasPaused() bool {
	if o != nil && o.Paused != nil {
		return true
	}

	return false
}

// SetPaused gets a reference to the given bool and assigns it to the Paused field.
func (o *ContainerState) SetPaused(v bool) {
	o.Paused = &v
}

// GetRestarting returns the Restarting field value if set, zero value otherwise.
func (o *ContainerState) GetRestarting() bool {
	if o == nil || o.Restarting == nil {
		var ret bool
		return ret
	}
	return *o.Restarting
}

// GetRestartingOk returns a tuple with the Restarting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerState) GetRestartingOk() (*bool, bool) {
	if o == nil || o.Restarting == nil {
		return nil, false
	}
	return o.Restarting, true
}

// HasRestarting returns a boolean if a field has been set.
func (o *ContainerState) HasRestarting() bool {
	if o != nil && o.Restarting != nil {
		return true
	}

	return false
}

// SetRestarting gets a reference to the given bool and assigns it to the Restarting field.
func (o *ContainerState) SetRestarting(v bool) {
	o.Restarting = &v
}

// GetOOMKilled returns the OOMKilled field value if set, zero value otherwise.
func (o *ContainerState) GetOOMKilled() bool {
	if o == nil || o.OOMKilled == nil {
		var ret bool
		return ret
	}
	return *o.OOMKilled
}

// GetOOMKilledOk returns a tuple with the OOMKilled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerState) GetOOMKilledOk() (*bool, bool) {
	if o == nil || o.OOMKilled == nil {
		return nil, false
	}
	return o.OOMKilled, true
}

// HasOOMKilled returns a boolean if a field has been set.
func (o *ContainerState) HasOOMKilled() bool {
	if o != nil && o.OOMKilled != nil {
		return true
	}

	return false
}

// SetOOMKilled gets a reference to the given bool and assigns it to the OOMKilled field.
func (o *ContainerState) SetOOMKilled(v bool) {
	o.OOMKilled = &v
}

// GetPid returns the Pid field value if set, zero value otherwise.
func (o *ContainerState) GetPid() int32 {
	if o == nil || o.Pid == nil {
		var ret int32
		return ret
	}
	return *o.Pid
}

// GetPidOk returns a tuple with the Pid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerState) GetPidOk() (*int32, bool) {
	if o == nil || o.Pid == nil {
		return nil, false
	}
	return o.Pid, true
}

// HasPid returns a boolean if a field has been set.
func (o *ContainerState) HasPid() bool {
	if o != nil && o.Pid != nil {
		return true
	}

	return false
}

// SetPid gets a reference to the given int32 and assigns it to the Pid field.
func (o *ContainerState) SetPid(v int32) {
	o.Pid = &v
}

// GetExitCode returns the ExitCode field value if set, zero value otherwise.
func (o *ContainerState) GetExitCode() int32 {
	if o == nil || o.ExitCode == nil {
		var ret int32
		return ret
	}
	return *o.ExitCode
}

// GetExitCodeOk returns a tuple with the ExitCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerState) GetExitCodeOk() (*int32, bool) {
	if o == nil || o.ExitCode == nil {
		return nil, false
	}
	return o.ExitCode, true
}

// HasExitCode returns a boolean if a field has been set.
func (o *ContainerState) HasExitCode() bool {
	if o != nil && o.ExitCode != nil {
		return true
	}

	return false
}

// SetExitCode gets a reference to the given int32 and assigns it to the ExitCode field.
func (o *ContainerState) SetExitCode(v int32) {
	o.ExitCode = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ContainerState) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerState) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ContainerState) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ContainerState) SetError(v string) {
	o.Error = &v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *ContainerState) GetStartedAt() string {
	if o == nil || o.StartedAt == nil {
		var ret string
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerState) GetStartedAtOk() (*string, bool) {
	if o == nil || o.StartedAt == nil {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *ContainerState) HasStartedAt() bool {
	if o != nil && o.StartedAt != nil {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given string and assigns it to the StartedAt field.
func (o *ContainerState) SetStartedAt(v string) {
	o.StartedAt = &v
}

// GetFinishedAt returns the FinishedAt field value if set, zero value otherwise.
func (o *ContainerState) GetFinishedAt() string {
	if o == nil || o.FinishedAt == nil {
		var ret string
		return ret
	}
	return *o.FinishedAt
}

// GetFinishedAtOk returns a tuple with the FinishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerState) GetFinishedAtOk() (*string, bool) {
	if o == nil || o.FinishedAt == nil {
		return nil, false
	}
	return o.FinishedAt, true
}

// HasFinishedAt returns a boolean if a field has been set.
func (o *ContainerState) HasFinishedAt() bool {
	if o != nil && o.FinishedAt != nil {
		return true
	}

	return false
}

// SetFinishedAt gets a reference to the given string and assigns it to the FinishedAt field.
func (o *ContainerState) SetFinishedAt(v string) {
	o.FinishedAt = &v
}

// GetGhost returns the Ghost field value if set, zero value otherwise.
func (o *ContainerState) GetGhost() bool {
	if o == nil || o.Ghost == nil {
		var ret bool
		return ret
	}
	return *o.Ghost
}

// GetGhostOk returns a tuple with the Ghost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerState) GetGhostOk() (*bool, bool) {
	if o == nil || o.Ghost == nil {
		return nil, false
	}
	return o.Ghost, true
}

// HasGhost returns a boolean if a field has been set.
func (o *ContainerState) HasGhost() bool {
	if o != nil && o.Ghost != nil {
		return true
	}

	return false
}

// SetGhost gets a reference to the given bool and assigns it to the Ghost field.
func (o *ContainerState) SetGhost(v bool) {
	o.Ghost = &v
}

// GetDead returns the Dead field value if set, zero value otherwise.
func (o *ContainerState) GetDead() bool {
	if o == nil || o.Dead == nil {
		var ret bool
		return ret
	}
	return *o.Dead
}

// GetDeadOk returns a tuple with the Dead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerState) GetDeadOk() (*bool, bool) {
	if o == nil || o.Dead == nil {
		return nil, false
	}
	return o.Dead, true
}

// HasDead returns a boolean if a field has been set.
func (o *ContainerState) HasDead() bool {
	if o != nil && o.Dead != nil {
		return true
	}

	return false
}

// SetDead gets a reference to the given bool and assigns it to the Dead field.
func (o *ContainerState) SetDead(v bool) {
	o.Dead = &v
}

func (o ContainerState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["Status"] = o.Status
	}
	if o.Running != nil {
		toSerialize["Running"] = o.Running
	}
	if o.Paused != nil {
		toSerialize["Paused"] = o.Paused
	}
	if o.Restarting != nil {
		toSerialize["Restarting"] = o.Restarting
	}
	if o.OOMKilled != nil {
		toSerialize["OOMKilled"] = o.OOMKilled
	}
	if o.Pid != nil {
		toSerialize["Pid"] = o.Pid
	}
	if o.ExitCode != nil {
		toSerialize["ExitCode"] = o.ExitCode
	}
	if o.Error != nil {
		toSerialize["Error"] = o.Error
	}
	if o.StartedAt != nil {
		toSerialize["StartedAt"] = o.StartedAt
	}
	if o.FinishedAt != nil {
		toSerialize["FinishedAt"] = o.FinishedAt
	}
	if o.Ghost != nil {
		toSerialize["Ghost"] = o.Ghost
	}
	if o.Dead != nil {
		toSerialize["Dead"] = o.Dead
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ContainerState) UnmarshalJSON(bytes []byte) (err error) {
	varContainerState := _ContainerState{}

	if err = json.Unmarshal(bytes, &varContainerState); err == nil {
		*o = ContainerState(varContainerState)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "Status")
		delete(additionalProperties, "Running")
		delete(additionalProperties, "Paused")
		delete(additionalProperties, "Restarting")
		delete(additionalProperties, "OOMKilled")
		delete(additionalProperties, "Pid")
		delete(additionalProperties, "ExitCode")
		delete(additionalProperties, "Error")
		delete(additionalProperties, "StartedAt")
		delete(additionalProperties, "FinishedAt")
		delete(additionalProperties, "Ghost")
		delete(additionalProperties, "Dead")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableContainerState struct {
	value *ContainerState
	isSet bool
}

func (v NullableContainerState) Get() *ContainerState {
	return v.value
}

func (v *NullableContainerState) Set(val *ContainerState) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerState) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerState(val *ContainerState) *NullableContainerState {
	return &NullableContainerState{value: val, isSet: true}
}

func (v NullableContainerState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


