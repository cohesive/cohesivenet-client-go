/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// UpdateRemoteSupportConfigRequest struct for UpdateRemoteSupportConfigRequest
type UpdateRemoteSupportConfigRequest struct {
	// True if remote support should be enabled
	Enabled *bool `json:"enabled,omitempty"`
	// True if remote support credential should be revoked
	RevokeCredential *bool `json:"revoke_credential,omitempty"`
}

// NewUpdateRemoteSupportConfigRequest instantiates a new UpdateRemoteSupportConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRemoteSupportConfigRequest() *UpdateRemoteSupportConfigRequest {
	this := UpdateRemoteSupportConfigRequest{}
	return &this
}

// NewUpdateRemoteSupportConfigRequestWithDefaults instantiates a new UpdateRemoteSupportConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRemoteSupportConfigRequestWithDefaults() *UpdateRemoteSupportConfigRequest {
	this := UpdateRemoteSupportConfigRequest{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdateRemoteSupportConfigRequest) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRemoteSupportConfigRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UpdateRemoteSupportConfigRequest) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdateRemoteSupportConfigRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRevokeCredential returns the RevokeCredential field value if set, zero value otherwise.
func (o *UpdateRemoteSupportConfigRequest) GetRevokeCredential() bool {
	if o == nil || o.RevokeCredential == nil {
		var ret bool
		return ret
	}
	return *o.RevokeCredential
}

// GetRevokeCredentialOk returns a tuple with the RevokeCredential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRemoteSupportConfigRequest) GetRevokeCredentialOk() (*bool, bool) {
	if o == nil || o.RevokeCredential == nil {
		return nil, false
	}
	return o.RevokeCredential, true
}

// HasRevokeCredential returns a boolean if a field has been set.
func (o *UpdateRemoteSupportConfigRequest) HasRevokeCredential() bool {
	if o != nil && o.RevokeCredential != nil {
		return true
	}

	return false
}

// SetRevokeCredential gets a reference to the given bool and assigns it to the RevokeCredential field.
func (o *UpdateRemoteSupportConfigRequest) SetRevokeCredential(v bool) {
	o.RevokeCredential = &v
}

func (o UpdateRemoteSupportConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.RevokeCredential != nil {
		toSerialize["revoke_credential"] = o.RevokeCredential
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateRemoteSupportConfigRequest struct {
	value *UpdateRemoteSupportConfigRequest
	isSet bool
}

func (v NullableUpdateRemoteSupportConfigRequest) Get() *UpdateRemoteSupportConfigRequest {
	return v.value
}

func (v *NullableUpdateRemoteSupportConfigRequest) Set(val *UpdateRemoteSupportConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRemoteSupportConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRemoteSupportConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRemoteSupportConfigRequest(val *UpdateRemoteSupportConfigRequest) *NullableUpdateRemoteSupportConfigRequest {
	return &NullableUpdateRemoteSupportConfigRequest{value: val, isSet: true}
}

func (v NullableUpdateRemoteSupportConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRemoteSupportConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


