/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
	"fmt"
)

// CreateSubgroupRequest - struct for CreateSubgroupRequest
type CreateSubgroupRequest struct {
	Interface{} *interface{}
}

// interface{}AsCreateSubgroupRequest is a convenience function that returns interface{} wrapped in CreateSubgroupRequest
func Interface{}AsCreateSubgroupRequest(v *interface{}) CreateSubgroupRequest {
	return CreateSubgroupRequest{
		Interface{}: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateSubgroupRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Interface{}
	err = newStrictDecoder(data).Decode(&dst.Interface{})
	if err == nil {
		jsonInterface{}, _ := json.Marshal(dst.Interface{})
		if string(jsonInterface{}) == "{}" { // empty struct
			dst.Interface{} = nil
		} else {
			match++
		}
	} else {
		dst.Interface{} = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Interface{} = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(CreateSubgroupRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(CreateSubgroupRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateSubgroupRequest) MarshalJSON() ([]byte, error) {
	if src.Interface{} != nil {
		return json.Marshal(&src.Interface{})
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateSubgroupRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Interface{} != nil {
		return obj.Interface{}
	}

	// all schemas are nil
	return nil
}

type NullableCreateSubgroupRequest struct {
	value *CreateSubgroupRequest
	isSet bool
}

func (v NullableCreateSubgroupRequest) Get() *CreateSubgroupRequest {
	return v.value
}

func (v *NullableCreateSubgroupRequest) Set(val *CreateSubgroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSubgroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSubgroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSubgroupRequest(val *CreateSubgroupRequest) *NullableCreateSubgroupRequest {
	return &NullableCreateSubgroupRequest{value: val, isSet: true}
}

func (v NullableCreateSubgroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSubgroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


