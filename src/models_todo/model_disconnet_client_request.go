/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// DisconnetClientRequest struct for DisconnetClientRequest
type DisconnetClientRequest struct {
	Disconnect bool `json:"disconnect"`
}

// NewDisconnetClientRequest instantiates a new DisconnetClientRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisconnetClientRequest(disconnect bool) *DisconnetClientRequest {
	this := DisconnetClientRequest{}
	this.Disconnect = disconnect
	return &this
}

// NewDisconnetClientRequestWithDefaults instantiates a new DisconnetClientRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisconnetClientRequestWithDefaults() *DisconnetClientRequest {
	this := DisconnetClientRequest{}
	return &this
}

// GetDisconnect returns the Disconnect field value
func (o *DisconnetClientRequest) GetDisconnect() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disconnect
}

// GetDisconnectOk returns a tuple with the Disconnect field value
// and a boolean to check if the value has been set.
func (o *DisconnetClientRequest) GetDisconnectOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disconnect, true
}

// SetDisconnect sets field value
func (o *DisconnetClientRequest) SetDisconnect(v bool) {
	o.Disconnect = v
}

func (o DisconnetClientRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["disconnect"] = o.Disconnect
	}
	return json.Marshal(toSerialize)
}

type NullableDisconnetClientRequest struct {
	value *DisconnetClientRequest
	isSet bool
}

func (v NullableDisconnetClientRequest) Get() *DisconnetClientRequest {
	return v.value
}

func (v *NullableDisconnetClientRequest) Set(val *DisconnetClientRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDisconnetClientRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDisconnetClientRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisconnetClientRequest(val *DisconnetClientRequest) *NullableDisconnetClientRequest {
	return &NullableDisconnetClientRequest{value: val, isSet: true}
}

func (v NullableDisconnetClientRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisconnetClientRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


