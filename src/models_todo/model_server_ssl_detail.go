/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// ServerSSLDetail struct for ServerSSLDetail
type ServerSSLDetail struct {
	Uuid *string `json:"uuid,omitempty"`
	Status *string `json:"status,omitempty"`
	State *string `json:"state,omitempty"`
}

// NewServerSSLDetail instantiates a new ServerSSLDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerSSLDetail() *ServerSSLDetail {
	this := ServerSSLDetail{}
	return &this
}

// NewServerSSLDetailWithDefaults instantiates a new ServerSSLDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerSSLDetailWithDefaults() *ServerSSLDetail {
	this := ServerSSLDetail{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ServerSSLDetail) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSSLDetail) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ServerSSLDetail) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ServerSSLDetail) SetUuid(v string) {
	o.Uuid = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ServerSSLDetail) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSSLDetail) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ServerSSLDetail) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ServerSSLDetail) SetStatus(v string) {
	o.Status = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ServerSSLDetail) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerSSLDetail) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ServerSSLDetail) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ServerSSLDetail) SetState(v string) {
	o.State = &v
}

func (o ServerSSLDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableServerSSLDetail struct {
	value *ServerSSLDetail
	isSet bool
}

func (v NullableServerSSLDetail) Get() *ServerSSLDetail {
	return v.value
}

func (v *NullableServerSSLDetail) Set(val *ServerSSLDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableServerSSLDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableServerSSLDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerSSLDetail(val *ServerSSLDetail) *NullableServerSSLDetail {
	return &NullableServerSSLDetail{value: val, isSet: true}
}

func (v NullableServerSSLDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerSSLDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


