/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// RunPluginInstanceProcessActionRequest struct for RunPluginInstanceProcessActionRequest
type RunPluginInstanceProcessActionRequest struct {
	// Name of the process. Should be listed in  subprocesses list of config. 
	Process string `json:"process"`
	// Action to take. See documentation for supported actions for your process manager. 
	Action string `json:"action"`
	// Number of seconds to wait before timing out.
	Timeout *int32 `json:"timeout,omitempty"`
}

// NewRunPluginInstanceProcessActionRequest instantiates a new RunPluginInstanceProcessActionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunPluginInstanceProcessActionRequest(process string, action string) *RunPluginInstanceProcessActionRequest {
	this := RunPluginInstanceProcessActionRequest{}
	this.Process = process
	this.Action = action
	var timeout int32 = 20
	this.Timeout = &timeout
	return &this
}

// NewRunPluginInstanceProcessActionRequestWithDefaults instantiates a new RunPluginInstanceProcessActionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunPluginInstanceProcessActionRequestWithDefaults() *RunPluginInstanceProcessActionRequest {
	this := RunPluginInstanceProcessActionRequest{}
	var timeout int32 = 20
	this.Timeout = &timeout
	return &this
}

// GetProcess returns the Process field value
func (o *RunPluginInstanceProcessActionRequest) GetProcess() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Process
}

// GetProcessOk returns a tuple with the Process field value
// and a boolean to check if the value has been set.
func (o *RunPluginInstanceProcessActionRequest) GetProcessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Process, true
}

// SetProcess sets field value
func (o *RunPluginInstanceProcessActionRequest) SetProcess(v string) {
	o.Process = v
}

// GetAction returns the Action field value
func (o *RunPluginInstanceProcessActionRequest) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *RunPluginInstanceProcessActionRequest) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *RunPluginInstanceProcessActionRequest) SetAction(v string) {
	o.Action = v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *RunPluginInstanceProcessActionRequest) GetTimeout() int32 {
	if o == nil || o.Timeout == nil {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunPluginInstanceProcessActionRequest) GetTimeoutOk() (*int32, bool) {
	if o == nil || o.Timeout == nil {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *RunPluginInstanceProcessActionRequest) HasTimeout() bool {
	if o != nil && o.Timeout != nil {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *RunPluginInstanceProcessActionRequest) SetTimeout(v int32) {
	o.Timeout = &v
}

func (o RunPluginInstanceProcessActionRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["process"] = o.Process
	}
	if true {
		toSerialize["action"] = o.Action
	}
	if o.Timeout != nil {
		toSerialize["timeout"] = o.Timeout
	}
	return json.Marshal(toSerialize)
}

type NullableRunPluginInstanceProcessActionRequest struct {
	value *RunPluginInstanceProcessActionRequest
	isSet bool
}

func (v NullableRunPluginInstanceProcessActionRequest) Get() *RunPluginInstanceProcessActionRequest {
	return v.value
}

func (v *NullableRunPluginInstanceProcessActionRequest) Set(val *RunPluginInstanceProcessActionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRunPluginInstanceProcessActionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRunPluginInstanceProcessActionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunPluginInstanceProcessActionRequest(val *RunPluginInstanceProcessActionRequest) *NullableRunPluginInstanceProcessActionRequest {
	return &NullableRunPluginInstanceProcessActionRequest{value: val, isSet: true}
}

func (v NullableRunPluginInstanceProcessActionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunPluginInstanceProcessActionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


