/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// FirewallSubgroupStatusListResponseResponse struct for FirewallSubgroupStatusListResponseResponse
type FirewallSubgroupStatusListResponseResponse struct {
	// Chained list of rules delimited by newline.
	Rules *string `json:"rules,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewFirewallSubgroupStatusListResponseResponse instantiates a new FirewallSubgroupStatusListResponseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirewallSubgroupStatusListResponseResponse() *FirewallSubgroupStatusListResponseResponse {
	this := FirewallSubgroupStatusListResponseResponse{}
	return &this
}

// NewFirewallSubgroupStatusListResponseResponseWithDefaults instantiates a new FirewallSubgroupStatusListResponseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirewallSubgroupStatusListResponseResponseWithDefaults() *FirewallSubgroupStatusListResponseResponse {
	this := FirewallSubgroupStatusListResponseResponse{}
	return &this
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *FirewallSubgroupStatusListResponseResponse) GetRules() string {
	if o == nil || o.Rules == nil {
		var ret string
		return ret
	}
	return *o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallSubgroupStatusListResponseResponse) GetRulesOk() (*string, bool) {
	if o == nil || o.Rules == nil {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *FirewallSubgroupStatusListResponseResponse) HasRules() bool {
	if o != nil && o.Rules != nil {
		return true
	}

	return false
}

// SetRules gets a reference to the given string and assigns it to the Rules field.
func (o *FirewallSubgroupStatusListResponseResponse) SetRules(v string) {
	o.Rules = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FirewallSubgroupStatusListResponseResponse) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallSubgroupStatusListResponseResponse) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FirewallSubgroupStatusListResponseResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *FirewallSubgroupStatusListResponseResponse) SetStatus(v string) {
	o.Status = &v
}

func (o FirewallSubgroupStatusListResponseResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableFirewallSubgroupStatusListResponseResponse struct {
	value *FirewallSubgroupStatusListResponseResponse
	isSet bool
}

func (v NullableFirewallSubgroupStatusListResponseResponse) Get() *FirewallSubgroupStatusListResponseResponse {
	return v.value
}

func (v *NullableFirewallSubgroupStatusListResponseResponse) Set(val *FirewallSubgroupStatusListResponseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallSubgroupStatusListResponseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallSubgroupStatusListResponseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallSubgroupStatusListResponseResponse(val *FirewallSubgroupStatusListResponseResponse) *NullableFirewallSubgroupStatusListResponseResponse {
	return &NullableFirewallSubgroupStatusListResponseResponse{value: val, isSet: true}
}

func (v NullableFirewallSubgroupStatusListResponseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallSubgroupStatusListResponseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


