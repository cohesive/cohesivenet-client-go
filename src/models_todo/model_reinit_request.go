/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// ReinitRequest struct for ReinitRequest
type ReinitRequest struct {
	Reinitialize *bool `json:"reinitialize,omitempty"`
}

// NewReinitRequest instantiates a new ReinitRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReinitRequest() *ReinitRequest {
	this := ReinitRequest{}
	return &this
}

// NewReinitRequestWithDefaults instantiates a new ReinitRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReinitRequestWithDefaults() *ReinitRequest {
	this := ReinitRequest{}
	return &this
}

// GetReinitialize returns the Reinitialize field value if set, zero value otherwise.
func (o *ReinitRequest) GetReinitialize() bool {
	if o == nil || o.Reinitialize == nil {
		var ret bool
		return ret
	}
	return *o.Reinitialize
}

// GetReinitializeOk returns a tuple with the Reinitialize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReinitRequest) GetReinitializeOk() (*bool, bool) {
	if o == nil || o.Reinitialize == nil {
		return nil, false
	}
	return o.Reinitialize, true
}

// HasReinitialize returns a boolean if a field has been set.
func (o *ReinitRequest) HasReinitialize() bool {
	if o != nil && o.Reinitialize != nil {
		return true
	}

	return false
}

// SetReinitialize gets a reference to the given bool and assigns it to the Reinitialize field.
func (o *ReinitRequest) SetReinitialize(v bool) {
	o.Reinitialize = &v
}

func (o ReinitRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reinitialize != nil {
		toSerialize["reinitialize"] = o.Reinitialize
	}
	return json.Marshal(toSerialize)
}

type NullableReinitRequest struct {
	value *ReinitRequest
	isSet bool
}

func (v NullableReinitRequest) Get() *ReinitRequest {
	return v.value
}

func (v *NullableReinitRequest) Set(val *ReinitRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReinitRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReinitRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReinitRequest(val *ReinitRequest) *NullableReinitRequest {
	return &NullableReinitRequest{value: val, isSet: true}
}

func (v NullableReinitRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReinitRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


