/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// RebootRequest struct for RebootRequest
type RebootRequest struct {
	Reboot *bool `json:"reboot,omitempty"`
}

// NewRebootRequest instantiates a new RebootRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRebootRequest() *RebootRequest {
	this := RebootRequest{}
	return &this
}

// NewRebootRequestWithDefaults instantiates a new RebootRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRebootRequestWithDefaults() *RebootRequest {
	this := RebootRequest{}
	return &this
}

// GetReboot returns the Reboot field value if set, zero value otherwise.
func (o *RebootRequest) GetReboot() bool {
	if o == nil || o.Reboot == nil {
		var ret bool
		return ret
	}
	return *o.Reboot
}

// GetRebootOk returns a tuple with the Reboot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RebootRequest) GetRebootOk() (*bool, bool) {
	if o == nil || o.Reboot == nil {
		return nil, false
	}
	return o.Reboot, true
}

// HasReboot returns a boolean if a field has been set.
func (o *RebootRequest) HasReboot() bool {
	if o != nil && o.Reboot != nil {
		return true
	}

	return false
}

// SetReboot gets a reference to the given bool and assigns it to the Reboot field.
func (o *RebootRequest) SetReboot(v bool) {
	o.Reboot = &v
}

func (o RebootRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reboot != nil {
		toSerialize["reboot"] = o.Reboot
	}
	return json.Marshal(toSerialize)
}

type NullableRebootRequest struct {
	value *RebootRequest
	isSet bool
}

func (v NullableRebootRequest) Get() *RebootRequest {
	return v.value
}

func (v *NullableRebootRequest) Set(val *RebootRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRebootRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRebootRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRebootRequest(val *RebootRequest) *NullableRebootRequest {
	return &NullableRebootRequest{value: val, isSet: true}
}

func (v NullableRebootRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRebootRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


