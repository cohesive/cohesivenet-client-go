/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// SimpleStringListResponse struct for SimpleStringListResponse
type SimpleStringListResponse struct {
	// Array of string representation of resource
	Response []string `json:"response,omitempty"`
}

// NewSimpleStringListResponse instantiates a new SimpleStringListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleStringListResponse() *SimpleStringListResponse {
	this := SimpleStringListResponse{}
	return &this
}

// NewSimpleStringListResponseWithDefaults instantiates a new SimpleStringListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleStringListResponseWithDefaults() *SimpleStringListResponse {
	this := SimpleStringListResponse{}
	return &this
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *SimpleStringListResponse) GetResponse() []string {
	if o == nil || o.Response == nil {
		var ret []string
		return ret
	}
	return o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimpleStringListResponse) GetResponseOk() ([]string, bool) {
	if o == nil || o.Response == nil {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *SimpleStringListResponse) HasResponse() bool {
	if o != nil && o.Response != nil {
		return true
	}

	return false
}

// SetResponse gets a reference to the given []string and assigns it to the Response field.
func (o *SimpleStringListResponse) SetResponse(v []string) {
	o.Response = v
}

func (o SimpleStringListResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Response != nil {
		toSerialize["response"] = o.Response
	}
	return json.Marshal(toSerialize)
}

type NullableSimpleStringListResponse struct {
	value *SimpleStringListResponse
	isSet bool
}

func (v NullableSimpleStringListResponse) Get() *SimpleStringListResponse {
	return v.value
}

func (v *NullableSimpleStringListResponse) Set(val *SimpleStringListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleStringListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleStringListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleStringListResponse(val *SimpleStringListResponse) *NullableSimpleStringListResponse {
	return &NullableSimpleStringListResponse{value: val, isSet: true}
}

func (v NullableSimpleStringListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleStringListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


