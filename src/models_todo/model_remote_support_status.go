/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// RemoteSupportStatus struct for RemoteSupportStatus
type RemoteSupportStatus struct {
	Enabled *bool `json:"enabled,omitempty"`
	RevokeCredential *bool `json:"revoke_credential,omitempty"`
}

// NewRemoteSupportStatus instantiates a new RemoteSupportStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteSupportStatus() *RemoteSupportStatus {
	this := RemoteSupportStatus{}
	return &this
}

// NewRemoteSupportStatusWithDefaults instantiates a new RemoteSupportStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteSupportStatusWithDefaults() *RemoteSupportStatus {
	this := RemoteSupportStatus{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RemoteSupportStatus) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSupportStatus) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RemoteSupportStatus) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RemoteSupportStatus) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRevokeCredential returns the RevokeCredential field value if set, zero value otherwise.
func (o *RemoteSupportStatus) GetRevokeCredential() bool {
	if o == nil || o.RevokeCredential == nil {
		var ret bool
		return ret
	}
	return *o.RevokeCredential
}

// GetRevokeCredentialOk returns a tuple with the RevokeCredential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteSupportStatus) GetRevokeCredentialOk() (*bool, bool) {
	if o == nil || o.RevokeCredential == nil {
		return nil, false
	}
	return o.RevokeCredential, true
}

// HasRevokeCredential returns a boolean if a field has been set.
func (o *RemoteSupportStatus) HasRevokeCredential() bool {
	if o != nil && o.RevokeCredential != nil {
		return true
	}

	return false
}

// SetRevokeCredential gets a reference to the given bool and assigns it to the RevokeCredential field.
func (o *RemoteSupportStatus) SetRevokeCredential(v bool) {
	o.RevokeCredential = &v
}

func (o RemoteSupportStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.RevokeCredential != nil {
		toSerialize["revoke_credential"] = o.RevokeCredential
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteSupportStatus struct {
	value *RemoteSupportStatus
	isSet bool
}

func (v NullableRemoteSupportStatus) Get() *RemoteSupportStatus {
	return v.value
}

func (v *NullableRemoteSupportStatus) Set(val *RemoteSupportStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteSupportStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteSupportStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteSupportStatus(val *RemoteSupportStatus) *NullableRemoteSupportStatus {
	return &NullableRemoteSupportStatus{value: val, isSet: true}
}

func (v NullableRemoteSupportStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteSupportStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


