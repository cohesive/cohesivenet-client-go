/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// ClientpackTags struct for ClientpackTags
type ClientpackTags struct {
	// Clientpack name
	Name *string `json:"name,omitempty"`
	Tags *map[string]string `json:"tags,omitempty"`
}

// NewClientpackTags instantiates a new ClientpackTags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientpackTags() *ClientpackTags {
	this := ClientpackTags{}
	return &this
}

// NewClientpackTagsWithDefaults instantiates a new ClientpackTags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientpackTagsWithDefaults() *ClientpackTags {
	this := ClientpackTags{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ClientpackTags) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientpackTags) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ClientpackTags) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ClientpackTags) SetName(v string) {
	o.Name = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ClientpackTags) GetTags() map[string]string {
	if o == nil || o.Tags == nil {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientpackTags) GetTagsOk() (*map[string]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ClientpackTags) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *ClientpackTags) SetTags(v map[string]string) {
	o.Tags = &v
}

func (o ClientpackTags) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableClientpackTags struct {
	value *ClientpackTags
	isSet bool
}

func (v NullableClientpackTags) Get() *ClientpackTags {
	return v.value
}

func (v *NullableClientpackTags) Set(val *ClientpackTags) {
	v.value = val
	v.isSet = true
}

func (v NullableClientpackTags) IsSet() bool {
	return v.isSet
}

func (v *NullableClientpackTags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientpackTags(val *ClientpackTags) *NullableClientpackTags {
	return &NullableClientpackTags{value: val, isSet: true}
}

func (v NullableClientpackTags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientpackTags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


