/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
	"fmt"
)

// UpdateClientpack - struct for UpdateClientpack
type UpdateClientpack struct {
	UpdateClientpackOneOf *UpdateClientpackOneOf
	UpdateClientpackOneOf1 *UpdateClientpackOneOf1
}

// UpdateClientpackOneOfAsUpdateClientpack is a convenience function that returns UpdateClientpackOneOf wrapped in UpdateClientpack
func UpdateClientpackOneOfAsUpdateClientpack(v *UpdateClientpackOneOf) UpdateClientpack {
	return UpdateClientpack{
		UpdateClientpackOneOf: v,
	}
}

// UpdateClientpackOneOf1AsUpdateClientpack is a convenience function that returns UpdateClientpackOneOf1 wrapped in UpdateClientpack
func UpdateClientpackOneOf1AsUpdateClientpack(v *UpdateClientpackOneOf1) UpdateClientpack {
	return UpdateClientpack{
		UpdateClientpackOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateClientpack) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateClientpackOneOf
	err = newStrictDecoder(data).Decode(&dst.UpdateClientpackOneOf)
	if err == nil {
		jsonUpdateClientpackOneOf, _ := json.Marshal(dst.UpdateClientpackOneOf)
		if string(jsonUpdateClientpackOneOf) == "{}" { // empty struct
			dst.UpdateClientpackOneOf = nil
		} else {
			match++
		}
	} else {
		dst.UpdateClientpackOneOf = nil
	}

	// try to unmarshal data into UpdateClientpackOneOf1
	err = newStrictDecoder(data).Decode(&dst.UpdateClientpackOneOf1)
	if err == nil {
		jsonUpdateClientpackOneOf1, _ := json.Marshal(dst.UpdateClientpackOneOf1)
		if string(jsonUpdateClientpackOneOf1) == "{}" { // empty struct
			dst.UpdateClientpackOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.UpdateClientpackOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateClientpackOneOf = nil
		dst.UpdateClientpackOneOf1 = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(UpdateClientpack)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(UpdateClientpack)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateClientpack) MarshalJSON() ([]byte, error) {
	if src.UpdateClientpackOneOf != nil {
		return json.Marshal(&src.UpdateClientpackOneOf)
	}

	if src.UpdateClientpackOneOf1 != nil {
		return json.Marshal(&src.UpdateClientpackOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateClientpack) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UpdateClientpackOneOf != nil {
		return obj.UpdateClientpackOneOf
	}

	if obj.UpdateClientpackOneOf1 != nil {
		return obj.UpdateClientpackOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableUpdateClientpack struct {
	value *UpdateClientpack
	isSet bool
}

func (v NullableUpdateClientpack) Get() *UpdateClientpack {
	return v.value
}

func (v *NullableUpdateClientpack) Set(val *UpdateClientpack) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateClientpack) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateClientpack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateClientpack(val *UpdateClientpack) *NullableUpdateClientpack {
	return &NullableUpdateClientpack{value: val, isSet: true}
}

func (v NullableUpdateClientpack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateClientpack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


