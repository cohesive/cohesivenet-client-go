/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// ContainerImageList struct for ContainerImageList
type ContainerImageList struct {
	Images []ContainerImage `json:"images,omitempty"`
}

// NewContainerImageList instantiates a new ContainerImageList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerImageList() *ContainerImageList {
	this := ContainerImageList{}
	return &this
}

// NewContainerImageListWithDefaults instantiates a new ContainerImageList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerImageListWithDefaults() *ContainerImageList {
	this := ContainerImageList{}
	return &this
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *ContainerImageList) GetImages() []ContainerImage {
	if o == nil || o.Images == nil {
		var ret []ContainerImage
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerImageList) GetImagesOk() ([]ContainerImage, bool) {
	if o == nil || o.Images == nil {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *ContainerImageList) HasImages() bool {
	if o != nil && o.Images != nil {
		return true
	}

	return false
}

// SetImages gets a reference to the given []ContainerImage and assigns it to the Images field.
func (o *ContainerImageList) SetImages(v []ContainerImage) {
	o.Images = v
}

func (o ContainerImageList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Images != nil {
		toSerialize["images"] = o.Images
	}
	return json.Marshal(toSerialize)
}

type NullableContainerImageList struct {
	value *ContainerImageList
	isSet bool
}

func (v NullableContainerImageList) Get() *ContainerImageList {
	return v.value
}

func (v *NullableContainerImageList) Set(val *ContainerImageList) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerImageList) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerImageList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerImageList(val *ContainerImageList) *NullableContainerImageList {
	return &NullableContainerImageList{value: val, isSet: true}
}

func (v NullableContainerImageList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerImageList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


