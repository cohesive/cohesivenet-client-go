/*
VNS3 Controller API

Cohesive networks VNS3 provides complete control of your network's addressing, routes, rules and edge enabling a secure, connected and reactive cloud network. 

API version: 6.0.0
Contact: support@cohesive.net
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesivenet

import (
	"encoding/json"
)

// ResetOverlayClientRequest struct for ResetOverlayClientRequest
type ResetOverlayClientRequest struct {
	// Name of the clientpack as returned by the \"desc_clientpacks\" call
	Name string `json:"name"`
	Disconnect *bool `json:"disconnect,omitempty"`
}

// NewResetOverlayClientRequest instantiates a new ResetOverlayClientRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResetOverlayClientRequest(name string) *ResetOverlayClientRequest {
	this := ResetOverlayClientRequest{}
	this.Name = name
	var disconnect bool = true
	this.Disconnect = &disconnect
	return &this
}

// NewResetOverlayClientRequestWithDefaults instantiates a new ResetOverlayClientRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResetOverlayClientRequestWithDefaults() *ResetOverlayClientRequest {
	this := ResetOverlayClientRequest{}
	var disconnect bool = true
	this.Disconnect = &disconnect
	return &this
}

// GetName returns the Name field value
func (o *ResetOverlayClientRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ResetOverlayClientRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ResetOverlayClientRequest) SetName(v string) {
	o.Name = v
}

// GetDisconnect returns the Disconnect field value if set, zero value otherwise.
func (o *ResetOverlayClientRequest) GetDisconnect() bool {
	if o == nil || o.Disconnect == nil {
		var ret bool
		return ret
	}
	return *o.Disconnect
}

// GetDisconnectOk returns a tuple with the Disconnect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResetOverlayClientRequest) GetDisconnectOk() (*bool, bool) {
	if o == nil || o.Disconnect == nil {
		return nil, false
	}
	return o.Disconnect, true
}

// HasDisconnect returns a boolean if a field has been set.
func (o *ResetOverlayClientRequest) HasDisconnect() bool {
	if o != nil && o.Disconnect != nil {
		return true
	}

	return false
}

// SetDisconnect gets a reference to the given bool and assigns it to the Disconnect field.
func (o *ResetOverlayClientRequest) SetDisconnect(v bool) {
	o.Disconnect = &v
}

func (o ResetOverlayClientRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Disconnect != nil {
		toSerialize["disconnect"] = o.Disconnect
	}
	return json.Marshal(toSerialize)
}

type NullableResetOverlayClientRequest struct {
	value *ResetOverlayClientRequest
	isSet bool
}

func (v NullableResetOverlayClientRequest) Get() *ResetOverlayClientRequest {
	return v.value
}

func (v *NullableResetOverlayClientRequest) Set(val *ResetOverlayClientRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableResetOverlayClientRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableResetOverlayClientRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResetOverlayClientRequest(val *ResetOverlayClientRequest) *NullableResetOverlayClientRequest {
	return &NullableResetOverlayClientRequest{value: val, isSet: true}
}

func (v NullableResetOverlayClientRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResetOverlayClientRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


